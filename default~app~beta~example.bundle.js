(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~app~beta~example"],{

/***/ "./node_modules/anatomogram/lib/img sync recursive ^\\.\\/.*selected\\.png$":
/*!*********************************************************************!*\
  !*** ./node_modules/anatomogram/lib/img sync ^\.\/.*selected\.png$ ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./brain.selected.png": "./node_modules/anatomogram/lib/img/brain.selected.png",
	"./brain.unselected.png": "./node_modules/anatomogram/lib/img/brain.unselected.png",
	"./female.selected.png": "./node_modules/anatomogram/lib/img/female.selected.png",
	"./female.unselected.png": "./node_modules/anatomogram/lib/img/female.unselected.png",
	"./flower_parts.selected.png": "./node_modules/anatomogram/lib/img/flower_parts.selected.png",
	"./flower_parts.unselected.png": "./node_modules/anatomogram/lib/img/flower_parts.unselected.png",
	"./male.selected.png": "./node_modules/anatomogram/lib/img/male.selected.png",
	"./male.unselected.png": "./node_modules/anatomogram/lib/img/male.unselected.png",
	"./whole_plant.selected.png": "./node_modules/anatomogram/lib/img/whole_plant.selected.png",
	"./whole_plant.unselected.png": "./node_modules/anatomogram/lib/img/whole_plant.unselected.png"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/anatomogram/lib/img sync recursive ^\\.\\/.*selected\\.png$";

/***/ }),

/***/ "./node_modules/anatomogram/lib/svg sync recursive ^\\.\\/.*\\.svg$":
/*!*************************************************************!*\
  !*** ./node_modules/anatomogram/lib/svg sync ^\.\/.*\.svg$ ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./anolis_carolinensis.svg": "./node_modules/anatomogram/lib/svg/anolis_carolinensis.svg",
	"./arabidopsis_thaliana.svg": "./node_modules/anatomogram/lib/svg/arabidopsis_thaliana.svg",
	"./bos_taurus.svg": "./node_modules/anatomogram/lib/svg/bos_taurus.svg",
	"./brachypodium_distachyon.flower_parts.svg": "./node_modules/anatomogram/lib/svg/brachypodium_distachyon.flower_parts.svg",
	"./brachypodium_distachyon.whole_plant.svg": "./node_modules/anatomogram/lib/svg/brachypodium_distachyon.whole_plant.svg",
	"./gallus_gallus.svg": "./node_modules/anatomogram/lib/svg/gallus_gallus.svg",
	"./homo_sapiens.brain.svg": "./node_modules/anatomogram/lib/svg/homo_sapiens.brain.svg",
	"./homo_sapiens.female.svg": "./node_modules/anatomogram/lib/svg/homo_sapiens.female.svg",
	"./homo_sapiens.male.svg": "./node_modules/anatomogram/lib/svg/homo_sapiens.male.svg",
	"./hordeum_vulgare.flower_parts.svg": "./node_modules/anatomogram/lib/svg/hordeum_vulgare.flower_parts.svg",
	"./hordeum_vulgare.whole_plant.svg": "./node_modules/anatomogram/lib/svg/hordeum_vulgare.whole_plant.svg",
	"./macaca_mulatta.svg": "./node_modules/anatomogram/lib/svg/macaca_mulatta.svg",
	"./monodelphis_domestica.svg": "./node_modules/anatomogram/lib/svg/monodelphis_domestica.svg",
	"./mus_musculus.brain.svg": "./node_modules/anatomogram/lib/svg/mus_musculus.brain.svg",
	"./mus_musculus.female.svg": "./node_modules/anatomogram/lib/svg/mus_musculus.female.svg",
	"./mus_musculus.male.svg": "./node_modules/anatomogram/lib/svg/mus_musculus.male.svg",
	"./oryza_sativa.flower_parts.svg": "./node_modules/anatomogram/lib/svg/oryza_sativa.flower_parts.svg",
	"./oryza_sativa.whole_plant.svg": "./node_modules/anatomogram/lib/svg/oryza_sativa.whole_plant.svg",
	"./papio_anubis.svg": "./node_modules/anatomogram/lib/svg/papio_anubis.svg",
	"./rattus_norvegicus.svg": "./node_modules/anatomogram/lib/svg/rattus_norvegicus.svg",
	"./solanum_lycopersicum.flower_parts.svg": "./node_modules/anatomogram/lib/svg/solanum_lycopersicum.flower_parts.svg",
	"./solanum_lycopersicum.whole_plant.svg": "./node_modules/anatomogram/lib/svg/solanum_lycopersicum.whole_plant.svg",
	"./solanum_tuberosum.svg": "./node_modules/anatomogram/lib/svg/solanum_tuberosum.svg",
	"./sorghum_bicolor.flower_parts.svg": "./node_modules/anatomogram/lib/svg/sorghum_bicolor.flower_parts.svg",
	"./sorghum_bicolor.whole_plant.svg": "./node_modules/anatomogram/lib/svg/sorghum_bicolor.whole_plant.svg",
	"./tetraodon_nigroviridis.svg": "./node_modules/anatomogram/lib/svg/tetraodon_nigroviridis.svg",
	"./triticum_aestivum.flower_parts.svg": "./node_modules/anatomogram/lib/svg/triticum_aestivum.flower_parts.svg",
	"./triticum_aestivum.whole_plant.svg": "./node_modules/anatomogram/lib/svg/triticum_aestivum.whole_plant.svg",
	"./xenopus_tropicalis.svg": "./node_modules/anatomogram/lib/svg/xenopus_tropicalis.svg",
	"./zea_mays.flower_parts.svg": "./node_modules/anatomogram/lib/svg/zea_mays.flower_parts.svg",
	"./zea_mays.whole_plant.svg": "./node_modules/anatomogram/lib/svg/zea_mays.whole_plant.svg"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/anatomogram/lib/svg sync recursive ^\\.\\/.*\\.svg$";

/***/ }),

/***/ "./src/ChellVizApp.tsx":
/*!*****************************!*\
  !*** ./src/ChellVizApp.tsx ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var react_router_dom_1 = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/es/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var container_1 = __webpack_require__(/*! ~chell-viz~/container */ "./src/container/index.ts");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
var page_1 = __webpack_require__(/*! ~chell-viz~/page */ "./src/page/index.ts");
var ChellVizApp = /** @class */ (function (_super) {
    __extends(ChellVizApp, _super);
    function ChellVizApp(props) {
        var _this = _super.call(this, props) || this;
        _this.renderComponents = function (props) { return (React.createElement(context_1.ChellContextProvider, __assign({}, props),
            React.createElement(semantic_ui_react_1.Container, { id: 'ChellVizApp', fluid: true },
                React.createElement(container_1.SiteHeader, __assign({}, props)),
                React.createElement(react_router_dom_1.Route, { exact: true, strict: true, path: '/visualizations', render: _this.renderVisualizationsPage }),
                React.createElement(react_router_dom_1.Route, { exact: true, strict: true, path: '/visualizations/', render: _this.renderOverviewPage }),
                React.createElement(react_router_dom_1.Route, { path: '/dataset', render: _this.renderDatasetPage }),
                React.createElement(react_router_dom_1.Route, { path: '/stories', render: _this.renderStoriesPage }),
                React.createElement(react_router_dom_1.Route, { exact: true, path: '/', render: _this.renderLandingPage })))); };
        _this.renderVisualizationsPage = function (props) {
            return React.createElement(page_1.VisualizationsPage, __assign({}, props));
        };
        _this.renderDatasetPage = function (props) {
            return React.createElement(page_1.DatasetPage, __assign({}, props));
        };
        _this.renderLandingPage = function (props) {
            return React.createElement(page_1.LandingPage, __assign({}, props));
        };
        _this.renderOverviewPage = function (props) {
            return React.createElement(page_1.VizOverviewPage, __assign({}, props));
        };
        _this.renderStoriesPage = function (props) {
            return React.createElement(page_1.StoriesPage, __assign({}, props));
        };
        _this.state = {
            activeVisualizations: 0,
        };
        return _this;
    }
    ChellVizApp.prototype.componentDidMount = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.setState({
                    activeVisualizations: 2,
                });
                return [2 /*return*/];
            });
        });
    };
    ChellVizApp.prototype.render = function () {
        return (React.createElement(react_router_dom_1.HashRouter, null,
            React.createElement(react_router_dom_1.Route, { render: this.renderComponents })));
    };
    return ChellVizApp;
}(React.Component));
exports.ChellVizApp = ChellVizApp;


/***/ }),

/***/ "./src/component/ContactMap.tsx":
/*!**************************************!*\
  !*** ./src/component/ContactMap.tsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
exports.initialContactMapState = {
    pointsToPlot: new Array(),
};
var ContactMapClass = /** @class */ (function (_super) {
    __extends(ContactMapClass, _super);
    function ContactMapClass(props) {
        var _this = _super.call(this, props) || this;
        _this.state = exports.initialContactMapState;
        _this.onNodeSizeChange = function (index) { return function (value) {
            var pointsToPlot = _this.state.pointsToPlot;
            _this.setState({
                pointsToPlot: __spread(pointsToPlot.slice(0, index), [
                    __assign({}, pointsToPlot[index], { nodeSize: value })
                ], pointsToPlot.slice(index + 1)),
            });
        }; };
        _this.generateNodeSizeSliderConfigs = function (entries) {
            return entries.map(function (entry, index) {
                return {
                    id: "node-size-slider-" + index,
                    name: "Node size for " + entry.name,
                    onChange: _this.onNodeSizeChange(index),
                    type: data_1.CONFIGURATION_COMPONENT_TYPE.SLIDER,
                    values: {
                        current: entry.nodeSize,
                        max: 20,
                        min: 1,
                    },
                };
            });
        };
        _this.onMouseEnter = function (cb) { return function (e) {
            var e_1, _a, e_2, _b;
            if (e.isAxis()) {
                var _c = _this.props, secondaryStructureContext = _c.secondaryStructureContext, data = _c.data;
                try {
                    for (var _d = __values(data.secondaryStructures), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var secondaryStructure = _e.value;
                        try {
                            for (var secondaryStructure_1 = __values(secondaryStructure), secondaryStructure_1_1 = secondaryStructure_1.next(); !secondaryStructure_1_1.done; secondaryStructure_1_1 = secondaryStructure_1.next()) {
                                var section = secondaryStructure_1_1.value;
                                if (section.contains.apply(section, __spread(e.selectedPoints))) {
                                    secondaryStructureContext.addHoveredSecondaryStructure(section);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (secondaryStructure_1_1 && !secondaryStructure_1_1.done && (_b = secondaryStructure_1.return)) _b.call(secondaryStructure_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else {
                cb(e.selectedPoints);
            }
        }; };
        _this.onMouseLeave = function (cb) { return function (e) {
            var e_3, _a, e_4, _b;
            if (e.isAxis()) {
                var _c = _this.props, data = _c.data, secondaryStructureContext = _c.secondaryStructureContext;
                try {
                    for (var _d = __values(data.secondaryStructures), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var secondaryStructure = _e.value;
                        try {
                            for (var secondaryStructure_2 = __values(secondaryStructure), secondaryStructure_2_1 = secondaryStructure_2.next(); !secondaryStructure_2_1.done; secondaryStructure_2_1 = secondaryStructure_2.next()) {
                                var section = secondaryStructure_2_1.value;
                                if (section.contains.apply(section, __spread(e.selectedPoints))) {
                                    secondaryStructureContext.removeHoveredSecondaryStructure(section);
                                }
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (secondaryStructure_2_1 && !secondaryStructure_2_1.done && (_b = secondaryStructure_2.return)) _b.call(secondaryStructure_2);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            else if (cb) {
                cb(e.selectedPoints);
            }
        }; };
        _this.onMouseClick = function (cb) { return function (e) {
            var e_5, _a, e_6, _b;
            if (e.isAxis()) {
                var _c = _this.props, data = _c.data, secondaryStructureContext = _c.secondaryStructureContext;
                try {
                    for (var _d = __values(data.secondaryStructures), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var secondaryStructure = _e.value;
                        try {
                            for (var secondaryStructure_3 = __values(secondaryStructure), secondaryStructure_3_1 = secondaryStructure_3.next(); !secondaryStructure_3_1.done; secondaryStructure_3_1 = secondaryStructure_3.next()) {
                                var section = secondaryStructure_3_1.value;
                                if (section.contains.apply(section, __spread(e.selectedPoints))) {
                                    if (secondaryStructureContext.selectedSecondaryStructures.includes(section)) {
                                        secondaryStructureContext.removeSecondaryStructure(section);
                                    }
                                    else {
                                        secondaryStructureContext.addSelectedSecondaryStructure(section);
                                    }
                                }
                            }
                        }
                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                        finally {
                            try {
                                if (secondaryStructure_3_1 && !secondaryStructure_3_1.done && (_b = secondaryStructure_3.return)) _b.call(secondaryStructure_3);
                            }
                            finally { if (e_6) throw e_6.error; }
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
            else {
                cb(e.selectedPoints);
            }
        }; };
        _this.onMouseSelect = function (cb) { return function (e) {
            if (cb) {
                // For the contact map, all the x/y values are mirrored and correspond directly with i/j values.
                // Thus, all the residue numbers can be obtained by getting either all x or values from ths selected points.
                cb(e.selectedPoints.map(function (point) { return point; }));
            }
        }; };
        return _this;
    }
    ContactMapClass.prototype.componentDidMount = function () {
        this.setupPointsToPlot(this.props.data.couplingScores);
    };
    ContactMapClass.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, data = _a.data, residueContext = _a.residueContext;
        if (data !== prevProps.data || residueContext.lockedResiduePairs !== prevProps.residueContext.lockedResiduePairs) {
            this.setupPointsToPlot(data.couplingScores);
        }
    };
    ContactMapClass.prototype.render = function () {
        var _a = this.props, configurations = _a.configurations, isDataLoading = _a.isDataLoading, residueContext = _a.residueContext, style = _a.style;
        var pointsToPlot = this.state.pointsToPlot;
        return (React.createElement("div", { className: "ContactMapComponent", style: __assign({}, style) },
            React.createElement(semantic_ui_react_1.Dimmer.Dimmable, { dimmed: true },
                React.createElement(semantic_ui_react_1.Dimmer, { active: isDataLoading },
                    React.createElement(semantic_ui_react_1.Loader, null)),
                this.renderContactMapChart(pointsToPlot, __spread([
                    {
                        name: 'Clear Selections',
                        onClick: residueContext.removeAllLockedResiduePairs,
                        type: data_1.CONFIGURATION_COMPONENT_TYPE.BUTTON,
                    }
                ], configurations, this.generateNodeSizeSliderConfigs(pointsToPlot))))));
    };
    ContactMapClass.prototype.setupPointsToPlot = function (couplingContainer) {
        var _a = this.props, formattedPoints = _a.formattedPoints, observedColor = _a.observedColor, highlightColor = _a.highlightColor, residueContext = _a.residueContext;
        var pointsToPlot = this.state.pointsToPlot;
        var chartNames = {
            known: 'Known Structure Contact',
            selected: 'Selected Residue Pairs',
        };
        var knownPointsIndex = pointsToPlot.findIndex(function (entry) { return entry.name === chartNames.known; });
        var selectedPointIndex = pointsToPlot.findIndex(function (entry) { return entry.name === chartNames.selected; });
        var observedContactPoints = couplingContainer.getObservedContacts();
        var result = new (Array.bind.apply(Array, __spread([void 0, component_1.generateChartDataEntry('text', { start: observedColor, end: 'rgb(100,177,200)' }, chartNames.known, '(from PDB structure)', knownPointsIndex >= 0 ? pointsToPlot[knownPointsIndex].nodeSize : 4, observedContactPoints, {
                text: observedContactPoints.map(function (point) {
                    var score = couplingContainer.getCouplingScore(point.i, point.j);
                    return score && score.A_i && score.A_j
                        ? "(" + point.i + score.A_i + ", " + point.j + score.A_j + ")"
                        : "(" + point.i + ", " + point.j + ")";
                }),
            })], formattedPoints)))();
        var lockedResiduePairs = residueContext.lockedResiduePairs, hoveredResidues = residueContext.hoveredResidues;
        var chartPoints = new Array();
        if (hoveredResidues.length >= 1) {
            chartPoints.push({
                i: hoveredResidues[0],
                j: hoveredResidues.length === 1 ? hoveredResidues[0] : hoveredResidues[1],
            });
        }
        if (lockedResiduePairs.size >= 1) {
            chartPoints.push.apply(chartPoints, __spread(Array.from(lockedResiduePairs.keys()).reduce(function (reduceResult, key) {
                var keyPair = lockedResiduePairs.get(key);
                if (keyPair && keyPair.length === 2) {
                    reduceResult.push({ i: keyPair[0], j: keyPair[1], dist: 0 });
                }
                return reduceResult;
            }, new Array())));
        }
        result.push(component_1.generateChartDataEntry('none', highlightColor, chartNames.selected, '', selectedPointIndex >= 0 ? pointsToPlot[selectedPointIndex].nodeSize : 6, chartPoints, {
            marker: {
                color: new Array(chartPoints.length * 2).fill(highlightColor),
                line: {
                    color: highlightColor,
                    width: 3,
                },
                symbol: 'circle-open',
            },
        }));
        this.setState(__assign({}, this.state, { pointsToPlot: __spread(result) }));
    };
    ContactMapClass.prototype.renderContactMapChart = function (pointsToPlot, configurations) {
        var _a = this.props, data = _a.data, height = _a.height, onBoxSelection = _a.onBoxSelection, residueContext = _a.residueContext, showConfigurations = _a.showConfigurations, secondaryStructureContext = _a.secondaryStructureContext, width = _a.width;
        return (React.createElement(component_1.ContactMapChart, { candidateResidues: residueContext.candidateResidues, configurations: configurations, contactData: pointsToPlot, height: height, onClickCallback: this.onMouseClick(residueContext.toggleLockedResiduePair), onHoverCallback: this.onMouseEnter(residueContext.addHoveredResidues), onSelectedCallback: this.onMouseSelect(onBoxSelection), onUnHoverCallback: this.onMouseLeave(residueContext.removeHoveredResidues), range: data.couplingScores.residueIndexRange.max + 20, secondaryStructures: data.pdbData ? data.pdbData.secondaryStructureSections : [], showConfigurations: showConfigurations, selectedSecondaryStructures: [secondaryStructureContext.selectedSecondaryStructures], width: width }));
    };
    ContactMapClass.defaultProps = {
        configurations: new Array(),
        data: {
            couplingScores: new data_1.CouplingContainer(),
            secondaryStructures: new Array(),
        },
        enableSliders: true,
        formattedPoints: new Array(),
        height: '100%',
        highlightColor: '#ff8800',
        isDataLoading: false,
        observedColor: '#0000ff',
        residueContext: __assign({}, context_1.initialResidueContext),
        secondaryStructureContext: __assign({}, context_1.initialSecondaryStructureContext),
        showConfigurations: true,
        width: '100%',
    };
    return ContactMapClass;
}(React.Component));
exports.ContactMapClass = ContactMapClass;
var ContactMap = function (props) { return (React.createElement(context_1.ResidueContextConsumer, null, function (residueContext) { return (React.createElement(context_1.SecondaryStructureContextConsumer, null, function (secondaryStructureContext) { return (React.createElement(ContactMapClass, __assign({ residueContext: residueContext, secondaryStructureContext: secondaryStructureContext }, props))); })); })); };
exports.ContactMap = ContactMap;


/***/ }),

/***/ "./src/component/FeatureViewer.tsx":
/*!*****************************************!*\
  !*** ./src/component/FeatureViewer.tsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var immutable_1 = __webpack_require__(/*! immutable */ "./node_modules/immutable/dist/immutable.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var FeatureViewer = /** @class */ (function (_super) {
    __extends(FeatureViewer, _super);
    function FeatureViewer(props) {
        var _this = _super.call(this, props) || this;
        _this.onFeatureHover = function (event) {
            var e_1, _a;
            var _b = _this.props, data = _b.data, getTextForHover = _b.getTextForHover;
            var hoveredFeatureIndex = -1;
            // TODO Handle vertical viewer, better selection logic.
            var xCoords = [event.selectedPoints[0], event.selectedPoints[2]];
            for (var i = 0; i < data.length; ++i) {
                try {
                    for (var xCoords_1 = __values(xCoords), xCoords_1_1 = xCoords_1.next(); !xCoords_1_1.done; xCoords_1_1 = xCoords_1.next()) {
                        var xCoord = xCoords_1_1.value;
                        if (data[i].contains(xCoord)) {
                            hoveredFeatureIndex = i;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (xCoords_1_1 && !xCoords_1_1.done && (_a = xCoords_1.return)) _a.call(xCoords_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            _this.setState({
                hoverAnnotationText: getTextForHover && hoveredFeatureIndex >= 0
                    ? getTextForHover(data[hoveredFeatureIndex].label, hoveredFeatureIndex)
                    : '',
                hoveredFeatureIndex: hoveredFeatureIndex,
            });
        };
        _this.onFeatureClick = function (event) {
            var _a = _this.props, data = _a.data, onClickCallback = _a.onClickCallback;
            var selectedFeatureIndices = _this.deriveFeatureIndices(data, event.selectedPoints);
            if (onClickCallback) {
                onClickCallback(_this.deriveSelectedFeatures(data, selectedFeatureIndices.toArray()));
            }
            _this.setState({
                selectedFeatureIndices: selectedFeatureIndices,
                selectedRange: new data_1.Chell1DSection('selection', -1, -1),
            });
        };
        _this.onFeatureSelect = function (event) {
            var _a = _this.props, data = _a.data, onSelectCallback = _a.onSelectCallback;
            var selectedFeatureIndices = _this.deriveFeatureIndices(data, event.selectedPoints);
            var plotlyEvent = event.plotlyEvent;
            var selectedRange = _this.state.selectedRange;
            if (plotlyEvent.range) {
                selectedRange = new data_1.Chell1DSection('selection', Math.floor(plotlyEvent.range.x[0]), Math.ceil(plotlyEvent.range.x[1]));
                var selection = {
                    end: selectedRange.end,
                    featuresSelected: _this.deriveSelectedFeatures(data, selectedFeatureIndices.toArray()),
                    length: selectedRange.length,
                    start: selectedRange.start,
                };
                if (onSelectCallback) {
                    onSelectCallback(selection);
                }
            }
            _this.setState({
                selectedFeatureIndices: selectedFeatureIndices,
                selectedRange: selectedRange,
            });
        };
        /**
         * Derive the indices of the Features from the points the user selected.
         */
        _this.deriveFeatureIndices = function (data, userSelectedPoints) {
            var featureIndices = immutable_1.Set();
            var _loop_1 = function (i) {
                var xCoord = userSelectedPoints[i];
                data
                    .reduce(function (result, datum, index) { return (datum.contains(xCoord) ? __spread(result, [index]) : result); }, new Array())
                    .forEach(function (indexToAdd) {
                    featureIndices = featureIndices.add(indexToAdd);
                });
            };
            // Points come to us as [x0, y0, x1, y1, ..., xn, yn], so we skip every other point.
            for (var i = 0; i < userSelectedPoints.length; i += 2) {
                _loop_1(i);
            }
            return featureIndices;
        };
        /**
         * Shorthand to get the raw section data for a set of Features given some indices.
         */
        _this.deriveSelectedFeatures = function (data, selectedFeatureIndices) {
            return selectedFeatureIndices.map(function (index) { return new data_1.Chell1DSection(data[index].label, data[index].start, data[index].end); });
        };
        _this.state = {
            hoverAnnotationText: '',
            hoveredFeatureIndex: -1,
            plotlyConfig: {
                showAxisDragHandles: false,
                showAxisRangeEntryBoxes: false,
            },
            plotlyData: [],
            plotlyLayout: {},
            selectedFeatureIndices: immutable_1.Set(),
            selectedRange: new data_1.Chell1DSection('selection', -1, -1),
        };
        return _this;
    }
    FeatureViewer.getDerivedStateFromProps = function (nextProps, nextState) {
        var data = nextProps.data, height = nextProps.height, maxLength = nextProps.maxLength, showGrouped = nextProps.showGrouped, title = nextProps.title, width = nextProps.width;
        var hoverAnnotationText = nextState.hoverAnnotationText, hoveredFeatureIndex = nextState.hoveredFeatureIndex, selectedRange = nextState.selectedRange;
        var plotlyData = data.map(function (datum, index) {
            var yIndex = showGrouped
                ? index
                : data.findIndex(function (candidateDatum) { return datum.label.localeCompare(candidateDatum.label) === 0; });
            return FeatureViewer.getPlotlyDataObject(datum, showGrouped, yIndex);
        });
        plotlyData.push({
            hoverinfo: 'none',
            line: {
                color: 'orange',
                width: 10,
            },
            mode: 'lines',
            showlegend: false,
            x: [selectedRange.start, selectedRange.end],
            y: [-0.25, -0.25],
        });
        var hoveredDatum = plotlyData[hoveredFeatureIndex];
        return {
            plotlyData: plotlyData,
            plotlyLayout: {
                annotations: hoveredFeatureIndex >= 0 && hoveredDatum.x && hoveredDatum.y
                    ? [
                        {
                            align: 'left',
                            arrowhead: 0,
                            arrowsize: 1,
                            arrowwidth: 1,
                            ax: 0,
                            ay: -25,
                            bgcolor: '#ffffff',
                            bordercolor: '#000000',
                            borderpad: 5,
                            showarrow: true,
                            text: hoverAnnotationText,
                            x: hoveredDatum.x[0],
                            xref: 'x',
                            y: hoveredDatum.y[hoveredDatum.y.length - 3],
                            yref: 'y',
                        },
                    ]
                    : [],
                dragmode: 'select',
                height: height,
                hovermode: 'closest',
                margin: {
                    b: 30,
                    t: 60,
                },
                showlegend: false,
                title: title,
                width: width,
                xaxis: data.length > 0
                    ? {
                        autorange: false,
                        fixedrange: true,
                        range: [0, maxLength ? maxLength : data.reduce(function (prev, cur) { return Math.max(prev, cur.end); }, -1) + 200],
                        showgrid: false,
                        tick0: 0,
                        tickmode: 'auto',
                        ticks: 'outside',
                    }
                    : { visible: false },
                yaxis: {
                    autorange: false,
                    fixedrange: true,
                    range: [-0.25, showGrouped ? 2 : data.length],
                    visible: false,
                },
            },
        };
    };
    FeatureViewer.getBoxForChellSection = function (datum) {
        return [
            datum.end - (datum.end - datum.start) / 2,
            null,
            datum.start,
            datum.start,
            datum.end,
            datum.end,
            datum.start,
        ];
    };
    FeatureViewer.prototype.render = function () {
        var _a = this.props, width = _a.width, height = _a.height;
        var _b = this.state, plotlyConfig = _b.plotlyConfig, plotlyData = _b.plotlyData, plotlyLayout = _b.plotlyLayout;
        return (React.createElement("div", { style: { height: height, width: width } },
            React.createElement(component_1.PlotlyChart, { config: plotlyConfig, data: plotlyData, layout: plotlyLayout, onClickCallback: this.onFeatureClick, onHoverCallback: this.onFeatureHover, onSelectedCallback: this.onFeatureSelect, showLoader: false })));
    };
    FeatureViewer.defaultProps = {
        data: [],
        height: 200,
        showGrouped: false,
        title: '',
        width: 600,
    };
    FeatureViewer.getPlotlyDataObject = function (datum, showGrouped, yIndex) { return ({
        fill: 'toself',
        fillcolor: datum.color.toString(),
        hoverinfo: 'none',
        hoveron: 'fills',
        line: {
            width: 0,
        },
        mode: 'text+lines',
        name: "" + datum.label,
        text: [datum.label],
        textfont: { color: ['#FFFFFF'] },
        type: 'scatter',
        // Creates a 'box' so we can fill it and hover over it and add a point to the middle for the label.
        x: FeatureViewer.getBoxForChellSection(datum),
        y: showGrouped
            ? [0.5, null, 0, 1, 1, 0, 0]
            : [yIndex + 0.5, null, yIndex + 1, yIndex, yIndex, yIndex + 1, yIndex + 1],
    }); };
    return FeatureViewer;
}(React.Component));
exports.FeatureViewer = FeatureViewer;


/***/ }),

/***/ "./src/component/InfoPanel.tsx":
/*!*************************************!*\
  !*** ./src/component/InfoPanel.tsx ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var InfoPanelClass = /** @class */ (function (_super) {
    __extends(InfoPanelClass, _super);
    function InfoPanelClass(props) {
        return _super.call(this, props) || this;
    }
    InfoPanelClass.prototype.render = function () {
        var _this = this;
        var _a = this.props, data = _a.data, height = _a.height, residueContext = _a.residueContext, width = _a.width, secondaryStructureContext = _a.secondaryStructureContext;
        var unassignedResidues = data.pdbData
            ? this.renderUnassignedResidues(data.pdbData)
            : [React.createElement(semantic_ui_react_1.Label, { key: 'unassigned-residues-none' })];
        return (React.createElement("div", { className: "InfoPanel", style: { height: height, width: width } },
            React.createElement(semantic_ui_react_1.Accordion, { exclusive: false, panels: [
                    data.pdbData &&
                        data.pdbData.secondaryStructureSections.map(function (secondaryStructure) { return ({
                            content: _this.renderSecondaryStructures(secondaryStructure),
                            key: 'all-secondary-structures',
                            title: "All Secondary Structures (" + (data.pdbData ? data.pdbData.secondaryStructureSections.length : 0) + "):",
                        }); }),
                    {
                        content: unassignedResidues,
                        key: 'unassigned-residues',
                        title: "Unassigned Residues (" + unassignedResidues.length + "):",
                    },
                    {
                        content: this.renderSecondaryStructures(secondaryStructureContext.selectedSecondaryStructures),
                        key: 'selected-secondary-structures',
                        title: "Selected Secondary Structures (" + secondaryStructureContext.selectedSecondaryStructures.length + "):",
                    },
                    {
                        content: this.renderLockedResiduePairs(residueContext.lockedResiduePairs),
                        key: 'selected-residue-pairs',
                        title: "Selected Residue Pairs (" + residueContext.lockedResiduePairs.size + "):",
                    },
                ] })));
    };
    InfoPanelClass.prototype.renderLockedResiduePairs = function (lockedResiduePairs) {
        return lockedResiduePairs.size === 0
            ? [React.createElement(semantic_ui_react_1.Label, { key: 'locked-residue-pair-none' }, "None")]
            : Array.from(lockedResiduePairs.values()).map(function (pair, index) { return (React.createElement(semantic_ui_react_1.Label, { key: "locked-residue-pair-" + index }, pair.join(', '))); });
    };
    InfoPanelClass.prototype.renderSecondaryStructures = function (selectedSecondaryStructures) {
        return selectedSecondaryStructures.length === 0
            ? [React.createElement(semantic_ui_react_1.Label, { key: 'sec-struct-none' }, "None")]
            : selectedSecondaryStructures.map(function (section, index) { return (React.createElement(semantic_ui_react_1.Label, { key: "sec-struct-" + index }, "[" + section.start + "-" + section.end + "]: " + section.label + " - " + data_1.SECONDARY_STRUCTURE_CODES[section.label])); });
    };
    InfoPanelClass.prototype.renderUnassignedResidues = function (pdbData) {
        var result = new Array();
        pdbData.eachResidue(function (residue) {
            var e_1, _a, e_2, _b;
            if (residue.isProtein()) {
                var isUnassigned = true;
                try {
                    for (var _c = __values(pdbData.secondaryStructureSections), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var secondaryStructure = _d.value;
                        try {
                            for (var secondaryStructure_1 = __values(secondaryStructure), secondaryStructure_1_1 = secondaryStructure_1.next(); !secondaryStructure_1_1.done; secondaryStructure_1_1 = secondaryStructure_1.next()) {
                                var section = secondaryStructure_1_1.value;
                                if (section.contains(residue.resno)) {
                                    isUnassigned = false;
                                    break;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (secondaryStructure_1_1 && !secondaryStructure_1_1.done && (_b = secondaryStructure_1.return)) _b.call(secondaryStructure_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (isUnassigned) {
                    result.push(React.createElement(semantic_ui_react_1.Label, { key: "unassigned-residue-" + residue.resno }, "[" + residue.resno + ": isCg? " + residue.isCg() + ",               isDna? " + residue.isDna() + ",               isHelix? " + residue.isHelix() + ",               isNucleic? " + residue.isNucleic() + ",               isProtein? " + residue.isProtein() + ",               isPolymer? " + residue.isPolymer() + ",               isSaccharide? " + residue.isSaccharide() + ",               isSheet? " + residue.isSheet() + ",              isTurn? " + residue.isTurn(),
                        "}"));
                }
            }
        });
        return result;
    };
    InfoPanelClass.defaultProps = {
        data: {
            couplingScores: new data_1.CouplingContainer(),
            secondaryStructures: new Array(),
        },
        height: 400,
        residueContext: __assign({}, context_1.initialResidueContext),
        secondaryStructureContext: __assign({}, context_1.initialSecondaryStructureContext),
        width: 400,
    };
    return InfoPanelClass;
}(React.Component));
exports.InfoPanelClass = InfoPanelClass;
var InfoPanel = function (props) { return (React.createElement(context_1.SecondaryStructureContext.Consumer, null, function (secStructContext) { return (React.createElement(context_1.ResidueContext.Consumer, null, function (residueContext) { return React.createElement(InfoPanel, __assign({}, props, residueContext, secStructContext)); })); })); };
exports.InfoPanel = InfoPanel;


/***/ }),

/***/ "./src/component/NGLComponent.tsx":
/*!****************************************!*\
  !*** ./src/component/NGLComponent.tsx ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
var NGL = __webpack_require__(/*! ngl */ "./node_modules/ngl/dist/ngl.esm.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var helper_1 = __webpack_require__(/*! ~chell-viz~/helper */ "./src/helper/index.ts");
exports.initialNGLState = {
    activeRepresentations: new Array(),
    pdbData: undefined,
    stage: undefined,
    structureComponent: undefined,
};
var NGLComponentClass = /** @class */ (function (_super) {
    __extends(NGLComponentClass, _super);
    function NGLComponentClass(props) {
        var _this = _super.call(this, props) || this;
        _this.state = exports.initialNGLState;
        _this.canvas = null;
        _this.getConfigurations = function () {
            var residueContext = _this.props.residueContext;
            return [
                {
                    name: 'Clear Selections',
                    onClick: residueContext.removeAllLockedResiduePairs,
                    type: data_1.CONFIGURATION_COMPONENT_TYPE.BUTTON,
                },
                {
                    current: data_1.CONTACT_DISTANCE_PROXIMITY.CLOSEST,
                    name: 'Measuring Proximity',
                    onChange: _this.measuredProximityHandler,
                    options: Object.values(data_1.CONTACT_DISTANCE_PROXIMITY).map(helper_1.capitalizeFirstLetter),
                    type: data_1.CONFIGURATION_COMPONENT_TYPE.RADIO,
                },
                {
                    current: 'default',
                    name: 'Structure Representation Type',
                    onChange: function (value) {
                        var _a = _this.state, stage = _a.stage, structureComponent = _a.structureComponent;
                        var reps = ['default', 'spacefill', 'backbone', 'cartoon', 'surface', 'tube'];
                        if (stage && structureComponent) {
                            structureComponent.removeAllRepresentations();
                            if (value === 0) {
                                stage.defaultFileRepresentation(structureComponent);
                            }
                            else {
                                structureComponent.addRepresentation(reps[value]);
                            }
                            _this.setState({
                                activeRepresentations: _this.deriveActiveRepresentations(structureComponent, _this.state.pdbData),
                            });
                            stage.viewer.requestRender();
                        }
                    },
                    options: Object.values(['Default', 'Spacefill', 'Backbone', 'Cartoon', 'Surface', 'Tube']),
                    type: data_1.CONFIGURATION_COMPONENT_TYPE.RADIO,
                },
            ];
        };
        _this.onClick = function (pickingProxy) {
            var residueContext = _this.props.residueContext;
            var structureComponent = _this.state.structureComponent;
            if (_this.canvas && structureComponent) {
                if (pickingProxy) {
                    var isDistancePicker = pickingProxy.picker && pickingProxy.picker.type === 'distance';
                    if (isDistancePicker) {
                        var residues = [pickingProxy.distance.atom1.resno, pickingProxy.distance.atom2.resno];
                        residueContext.removeLockedResiduePair(residues);
                    }
                    else if (pickingProxy.atom || pickingProxy.closestBondAtom) {
                        var atom = pickingProxy.atom || pickingProxy.closestBondAtom;
                        if (residueContext.candidateResidues.length >= 1) {
                            residueContext.addLockedResiduePair(__spread(residueContext.candidateResidues, [atom.resno]));
                            residueContext.removeCandidateResidues();
                        }
                        else {
                            residueContext.addCandidateResidues([atom.resno]);
                        }
                    }
                }
                else if (residueContext.candidateResidues.length >= 1 && residueContext.hoveredResidues.length >= 1) {
                    residueContext.hoveredResidues.forEach(function (residueIndex) {
                        var getMinDist = function (residueStore, target) {
                            var minDist = Number.MAX_SAFE_INTEGER;
                            var atomOffset = residueStore.atomOffset[residueIndex];
                            var atomCount = residueStore.atomCount[residueIndex];
                            for (var i = 0; i < atomCount; ++i) {
                                var atomProxy = structureComponent.structure.getAtomProxy(atomOffset + i);
                                var atomPosition = structureComponent.stage.viewerControls.getPositionOnCanvas(atomProxy.positionToVector3());
                                minDist = Math.min(minDist, target.distanceTo(atomPosition));
                            }
                            return minDist;
                        };
                        // ! IMPORTANT !
                        // This is a rather brute force approach to see if the mouse is close to a residue.
                        // The main problem is __reliably__ getting the (x,y) of where the user clicked and the "residue" they were closest to.
                        var _a = structureComponent.stage.mouseObserver, down = _a.down, canvasPosition = _a.canvasPosition, position = _a.position, prevClickCP = _a.prevClickCP, prevPosition = _a.prevPosition;
                        var minDistances = [down, canvasPosition, prevClickCP, prevPosition, position].map(function (pos) {
                            return getMinDist(structureComponent.structure.residueStore, pos);
                        });
                        // Shorthand to make it clearer that this method is just checking if any distance is within 100.
                        var isWithinSnappingDistance = function (distances, limit) {
                            if (limit === void 0) { limit = 100; }
                            return distances.filter(function (dist) { return dist < limit; }).length >= 1;
                        };
                        if (isWithinSnappingDistance(minDistances)) {
                            residueContext.addLockedResiduePair(__spread(residueContext.candidateResidues, [residueIndex]));
                            residueContext.removeCandidateResidues();
                        }
                        else {
                            residueContext.removeNonLockedResidues();
                        }
                    });
                }
                else {
                    // User clicked off-structure, so clear non-locked residue state.
                    residueContext.removeNonLockedResidues();
                }
            }
        };
        _this.measuredProximityHandler = function (value) {
            var onMeasuredProximityChange = _this.props.onMeasuredProximityChange;
            if (onMeasuredProximityChange) {
                onMeasuredProximityChange(value);
            }
        };
        _this.onCanvasLeave = function () {
            var residueContext = _this.props.residueContext;
            residueContext.removeNonLockedResidues();
        };
        _this.onResizeHandler = function (event) {
            var onResize = _this.props.onResize;
            var stage = _this.state.stage;
            if (stage) {
                stage.handleResize();
            }
            if (onResize) {
                onResize(event);
            }
        };
        _this.onKeyDown = function (e) {
            e.preventDefault();
            var ESC_KEY_CODE = 27;
            if (e.which === ESC_KEY_CODE || e.keyCode === ESC_KEY_CODE) {
                var residueContext = _this.props.residueContext;
                residueContext.removeNonLockedResidues();
            }
        };
        _this.generateStage = function (canvas, params) {
            var stage = new NGL.Stage(canvas, params);
            // !IMPORTANT! This is needed to prevent the canvas shifting when the user clicks the canvas.
            // It's unclear why the focus does this, but it's undesirable.
            stage.keyBehavior.domElement.focus = function () {
                return;
            };
            return stage;
        };
        return _this;
    }
    NGLComponentClass.prototype.componentDidMount = function (_a) {
        var backgroundColor = (_a === void 0 ? this.props : _a).backgroundColor;
        if (this.canvas) {
            var stage = this.generateStage(this.canvas, { backgroundColor: backgroundColor });
            var data = this.props.data;
            this.initData(stage, data);
            this.setState({
                stage: stage,
            });
        }
        window.addEventListener('resize', this.onResizeHandler, false);
    };
    NGLComponentClass.prototype.componentWillUnmount = function () {
        var stage = this.state.stage;
        if (stage) {
            stage.viewer.renderer.forceContextLoss();
            stage.dispose();
            this.setState({
                activeRepresentations: [],
                stage: undefined,
            });
        }
        window.removeEventListener('resize', this.onResizeHandler);
    };
    NGLComponentClass.prototype.componentDidUpdate = function (prevProps, prevState) {
        var e_1, _a;
        var _b = this.props, data = _b.data, measuredProximity = _b.measuredProximity;
        var _c = this.state, stage = _c.stage, structureComponent = _c.structureComponent;
        if (stage && data !== prevProps.data) {
            this.initData(stage, data);
        }
        if (stage && data && structureComponent) {
            var _d = this.props, residueContext = _d.residueContext, secondaryStructureContext = _d.secondaryStructureContext;
            var isHighlightUpdateNeeded = residueContext !== prevProps.residueContext ||
                secondaryStructureContext !== prevProps.secondaryStructureContext ||
                measuredProximity !== prevProps.measuredProximity;
            if (isHighlightUpdateNeeded) {
                try {
                    for (var _e = __values(this.state.activeRepresentations), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var rep = _f.value;
                        structureComponent.removeRepresentation(rep);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                this.setState({
                    activeRepresentations: this.deriveActiveRepresentations(structureComponent, this.state.pdbData),
                });
            }
            stage.viewer.requestRender();
        }
    };
    /**
     * Renders the NGL canvas.
     *
     * Because we are working with WebGL via the canvas, updating this visualization happens through the canvas reference.
     *
     * @returns The NGL Component
     */
    NGLComponentClass.prototype.render = function () {
        var _this = this;
        var _a = this.props, height = _a.height, isDataLoading = _a.isDataLoading, showConfigurations = _a.showConfigurations, style = _a.style, width = _a.width;
        return (React.createElement(semantic_ui_react_1.Dimmer.Dimmable, { dimmed: true },
            React.createElement(semantic_ui_react_1.Dimmer, { active: isDataLoading },
                React.createElement(semantic_ui_react_1.Loader, null)),
            React.createElement(component_1.SettingsPanel, { configurations: this.getConfigurations(), showConfigurations: showConfigurations },
                React.createElement("div", { className: "NGLComponent", style: __assign({}, style, { height: height, width: width }) },
                    React.createElement("div", { className: "NGLCanvas", onKeyDown: this.onKeyDown, onMouseLeave: this.onCanvasLeave, ref: function (el) { return (_this.canvas = el); }, role: 'img', style: { height: '100%', width: '100%' } })))));
    };
    NGLComponentClass.prototype.initData = function (stage, structure) {
        stage.removeAllComponents();
        if (structure) {
            // !IMPORTANT! We need to deeply clone the NGL data!
            // If we have multiple NGL components displaying the same data, removing the component will affect
            // the others because they (internally) delete keys/references.
            this.addStructureToStage(lodash_1.cloneDeep(structure), stage);
        }
        else {
            this.setState({
                pdbData: undefined,
                structureComponent: undefined,
            });
        }
    };
    NGLComponentClass.prototype.deriveActiveRepresentations = function (structureComponent, pdbData) {
        var _a = this.props, residueContext = _a.residueContext, secondaryStructureContext = _a.secondaryStructureContext;
        return __spread(this.highlightCandidateResidues(structureComponent, __spread(residueContext.candidateResidues, residueContext.hoveredResidues).filter(function (value, index, array) { return array.indexOf(value) === index; })
            .sort(), pdbData), this.highlightLockedDistancePairs(structureComponent, residueContext.lockedResiduePairs, pdbData), this.highlightSecondaryStructures(structureComponent, __spread(secondaryStructureContext.hoveredSecondaryStructures, secondaryStructureContext.selectedSecondaryStructures)));
    };
    /**
     * Adds a NGL structure to the stage.
     *
     * @param structure A NGL Structure.
     * @param stage A NGL Stage.
     */
    NGLComponentClass.prototype.addStructureToStage = function (structure, stage) {
        var _this = this;
        var structureComponent = stage.addComponentFromObject(structure);
        structureComponent.stage.mouseControls.add("hoverPick" /* HOVER_PICK */, function (aStage, pickingProxy) {
            _this.onHover(aStage, pickingProxy);
        });
        stage.defaultFileRepresentation(structureComponent);
        stage.signals.clicked.add(this.onClick);
        var pdbData = data_1.ChellPDB.createPDBFromNGLData(structure);
        var activeRepresentations = this.deriveActiveRepresentations(structureComponent, pdbData);
        this.setState({
            activeRepresentations: activeRepresentations,
            pdbData: pdbData,
            structureComponent: structureComponent,
        });
        stage.viewer.requestRender();
    };
    NGLComponentClass.prototype.onHover = function (aStage, pickingProxy) {
        var residueContext = this.props.residueContext;
        var _a = this.state, structureComponent = _a.structureComponent, stage = _a.stage;
        if (stage && structureComponent) {
            if (pickingProxy && (pickingProxy.atom || pickingProxy.closestBondAtom)) {
                var atom = pickingProxy.atom || pickingProxy.closestBondAtom;
                var resname = data_1.AMINO_ACIDS_BY_THREE_LETTER_CODE[atom.resname]
                    ? data_1.AMINO_ACIDS_BY_THREE_LETTER_CODE[atom.resname].singleLetterCode
                    : atom.resname;
                stage.tooltip.textContent = "" + atom.resno + resname;
                residueContext.addHoveredResidues([atom.resno]);
            }
            else if (residueContext.candidateResidues.length === 0 && residueContext.hoveredResidues.length !== 0) {
                residueContext.removeHoveredResidues();
            }
        }
    };
    NGLComponentClass.prototype.getDistanceRepForResidues = function (structureComponent, residues, pdbData) {
        var measuredProximity = this.props.measuredProximity;
        if (measuredProximity === data_1.CONTACT_DISTANCE_PROXIMITY.C_ALPHA) {
            return helper_1.createDistanceRepresentation(structureComponent, residues.join('.CA, ') + ".CA");
        }
        else {
            var _a = pdbData.getMinDistBetweenResidues(residues[0], residues[1]), atomIndexI = _a.atomIndexI, atomIndexJ = _a.atomIndexJ;
            return helper_1.createDistanceRepresentation(structureComponent, [atomIndexI, atomIndexJ]);
        }
    };
    NGLComponentClass.prototype.highlightCandidateResidues = function (structureComponent, residues, pdbData) {
        var reps = new Array();
        if (residues.length >= 1) {
            reps.push(helper_1.createBallStickRepresentation(structureComponent, residues));
            if (residues.length >= 2 && pdbData) {
                reps.push(this.getDistanceRepForResidues(structureComponent, residues, pdbData));
            }
        }
        return reps;
    };
    NGLComponentClass.prototype.highlightLockedDistancePairs = function (structureComponent, lockedResidues, pdbData) {
        var _this = this;
        var reps = new Array();
        lockedResidues.forEach(function (residues) {
            reps.push(helper_1.createBallStickRepresentation(structureComponent, residues));
            if (residues.length >= 2 && pdbData) {
                reps.push(_this.getDistanceRepForResidues(structureComponent, residues, pdbData));
            }
        });
        return reps;
    };
    NGLComponentClass.prototype.highlightSecondaryStructures = function (structureComponent, secondaryStructures) {
        var e_2, _a;
        var reps = new Array();
        try {
            for (var secondaryStructures_1 = __values(secondaryStructures), secondaryStructures_1_1 = secondaryStructures_1.next(); !secondaryStructures_1_1.done; secondaryStructures_1_1 = secondaryStructures_1.next()) {
                var structure = secondaryStructures_1_1.value;
                reps.push(helper_1.createSecStructRepresentation(structureComponent, structure));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (secondaryStructures_1_1 && !secondaryStructures_1_1.done && (_a = secondaryStructures_1.return)) _a.call(secondaryStructures_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return reps;
    };
    NGLComponentClass.defaultProps = {
        backgroundColor: '#ffffff',
        couplingContext: __assign({}, context_1.initialCouplingContext),
        data: undefined,
        height: '100%',
        isDataLoading: false,
        measuredProximity: data_1.CONTACT_DISTANCE_PROXIMITY.C_ALPHA,
        residueContext: __assign({}, context_1.initialResidueContext),
        secondaryStructureContext: __assign({}, context_1.initialSecondaryStructureContext),
        showConfigurations: true,
        width: '100%',
    };
    return NGLComponentClass;
}(React.Component));
exports.NGLComponentClass = NGLComponentClass;
var NGLComponent = function (props) { return (React.createElement(context_1.ResidueContextConsumer, null, function (residueContext) { return (React.createElement(context_1.SecondaryStructureContextConsumer, null, function (secondaryStructureContext) { return (React.createElement(NGLComponentClass, __assign({ residueContext: residueContext, secondaryStructureContext: secondaryStructureContext }, props))); })); })); };
exports.NGLComponent = NGLComponent;


/***/ }),

/***/ "./src/component/PredictedContactMap.tsx":
/*!***********************************************!*\
  !*** ./src/component/PredictedContactMap.tsx ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
exports.initialPredictedContactMapState = {
    linearDistFilter: 5,
    numPredictionsToShow: -1,
    pointsToPlot: [],
};
var PredictedContactMap = /** @class */ (function (_super) {
    __extends(PredictedContactMap, _super);
    function PredictedContactMap(props) {
        var _this = _super.call(this, props) || this;
        _this.state = exports.initialPredictedContactMapState;
        _this.onLinearDistFilterChange = function () { return function (value) {
            _this.setState({
                linearDistFilter: value,
            });
        }; };
        _this.onNumPredictionsToShowChange = function () { return function (value) {
            _this.setState({
                numPredictionsToShow: value,
            });
        }; };
        _this.getContactMapConfigs = function () { return [
            {
                name: 'Linear Distance Filter (|i - j|)',
                onChange: _this.onLinearDistFilterChange(),
                type: data_1.CONFIGURATION_COMPONENT_TYPE.SLIDER,
                values: {
                    current: _this.state.linearDistFilter,
                    max: 10,
                    min: 1,
                },
            },
            {
                name: 'Top N Predictions to Show',
                onChange: _this.onNumPredictionsToShowChange(),
                type: data_1.CONFIGURATION_COMPONENT_TYPE.SLIDER,
                values: {
                    current: _this.state.numPredictionsToShow,
                    max: _this.props.data.couplingScores.chainLength,
                    min: 1,
                },
            },
        ]; };
        return _this;
    }
    PredictedContactMap.prototype.componentDidMount = function () {
        this.setupData(true);
    };
    PredictedContactMap.prototype.componentDidUpdate = function (prevProps, prevState) {
        var data = this.props.data;
        var _a = this.state, linearDistFilter = _a.linearDistFilter, numPredictionsToShow = _a.numPredictionsToShow;
        var isRecomputeNeeded = data.couplingScores !== prevProps.data.couplingScores ||
            linearDistFilter !== prevState.linearDistFilter ||
            numPredictionsToShow !== prevState.numPredictionsToShow;
        if (isRecomputeNeeded) {
            this.setupData(data.couplingScores !== prevProps.data.couplingScores);
        }
    };
    PredictedContactMap.prototype.render = function () {
        var _a = this.props, data = _a.data, style = _a.style, passThroughProps = __rest(_a, ["data", "style"]);
        var pointsToPlot = this.state.pointsToPlot;
        return (React.createElement("div", { className: "PredictedContactMapComponent", style: style },
            React.createElement(component_1.ContactMap, __assign({ configurations: this.getContactMapConfigs(), data: {
                    couplingScores: data.couplingScores,
                    pdbData: data.pdbData,
                    secondaryStructures: data.pdbData ? data.pdbData.secondaryStructureSections : [],
                }, formattedPoints: pointsToPlot }, passThroughProps))));
    };
    /**
     * Setups up the prediction values for the data.
     *
     * @param isNewData Is this an entirely new dataset?
     */
    PredictedContactMap.prototype.setupData = function (isNewData) {
        var _a = this.props, correctColor = _a.correctColor, data = _a.data, incorrectColor = _a.incorrectColor;
        var _b = this.state, linearDistFilter = _b.linearDistFilter, numPredictionsToShow = _b.numPredictionsToShow;
        var couplingScores = data.pdbData
            ? data.pdbData.contactInformation
            : new data_1.CouplingContainer(data.couplingScores.rankedContacts);
        var chainLength = couplingScores.chainLength;
        var allPredictions = couplingScores.getPredictedContacts(numPredictionsToShow, linearDistFilter);
        var correctPredictionPercent = ((allPredictions.correct.length / allPredictions.predicted.length) * 100).toFixed(1);
        var newPoints = [
            component_1.generateChartDataEntry('text', incorrectColor, 'Predicted Contact', "(N=" + numPredictionsToShow + ", L=" + chainLength + ")", 4, allPredictions.predicted, {
                text: allPredictions.predicted.map(function (point) {
                    var score = data.couplingScores.getCouplingScore(point.i, point.j);
                    return score && score.A_i && score.A_j
                        ? "(" + point.i + score.A_i + ", " + point.j + score.A_j + ")"
                        : "(" + point.i + ", " + point.j + ")";
                }),
            }),
            component_1.generateChartDataEntry('text', correctColor, 'Correct Prediction', "(N=" + allPredictions.correct.length + ", " + correctPredictionPercent + "%)", 6, allPredictions.correct, {
                text: allPredictions.correct.map(function (point) {
                    var score = data.couplingScores.getCouplingScore(point.i, point.j);
                    return score && score.A_i && score.A_j
                        ? "(" + point.i + score.A_i + ", " + point.j + score.A_j + ")"
                        : "(" + point.i + ", " + point.j + ")";
                }),
            }),
        ];
        this.setState({
            numPredictionsToShow: isNewData ? Math.floor(chainLength / 2) : numPredictionsToShow,
            pointsToPlot: newPoints,
        });
    };
    PredictedContactMap.defaultProps = {
        correctColor: '#ff0000',
        data: {
            couplingScores: new data_1.CouplingContainer(),
            secondaryStructures: new Array(),
        },
        height: '100%',
        incorrectColor: '#000000',
        isDataLoading: false,
        width: '100%',
    };
    return PredictedContactMap;
}(React.Component));
exports.PredictedContactMap = PredictedContactMap;


/***/ }),

/***/ "./src/component/TFrameComponent.tsx":
/*!*******************************************!*\
  !*** ./src/component/TFrameComponent.tsx ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
// tslint:disable-next-line: import-name
var react_iframe_comm_1 = __webpack_require__(/*! react-iframe-comm */ "./node_modules/react-iframe-comm/dist/IframeComm.js");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
var TFrameComponentClass = /** @class */ (function (_super) {
    __extends(TFrameComponentClass, _super);
    function TFrameComponentClass(props) {
        var _this = _super.call(this, props) || this;
        _this.iFrameRef = null;
        var springContext = props.springContext, data = props.data, padding = props.padding, pointColor = props.pointColor;
        _this.state = {
            postMessageData: {
                payload: {
                    data: data,
                    padding: padding,
                    pointColor: pointColor,
                    springContext: springContext,
                },
                type: 'loaded',
            },
        };
        return _this;
    }
    TFrameComponentClass.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, data = _a.data, padding = _a.padding, pointColor = _a.pointColor, springContext = _a.springContext;
        this.setState({
            postMessageData: {
                payload: {
                    data: data,
                    padding: padding,
                    pointColor: pointColor,
                    springContext: springContext,
                },
                type: 'loaded',
            },
        });
        if (springContext && springContext !== prevProps.springContext) {
            this.forceUpdate();
        }
    };
    TFrameComponentClass.prototype.componentWillReceiveProps = function (nextProps) {
        var _this = this;
        var payload = {};
        Object.entries(nextProps).forEach(function (pair) {
            var _a;
            var key = pair['0'];
            // @ts-ignore
            if (nextProps[key] !== _this.props[key]) {
                payload = __assign({}, payload, (_a = {}, _a[key] = nextProps[key], _a));
            }
        });
        this.setState({
            postMessageData: {
                payload: payload,
                type: 'loaded',
            },
        });
    };
    TFrameComponentClass.prototype.shouldComponentUpdate = function (nextProps) {
        return (nextProps.springContext.currentCells &&
            nextProps.springContext.currentCells !== this.props.springContext.currentCells);
    };
    TFrameComponentClass.prototype.render = function () {
        var _a = this.props, height = _a.height, width = _a.width;
        var attributes = {
            height: height,
            src: 'http://localhost:8080/TContainer.html',
            width: width,
        };
        return React.createElement(react_iframe_comm_1.default, { attributes: attributes, postMessageData: this.state.postMessageData });
    };
    TFrameComponentClass.defaultProps = {
        data: [[0], [0]],
        height: 400,
        padding: 0,
        pointColor: '#000000',
        springContext: __assign({}, context_1.initialSpringContext),
        width: 400,
    };
    return TFrameComponentClass;
}(React.Component));
exports.TFrameComponentClass = TFrameComponentClass;
exports.TFrameComponent = function (props) { return (React.createElement(context_1.SpringContext.Consumer, null, function (springContext) { return React.createElement(TFrameComponentClass, __assign({}, props, { springContext: springContext })); })); };


/***/ }),

/***/ "./src/component/TensorTComponent.tsx":
/*!********************************************!*\
  !*** ./src/component/TensorTComponent.tsx ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var TensorTComponentClass = /** @class */ (function (_super) {
    __extends(TensorTComponentClass, _super);
    function TensorTComponentClass(props) {
        var _this = _super.call(this, props) || this;
        _this.canvasContext = null;
        return _this;
    }
    TensorTComponentClass.prototype.render = function () {
        var pointsToPlot = this.props.pointsToPlot;
        return (React.createElement(component_1.PlotlyChart, { data: pointsToPlot, layout: __assign({}, component_1.defaultPlotlyLayout, { dragmode: 'select', margin: {
                    b: 20,
                }, xaxis: { autorange: false, range: [0, 1], showline: true }, yaxis: { autorange: false, range: [0, 1], showline: true } }), onSelectedCallback: this.props.onSelectedCallback }));
    };
    TensorTComponentClass.defaultProps = {
        pointsToPlot: [],
        style: {
            padding: 0,
        },
    };
    return TensorTComponentClass;
}(React.Component));
exports.TensorTComponent = function (props) { return React.createElement(TensorTComponentClass, __assign({}, props)); };


/***/ }),

/***/ "./src/component/VizSelectorPanel.tsx":
/*!********************************************!*\
  !*** ./src/component/VizSelectorPanel.tsx ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var container_1 = __webpack_require__(/*! ~chell-viz~/container */ "./src/container/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
/**
 * A single visualization panel allowing a user to select how they wish to view data.
 *
 * @export
 * @extends {React.Component<VizPanelProps, VizPanelState>}
 */
var VizSelectorPanel = /** @class */ (function (_super) {
    __extends(VizSelectorPanel, _super);
    function VizSelectorPanel(props) {
        var _this = _super.call(this, props) || this;
        _this.onVizSelect = function (event, data) {
            _this.setState({
                selectedViz: data.value,
            });
        };
        _this.generateDropdownItems = function (supportedVisualizations) {
            return supportedVisualizations
                .map(function (viz) { return ({
                key: viz,
                text: viz,
                value: viz,
            }); })
                .sort(function (a, b) { return a.key.localeCompare(b.key); });
        };
        _this.state = {
            selectedViz: props.initialViz,
        };
        return _this;
    }
    VizSelectorPanel.prototype.render = function () {
        // N.B. We are only setting the width of the VizSelectorPanel, explicitly leaving out the height.
        // This means a component can only grow vertically, but not horizontally, and be correctly styled in containers.
        var _a = this.props, data = _a.data, supportedVisualizations = _a.supportedVisualizations, width = _a.width;
        return (React.createElement("div", { className: "VizSelectorPanel", style: { width: width } },
            React.createElement(semantic_ui_react_1.Dropdown, { options: this.generateDropdownItems(supportedVisualizations), fluid: true, onChange: this.onVizSelect, defaultValue: this.props.initialViz }),
            React.createElement(semantic_ui_react_1.Card, { fluid: true, raised: true }, this.renderVizContainer(this.state.selectedViz, data))));
    };
    VizSelectorPanel.prototype.renderVizContainer = function (viz, data) {
        var padding = this.props.padding;
        var paddedHeight = this.props.height - padding * 2;
        var paddedWidth = this.props.width - padding * 2;
        switch (viz) {
            case data_1.VIZ_TYPE['T-SNE']:
            case data_1.VIZ_TYPE['TENSOR-T-SNE']:
                return (data['TENSOR-T-SNE'] && (React.createElement(container_1.TensorTContainer, { style: {
                        padding: padding,
                    } })));
            case data_1.VIZ_TYPE['T-SNE-FRAME']:
                return (data['T-SNE'] && (React.createElement(component_1.TFrameComponent, { data: data['T-SNE'], height: paddedHeight, padding: padding, width: paddedWidth })));
            case data_1.VIZ_TYPE.SPRING:
                return React.createElement(container_1.SpringContainer, { padding: padding });
            case data_1.VIZ_TYPE.NGL:
                return (data.NGL && (React.createElement(component_1.NGLComponent, { data: data.NGL, height: paddedHeight, style: { padding: padding }, width: paddedWidth })));
            case data_1.VIZ_TYPE.CONTACT_MAP:
                return (data['Contact Map'] && (React.createElement(component_1.PredictedContactMap, { data: data['Contact Map'], height: paddedHeight, style: { padding: padding }, width: paddedWidth })));
            case data_1.VIZ_TYPE.INFO_PANEL:
                return React.createElement(component_1.InfoPanel, { data: data['Contact Map'], height: 400, width: 400 });
            default:
                throw new Error("Unknown viz: " + viz);
        }
    };
    VizSelectorPanel.defaultProps = {
        data: new Object(),
        height: 450,
        initialViz: data_1.VIZ_TYPE['T-SNE'],
        padding: 15,
        supportedVisualizations: [],
        width: 450,
    };
    return VizSelectorPanel;
}(React.Component));
exports.VizSelectorPanel = VizSelectorPanel;


/***/ }),

/***/ "./src/component/chart/AuxiliaryAxis.ts":
/*!**********************************************!*\
  !*** ./src/component/chart/AuxiliaryAxis.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Class to represent an extra x and/or y axis for a Plotly chart.
 */
var AuxiliaryAxis = /** @class */ (function () {
    /**
     * Creates an instance of AuxiliaryAxis.
     * @param sections The underlying data to be represented by these axes.
     * @param [axisIndex=2] The index of this axis, if there are multiple auxiliary axes.
     * @param [defaultColor='black'] What color should the axis be by default?
     * @param [colorMap] Allows specific data pieces to be colored.
     * @param [dataTransformFn] Determine how a section is to be transformed to the main and opposite axis.
     *  For example, for a sine wave, the main axis increments by 1 but the opposite needs to be increased by a Math.sin() call.
     * @param [filterFn=() => false] Function to allow certain elements to be filtered out and thus not show up on the axis.
     */
    function AuxiliaryAxis(sections, axisIndex, defaultColor, colorMap, dataTransformFn, filterFn) {
        if (axisIndex === void 0) { axisIndex = 2; }
        if (defaultColor === void 0) { defaultColor = 'black'; }
        if (filterFn === void 0) { filterFn = function () { return false; }; }
        var _this = this;
        this.sections = sections;
        this.axisIndex = axisIndex;
        this.defaultColor = defaultColor;
        this.colorMap = colorMap;
        this.dataTransformFn = dataTransformFn;
        this.filterFn = filterFn;
        this.axes = new Map();
        this.highlightedAxes = new Map();
        /**
         * Plotly data specific for the x axis.
         *
         * @param key The label for this piece of data.
         */
        this.generateXAxisSegment = function (key) { return (__assign({}, _this.auxiliaryAxisDefaults(key), { orientation: 'h', xaxis: 'x', yaxis: "y" + _this.axisIndex })); };
        /**
         * Plotly data specific for the highlighted x axis.
         *
         * @param key The label for this piece of data.
         */
        this.generateHighlightedXAxisSegment = function (key) { return (__assign({}, _this.highlightedAuxiliaryAxisDefaults(key), { orientation: 'h', xaxis: 'x', yaxis: "y" + _this.axisIndex })); };
        /**
         * Plotly data specific for the y axis.
         *
         * @param key The label for this piece of data.
         */
        this.generateYAxisSegment = function (key) { return (__assign({}, _this.auxiliaryAxisDefaults(key), { orientation: 'v', xaxis: "x" + _this.axisIndex, yaxis: 'y' })); };
        /**
         * Plotly data specific for the highlighted y axis.
         *
         * @param key The label for this piece of data.
         */
        this.generateHighlightedYAxisSegment = function (key) { return (__assign({}, _this.highlightedAuxiliaryAxisDefaults(key), { orientation: 'v', xaxis: "x" + _this.axisIndex, yaxis: 'y' })); };
        /**
         * Default plotly data for an axis.
         *
         * @param key The label for this piece of data.
         */
        this.auxiliaryAxisDefaults = function (key) { return ({
            connectgaps: false,
            hoverinfo: 'none',
            line: {
                color: _this.colorMap && _this.colorMap[key] ? _this.colorMap[key] : _this.defaultColor,
                shape: 'spline',
                smoothing: 1.3,
                width: 1.5,
            },
            marker: {
                symbol: [],
            },
            mode: 'lines',
            name: key,
            showlegend: false,
            type: 'scatter',
            x: [],
            y: [],
        }); };
        /**
         * Default plotly data for a highlighted axis.
         *
         * @param key The label for this piece of data.
         */
        this.highlightedAuxiliaryAxisDefaults = function (key) { return (__assign({}, _this.auxiliaryAxisDefaults(key), { fill: 'toself', line: {
                color: _this.colorMap && _this.colorMap[key] ? _this.colorMap[key] : _this.defaultColor,
                width: 0,
            } })); };
        /**
         * Determines the points that make up the axis for both the main and opposite axis side.
         * @param section The section of data to derive points for.
         */
        this.derivePointsInAxis = function (section) {
            var result = {
                main: [section.start],
                opposite: [null],
            };
            for (var i = section.start; i <= section.end; ++i) {
                var transformResult = _this.dataTransformFn && _this.dataTransformFn[section.label]
                    ? _this.dataTransformFn[section.label](section, i)
                    : { main: i, opposite: -1 };
                result.main.push(transformResult.main);
                result.opposite.push(transformResult.opposite);
            }
            result.main.push(section.end);
            result.opposite.push(null);
            return result;
        };
        this.deriveHighlightedPointsInAxis = function (section) {
            var result = {
                main: [section.start],
                opposite: [null],
            };
            result.main.push(section.start);
            result.opposite.push(-1);
            result.main.push(section.start);
            result.opposite.push(1);
            result.main.push(section.end);
            result.opposite.push(1);
            result.main.push(section.end);
            result.opposite.push(-1);
            result.main.push(section.end);
            result.opposite.push(null);
            return result;
        };
        this.setupAuxiliaryAxis();
    }
    Object.defineProperty(AuxiliaryAxis.prototype, "axis", {
        /**
         * Get all the axis objects belonging to this Auxiliary Axis.
         */
        get: function () {
            return this.axes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuxiliaryAxis.prototype, "xAxes", {
        /**
         * Get all the x-axis objects belonging to this Auxiliary Axis.
         */
        get: function () {
            var result = new Array();
            this.axes.forEach(function (value) {
                result.push(value.x);
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuxiliaryAxis.prototype, "highlightedXAxes", {
        /**
         * Get all the highlighted x-axis objects belonging to this Auxiliary Axis.
         */
        get: function () {
            var result = new Array();
            this.highlightedAxes.forEach(function (value) {
                result.push(value.x);
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuxiliaryAxis.prototype, "yAxes", {
        /**
         * Get all the y-axis objects belonging to this Auxiliary Axis.
         */
        get: function () {
            var result = new Array();
            this.axes.forEach(function (value) {
                result.push(value.y);
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuxiliaryAxis.prototype, "highlightedYAxes", {
        /**
         * Get all the highlighted y-axis objects belonging to this Auxiliary Axis.
         */
        get: function () {
            var result = new Array();
            this.highlightedAxes.forEach(function (value) {
                result.push(value.y);
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    AuxiliaryAxis.prototype.getAxisById = function (id) {
        return this.axes.get(id);
    };
    /**
     * Create the Auxiliary Axis.
     */
    AuxiliaryAxis.prototype.setupAuxiliaryAxis = function () {
        var e_1, _a, _b, _c, _d, _e, _f, _g, _h, _j;
        try {
            for (var _k = __values(this.sections), _l = _k.next(); !_l.done; _l = _k.next()) {
                var section = _l.value;
                if (this.filterFn(section)) {
                    continue;
                }
                var label = section.label;
                if (!this.axes.has(label)) {
                    this.axes.set(label, {
                        x: this.generateXAxisSegment(label),
                        y: this.generateYAxisSegment(label),
                    });
                }
                if (!this.highlightedAxes.has(label)) {
                    this.highlightedAxes.set(label, {
                        x: this.generateHighlightedXAxisSegment(label),
                        y: this.generateHighlightedYAxisSegment(label),
                    });
                }
                var labelAxis = this.axes.get(label);
                var highlightAxis = this.highlightedAxes.get(label);
                if (labelAxis && highlightAxis) {
                    var points = this.derivePointsInAxis(section);
                    (_b = labelAxis.x.x).push.apply(_b, __spread(points.main));
                    (_c = labelAxis.x.y).push.apply(_c, __spread(points.opposite));
                    (_d = labelAxis.y.y).push.apply(_d, __spread(points.main));
                    (_e = labelAxis.y.x).push.apply(_e, __spread(points.opposite));
                    var highlightedPoints = this.deriveHighlightedPointsInAxis(section);
                    (_f = highlightAxis.x.x).push.apply(_f, __spread(highlightedPoints.main));
                    (_g = highlightAxis.x.y).push.apply(_g, __spread(highlightedPoints.opposite));
                    (_h = highlightAxis.y.y).push.apply(_h, __spread(highlightedPoints.main));
                    (_j = highlightAxis.y.x).push.apply(_j, __spread(highlightedPoints.opposite));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_a = _k.return)) _a.call(_k);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return AuxiliaryAxis;
}());
exports.AuxiliaryAxis = AuxiliaryAxis;


/***/ }),

/***/ "./src/component/chart/ContactMapChart.tsx":
/*!*************************************************!*\
  !*** ./src/component/chart/ContactMapChart.tsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var helper_1 = __webpack_require__(/*! ~chell-viz~/helper */ "./src/helper/index.ts");
exports.generateChartDataEntry = function (hoverinfo, color, name, subtitle, nodeSize, points, extra) {
    if (extra === void 0) { extra = {}; }
    return (__assign({ hoverinfo: hoverinfo, marker: typeof color === 'string'
            ? { color: new Array(points.length * 2).fill(color) }
            : {
                colorscale: [
                    [0, 'rgb(12,50,102)'],
                    [0.1, 'rgb(17,83,150)'],
                    [0.2, 'rgb(40,114,175)'],
                    [0.3, 'rgb(71,147,193)'],
                    [0.4, 'rgb(111,175,209)'],
                    [0.5, 'rgb(160,202,222)'],
                    [0.6, 'rgb(200,219,237)'],
                    [0.7, 'rgb(224,235,246)'],
                    [0.8, 'rgb(247,251,255)'],
                    [0.9, 'rgb(249,253,255)'],
                    [1, 'rgb(255,255,255)'],
                ],
            }, mode: 'lines+markers', name: name,
        nodeSize: nodeSize,
        points: points,
        subtitle: subtitle }, extra));
};
/**
 * Intermediary between a ContactMap and a PlotlyChart.
 *
 * Will transform data and setup layout from science/chell data type into the Plotly type.
 * @extends {React.Component<IContactMapChartProps, any>}
 */
var ContactMapChart = /** @class */ (function (_super) {
    __extends(ContactMapChart, _super);
    function ContactMapChart(props) {
        var _this = _super.call(this, props) || this;
        _this.toggleLegendVisibility = function () {
            _this.setState({
                showlegend: !_this.state.showlegend,
            });
        };
        _this.state = {
            numLegends: 0,
            plotlyData: [],
            showlegend: false,
        };
        return _this;
    }
    ContactMapChart.prototype.componentDidMount = function () {
        this.setupData();
    };
    ContactMapChart.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, contactData = _a.contactData, secondaryStructures = _a.secondaryStructures, selectedSecondaryStructures = _a.selectedSecondaryStructures;
        if (prevProps.contactData !== contactData ||
            prevProps.secondaryStructures !== secondaryStructures ||
            prevProps.selectedSecondaryStructures !== selectedSecondaryStructures) {
            this.setupData();
        }
    };
    ContactMapChart.prototype.render = function () {
        var _a = this.props, configurations = _a.configurations, contactData = _a.contactData, legendModifiers = _a.legendModifiers, marginModifiers = _a.marginModifiers, range = _a.range, showConfigurations = _a.showConfigurations, passThroughProps = __rest(_a, ["configurations", "contactData", "legendModifiers", "marginModifiers", "range", "showConfigurations"]);
        var _b = this.state, plotlyData = _b.plotlyData, showlegend = _b.showlegend;
        return (React.createElement(component_1.SettingsPanel, { configurations: configurations, showConfigurations: showConfigurations },
            React.createElement(semantic_ui_react_1.Button, { basic: true, floated: 'left', icon: React.createElement(semantic_ui_react_1.Icon, { name: 'question circle outline', size: 'large' }), onClick: this.toggleLegendVisibility, style: { float: 'left', margin: '0 0 0 15px', position: 'relative', top: '500px', zIndex: 999 } }),
            React.createElement(component_1.PlotlyChart, __assign({ data: plotlyData, layout: {
                    legend: {
                        orientation: 'h',
                        y: legendModifiers.y,
                        yanchor: 'bottom',
                    },
                    margin: {
                        b: marginModifiers.b,
                        l: marginModifiers.l,
                    },
                    showlegend: showlegend,
                    xaxis: {
                        autorange: true,
                        fixedrange: true,
                        nticks: 10,
                        range: [0, 33000],
                        rangemode: 'nonnegative',
                        showline: true,
                        tickmode: 'auto',
                        title: 'Residue #',
                    },
                    yaxis: {
                        autorange: 'reversed',
                        fixedrange: true,
                        nticks: 10,
                        range: [0, 33000],
                        rangemode: 'nonnegative',
                        showline: true,
                        tickmode: 'auto',
                        title: 'Residue #',
                    },
                } }, passThroughProps))));
    };
    /**
     * Sets up the chart and axis data for the ContactMap.
     *
     * Transforms all data from chell terminology to data properly formatted for Plotly consumption.
     */
    ContactMapChart.prototype.setupData = function () {
        var _a = this.props, contactData = _a.contactData, dataTransformFn = _a.dataTransformFn, secondaryStructures = _a.secondaryStructures, selectedSecondaryStructures = _a.selectedSecondaryStructures;
        var plotlyData = __spread(contactData.map(function (entry) { return dataTransformFn(entry, true); }));
        secondaryStructures.forEach(function (secondaryStructure, index) {
            var axis = new component_1.SecondaryStructureAxis(secondaryStructure, 3, index + 2);
            plotlyData.push.apply(plotlyData, __spread(axis.xAxes, axis.yAxes));
        });
        var highlightedAxes = new Array();
        selectedSecondaryStructures.forEach(function (selectedStructure, index) {
            var axis = new component_1.AuxiliaryAxis(selectedStructure, index + 2, 'orange');
            highlightedAxes.push.apply(highlightedAxes, __spread(axis.highlightedXAxes, axis.highlightedYAxes));
        });
        this.setState({
            numLegends: new Set(plotlyData.filter(function (datum) { return datum.showlegend !== false && datum.name !== undefined; }).map(function (legend) { return legend.name; })).size,
            // Makes sure that highlighted axis is behind the axis.
            plotlyData: __spread(highlightedAxes, plotlyData),
        });
    };
    ContactMapChart.defaultProps = {
        candidateResidues: new Array(),
        configurations: new Array(),
        dataTransformFn: helper_1.generateScatterGLData,
        height: '100%',
        legendModifiers: {
            y: -0.4,
        },
        marginModifiers: {
            b: 65,
            l: 65,
        },
        range: 100,
        secondaryStructures: [],
        selectedSecondaryStructures: [],
        selectedSecondaryStructuresColor: '#feb83f',
        showConfigurations: true,
        width: '100%',
    };
    return ContactMapChart;
}(React.Component));
exports.ContactMapChart = ContactMapChart;


/***/ }),

/***/ "./src/component/chart/PlotlyChart.tsx":
/*!*********************************************!*\
  !*** ./src/component/chart/PlotlyChart.tsx ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Immutable = __webpack_require__(/*! immutable */ "./node_modules/immutable/dist/immutable.js");
var lodash_1 = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
var plotly = __webpack_require__(/*! plotly.js-gl2d-dist */ "./node_modules/plotly.js-gl2d-dist/plotly-gl2d.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
exports.defaultPlotlyConfig = {
    displayModeBar: false,
    doubleClick: 'reset',
    scrollZoom: true,
    showAxisDragHandles: false,
    staticPlot: false,
};
exports.defaultPlotlyLayout = {
    autosize: true,
    dragmode: 'zoom',
    hovermode: 'closest',
    legend: {},
    margin: {
        b: 10,
        l: 40,
        r: 10,
        t: 10,
    },
    showlegend: false,
    title: '',
};
/**
 * React wrapper for a Plotly Chart.
 *
 * @description
 * Based upon: https://github.com/davidctj/react-plotlyjs-ts
 *
 * @export
 * @extends {React.Component<IPlotlyChartProps, any>}
 */
var PlotlyChart = /** @class */ (function (_super) {
    __extends(PlotlyChart, _super);
    function PlotlyChart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.plotlyCanvas = null;
        // Makes sure single click isn't fired when double click is in flight. Required due to https://github.com/plotly/plotly.js/issues/1546
        _this.isDoubleClickInProgress = false;
        _this.canvasRef = null;
        _this.plotlyFormattedData = [];
        /**
         * Resizes the inner Plotly canvas.
         */
        _this.resize = function () {
            if (_this.plotlyCanvas) {
                plotly.Plots.resize(_this.plotlyCanvas);
            }
        };
        /**
         * Sends a draw call to Plotly since it is using canvas/WebGL which is outside of the locus of control for React.
         */
        _this.draw = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, config, layout, mergedLayout, mergedConfig, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.props, config = _a.config, layout = _a.layout;
                        if (!(this.plotlyCanvas && this.canvasRef)) return [3 /*break*/, 2];
                        mergedLayout = this.getMergedLayout(layout, this.plotlyFormattedData);
                        mergedConfig = this.getMergedConfig(config);
                        // console.log(mergedLayout);
                        // console.log(mergedConfig);
                        _b = this;
                        return [4 /*yield*/, plotly.react(this.canvasRef, this.plotlyFormattedData, mergedLayout, mergedConfig)];
                    case 1:
                        // console.log(mergedLayout);
                        // console.log(mergedConfig);
                        _b.plotlyCanvas = _c.sent();
                        _c.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); };
        _this.deriveChartPiece = function (xDatum, yDatum, data) {
            var x = xDatum;
            var y = yDatum;
            if (data) {
                var isExtraXAxis = data.xaxis && data.xaxis !== 'x';
                var isExtraYAxis = data.yaxis && data.yaxis !== 'y';
                if (isExtraXAxis || isExtraYAxis) {
                    return {
                        chartPiece: data_1.CHELL_CHART_PIECE.AXIS,
                        selectedPoints: isExtraXAxis ? [y] : [x],
                    };
                }
            }
            return {
                chartPiece: data_1.CHELL_CHART_PIECE.POINT,
                selectedPoints: [x, y],
            };
        };
        /**
         * Generate axis data for those beyond the original x/yaxis.
         *
         * @param ids All of the axis ids associated with plotly data.
         */
        _this.generateExtraPlotlyAxis = function (ids) {
            return Array.from(ids.values())
                .filter(function (id) { return id.length >= 2; }) // Ignores { xaxis: x } and { yaxis: y }.
                .map(function (id) { return _this.generateExtraPlotlyAxisFromId(id); })
                .reduce(function (prev, curr) {
                return __assign({}, prev, curr);
            }, {});
        };
        _this.getMergedConfig = function (config) {
            if (config === void 0) { config = {}; }
            var copiedConfig = Immutable.fromJS(__assign({}, exports.defaultPlotlyConfig));
            var immutableConfigFromJs = Immutable.fromJS(__assign({}, config));
            return __assign({}, copiedConfig.mergeDeep(immutableConfigFromJs).toJS());
        };
        _this.getMergedLayout = function (layout, plotlyFormattedData) {
            if (layout === void 0) { layout = {}; }
            if (plotlyFormattedData === void 0) { plotlyFormattedData = []; }
            var copiedLayout = Immutable.fromJS(__assign({}, layout));
            var copiedLayoutFromData = Immutable.fromJS(__assign({}, exports.defaultPlotlyLayout, _this.deriveAxisParams(plotlyFormattedData)));
            var result = __assign({}, copiedLayoutFromData.mergeDeep(copiedLayout).toJS());
            if (_this.savedAxisZoom && result.xaxis && result.yaxis) {
                result.xaxis.range = _this.savedAxisZoom.xaxis.range;
                result.yaxis.range = _this.savedAxisZoom.yaxis.range;
            }
            return result;
        };
        _this.onAfterPlot = function () {
            var onAfterPlotCallback = _this.props.onAfterPlotCallback;
            if (onAfterPlotCallback) {
                onAfterPlotCallback(new data_1.ChellChartEvent(data_1.CHELL_CHART_EVENT_TYPE.AFTER_PLOT));
            }
        };
        _this.onClick = function (event) {
            var shouldHandleClick = _this.isDoubleClickInProgress === false && event.points !== undefined && event.points.length > 0;
            if (shouldHandleClick) {
                var onClickCallback = _this.props.onClickCallback;
                if (onClickCallback) {
                    var x = event.points[0].x ? event.points[0].x : event.points[0].data.x[0];
                    var y = event.points[0].y ? event.points[0].y : event.points[0].data.y[0];
                    var _a = _this.deriveChartPiece(x, y, event.points[0].data), chartPiece = _a.chartPiece, selectedPoints = _a.selectedPoints;
                    onClickCallback(new data_1.ChellChartEvent(data_1.CHELL_CHART_EVENT_TYPE.CLICK, chartPiece, selectedPoints));
                }
            }
        };
        _this.onDoubleClick = function () {
            _this.isDoubleClickInProgress = true;
            var onDoubleClickCallback = _this.props.onDoubleClickCallback;
            if (onDoubleClickCallback) {
                onDoubleClickCallback(new data_1.ChellChartEvent(data_1.CHELL_CHART_EVENT_TYPE.DOUBLE_CLICK));
            }
        };
        _this.onHover = function (event) {
            var onHoverCallback = _this.props.onHoverCallback;
            if (event.points && event.points[0] && onHoverCallback) {
                var x = event.points[0].x ? event.points[0].x : event.points[0].data.x[0];
                var y = event.points[0].y ? event.points[0].y : event.points[0].data.y[0];
                var _a = _this.deriveChartPiece(x, y, event.points[0].data), chartPiece = _a.chartPiece, selectedPoints = _a.selectedPoints;
                onHoverCallback(new data_1.ChellChartEvent(data_1.CHELL_CHART_EVENT_TYPE.HOVER, chartPiece, selectedPoints));
            }
        };
        _this.onRelayout = function (event) {
            _this.isDoubleClickInProgress = false;
            // !IMPORTANT! Yes, these numbers have to be accessed like this, see:
            // https://plot.ly/javascript/plotlyjs-function-reference/#plotlyrestyle
            // https://github.com/plotly/plotly.js/issues/2843
            var axisKeys = ['xaxis.range[0]', 'xaxis.range[1]', 'yaxis.range[0]', 'yaxis.range[1]'];
            var isEventFormattedCorrect = event !== undefined && axisKeys.reduce(function (prev, cur) { return prev && event[cur] !== undefined; }, true) === true;
            _this.savedAxisZoom = isEventFormattedCorrect
                ? {
                    xaxis: {
                        autorange: false,
                        range: [event[axisKeys[0]], event[axisKeys[1]]],
                    },
                    yaxis: {
                        autorange: false,
                        range: [event[axisKeys[2]], event[axisKeys[3]]],
                    },
                }
                : undefined;
            var onRelayoutCallback = _this.props.onRelayoutCallback;
            if (onRelayoutCallback) {
                onRelayoutCallback(new data_1.ChellChartEvent(data_1.CHELL_CHART_EVENT_TYPE.RELAYOUT));
            }
        };
        _this.onSelect = function (event) { return __awaiter(_this, void 0, void 0, function () {
            var onSelectedCallback, allPoints, chartPiece;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onSelectedCallback = this.props.onSelectedCallback;
                        if (event && onSelectedCallback) {
                            allPoints = new Array();
                            if (event.points.length >= 1) {
                                allPoints = event.points.reduce(function (prev, cur) {
                                    prev.push.apply(prev, __spread([cur.x, cur.y]));
                                    return prev;
                                }, allPoints);
                            }
                            else if (event.range) {
                                // If it is a range, it is a box and so the coordinates can be directly accessed like so.
                                allPoints.push(event.range.x[0], event.range.y[0], event.range.x[1], event.range.y[1]);
                            }
                            chartPiece = (allPoints.length > 0
                                ? this.deriveChartPiece(allPoints[0], allPoints[1])
                                : { chartPiece: data_1.CHELL_CHART_PIECE.POINT }).chartPiece;
                            onSelectedCallback(new data_1.ChellChartEvent(data_1.CHELL_CHART_EVENT_TYPE.SELECTION, chartPiece, allPoints, event));
                        }
                        return [4 /*yield*/, this.draw()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        _this.onUnHover = function (event) {
            var onUnHoverCallback = _this.props.onUnHoverCallback;
            if (event && onUnHoverCallback) {
                var _a = event.points[0], data = _a.data, x = _a.x, y = _a.y;
                var _b = _this.deriveChartPiece(x, y, data), chartPiece = _b.chartPiece, selectedPoints = _b.selectedPoints;
                onUnHoverCallback(new data_1.ChellChartEvent(data_1.CHELL_CHART_EVENT_TYPE.UNHOVER, chartPiece, selectedPoints));
            }
        };
        return _this;
    }
    /**
     * Setup all the event listeners for the plotly canvas.
     */
    PlotlyChart.prototype.attachListeners = function () {
        if (this.plotlyCanvas) {
            this.plotlyCanvas.on('plotly_afterplot', this.onAfterPlot);
            this.plotlyCanvas.on('plotly_click', this.onClick);
            this.plotlyCanvas.on('plotly_doubleclick', this.onDoubleClick);
            this.plotlyCanvas.on('plotly_hover', this.onHover);
            this.plotlyCanvas.on('plotly_relayout', this.onRelayout);
            this.plotlyCanvas.on('plotly_selected', this.onSelect);
            this.plotlyCanvas.on('plotly_unhover', this.onUnHover);
        }
        window.removeEventListener('resize', this.resize);
        window.addEventListener('resize', this.resize);
    };
    /**
     * Determines if we should send a draw call to Plotly based on if data has actually changed.
     *
     * @param prevProps The previous props for the PlotlyChart.
     */
    PlotlyChart.prototype.componentDidUpdate = function (prevProps) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, data, layout, config;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, data = _a.data, layout = _a.layout, config = _a.config;
                        if (!(!lodash_1.isEqual(data, prevProps.data) || !lodash_1.isEqual(layout, prevProps.layout) || !lodash_1.isEqual(config, prevProps.config))) return [3 /*break*/, 2];
                        this.plotlyFormattedData = lodash_1.isEqual(data, prevProps.data)
                            ? this.plotlyFormattedData
                            : Immutable.fromJS(data).toJS();
                        return [4 /*yield*/, this.draw()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    PlotlyChart.prototype.componentDidMount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, immutableData, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.canvasRef && !this.plotlyCanvas)) return [3 /*break*/, 3];
                        data = this.props.data;
                        immutableData = Immutable.fromJS(data);
                        this.plotlyFormattedData = immutableData.toJS();
                        _a = this;
                        return [4 /*yield*/, plotly.react(this.canvasRef, this.plotlyFormattedData)];
                    case 1:
                        _a.plotlyCanvas = _b.sent();
                        this.attachListeners();
                        return [4 /*yield*/, this.draw()];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PlotlyChart.prototype.componentWillUnmount = function () {
        if (this.renderTimeout) {
            clearTimeout(this.renderTimeout);
        }
        if (this.plotlyCanvas) {
            plotly.purge(this.plotlyCanvas);
            this.plotlyCanvas = null;
            this.canvasRef = null;
        }
        window.removeEventListener('resize', this.resize);
    };
    PlotlyChart.prototype.render = function () {
        var _this = this;
        var _a = this.props, height = _a.height, showLoader = _a.showLoader, style = _a.style, width = _a.width;
        return (React.createElement(React.Fragment, null,
            showLoader && (React.createElement(semantic_ui_react_1.Dimmer, { active: !this.isDataLoaded() },
                React.createElement(semantic_ui_react_1.Loader, null))),
            React.createElement("div", { className: 'plotly-chart', ref: function (node) { return (_this.canvasRef = node ? node : null); }, style: __assign({ marginBottom: 5 }, style, { height: height, width: width }) })));
    };
    PlotlyChart.prototype.generateExtraPlotlyAxisFromId = function (id) {
        var _a;
        var axisId = id.substr(0, 1);
        var axisNum = Number.parseInt(id.substr(1), 10);
        return _a = {},
            _a[axisId + "axis" + axisNum] = {
                // TODO Have this number - 0.05 - be configurable. Requires some design work to look good for various numbers of total axes.
                domain: [1 - (axisNum - 1) * 0.05, 1 - (axisNum - 2) * 0.05],
                visible: false,
            },
            _a;
    };
    /**
     * Create [0-n] plotly axes given some plotly data.
     *
     * @param allData The already formatted Plotly data - meaning each data should have the proper axis already assigned.
     * @returns A object containing xaxis and yaxis fields, as well as xaxis# and yaxis# fields where # is derived from the given data.
     */
    PlotlyChart.prototype.deriveAxisParams = function (allData) {
        var e_1, _a;
        var uniqueXAxisIds = new Set();
        var uniqueYAxisIds = new Set();
        try {
            for (var allData_1 = __values(allData), allData_1_1 = allData_1.next(); !allData_1_1.done; allData_1_1 = allData_1.next()) {
                var data = allData_1_1.value;
                var xaxis = data.xaxis, yaxis = data.yaxis;
                if (xaxis) {
                    uniqueXAxisIds.add(xaxis);
                }
                if (yaxis) {
                    uniqueYAxisIds.add(yaxis);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (allData_1_1 && !allData_1_1.done && (_a = allData_1.return)) _a.call(allData_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // TODO Have the spacing number - 0.05 - be configurable. Requires some design work to look good for various numbers of total axes.
        return __assign({}, this.generateExtraPlotlyAxis(uniqueXAxisIds), this.generateExtraPlotlyAxis(uniqueYAxisIds), { xaxis: {
                domain: [0, 1 - uniqueXAxisIds.size * 0.05],
                range: [30],
                zeroline: false,
            }, yaxis: {
                domain: [0, 1 - uniqueXAxisIds.size * 0.05],
                range: [30],
                zeroline: false,
            } });
    };
    /**
     * Is the data ready to be plotted?
     */
    PlotlyChart.prototype.isDataLoaded = function () {
        return (this.props.data.length > 0 ||
            this.plotlyFormattedData.filter(function (dataPoint) { return dataPoint.x && dataPoint.x.length >= 1; }).length > 0);
    };
    PlotlyChart.defaultProps = {
        config: {},
        data: [],
        height: '100%',
        layout: {},
        showLoader: true,
        width: '100%',
    };
    return PlotlyChart;
}(React.Component));
exports.PlotlyChart = PlotlyChart;


/***/ }),

/***/ "./src/component/chart/SecondaryStructureAxis.ts":
/*!*******************************************************!*\
  !*** ./src/component/chart/SecondaryStructureAxis.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-relative-imports
var _1 = __webpack_require__(/*! ./ */ "./src/component/chart/index.ts");
/**
 * Class to represent the x and y axis for a secondary structure on a Plotly graph.
 *
 * @export
 */
var SecondaryStructureAxis = /** @class */ (function (_super) {
    __extends(SecondaryStructureAxis, _super);
    function SecondaryStructureAxis(sections, minimumRequiredResidues, axisIndex, defaultColor, colorMap, dataTransformFn, filterFn) {
        if (minimumRequiredResidues === void 0) { minimumRequiredResidues = 3; }
        if (axisIndex === void 0) { axisIndex = 2; }
        if (defaultColor === void 0) { defaultColor = 'black'; }
        if (colorMap === void 0) { colorMap = {
            C: 'red',
            E: 'green',
            H: 'blue',
        }; }
        if (dataTransformFn === void 0) { dataTransformFn = {
            C: SecondaryStructureAxis.centerSectionPositionFn,
            E: SecondaryStructureAxis.centerSectionPositionFn,
            H: function (section, index) { return ({
                main: index,
                opposite: Math.sin(index),
            }); },
        }; }
        if (filterFn === void 0) { filterFn = function (section) { return section.length <= minimumRequiredResidues; }; }
        var _this = _super.call(this, sections, axisIndex, defaultColor, colorMap, dataTransformFn, filterFn) || this;
        _this.sections = sections;
        _this.minimumRequiredResidues = minimumRequiredResidues;
        _this.axisIndex = axisIndex;
        _this.defaultColor = defaultColor;
        _this.colorMap = colorMap;
        _this.dataTransformFn = dataTransformFn;
        _this.filterFn = filterFn;
        return _this;
    }
    SecondaryStructureAxis.prototype.setupAuxiliaryAxis = function () {
        _super.prototype.setupAuxiliaryAxis.call(this);
        var sheetAxis = this.getAxisById('E');
        var BLANK_LINE = 'line-ne';
        var TRIANGLE_RIGHT = 'triangle-right';
        var TRIANGLE_DOWN = 'triangle-down';
        if (sheetAxis && sheetAxis.x.x && sheetAxis.x.y) {
            var symbols = {
                main: new Array(sheetAxis.x.x.length).fill(BLANK_LINE),
                opposite: new Array(sheetAxis.x.x.length).fill(BLANK_LINE),
            };
            for (var i = 1; i < sheetAxis.x.x.length - 1; ++i) {
                if (sheetAxis.x.y[i + 1] === null) {
                    symbols.main[i] = TRIANGLE_RIGHT;
                    symbols.opposite[i] = TRIANGLE_DOWN;
                }
            }
            sheetAxis.x = __assign({}, sheetAxis.x, this.generateBetaSheetStyle(sheetAxis.x, symbols.main));
            sheetAxis.y = __assign({}, sheetAxis.y, this.generateBetaSheetStyle(sheetAxis.y, symbols.opposite));
        }
    };
    /**
     * Generate the Plotly layout specific to beta sheet representation.
     *
     * @param data Data for this axis.
     * @param symbols The symbols that make up this axis. Should be an array of empty lines with an arrow at the end.
     * @returns Plotly layout specific to beta sheet representation.
     */
    SecondaryStructureAxis.prototype.generateBetaSheetStyle = function (data, symbols) {
        return {
            line: __assign({}, data.line, { width: 5 }),
            marker: __assign({}, data.marker, { color: this.colorMap.E, size: 10, symbol: symbols }),
            mode: 'lines+markers',
        };
    };
    SecondaryStructureAxis.centerSectionPositionFn = function (section, index) { return ({
        main: index,
        opposite: 0,
    }); };
    return SecondaryStructureAxis;
}(_1.AuxiliaryAxis));
exports.SecondaryStructureAxis = SecondaryStructureAxis;


/***/ }),

/***/ "./src/component/chart/index.ts":
/*!**************************************!*\
  !*** ./src/component/chart/index.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./PlotlyChart */ "./src/component/chart/PlotlyChart.tsx"));
__export(__webpack_require__(/*! ./AuxiliaryAxis */ "./src/component/chart/AuxiliaryAxis.ts"));
__export(__webpack_require__(/*! ./ContactMapChart */ "./src/component/chart/ContactMapChart.tsx"));
__export(__webpack_require__(/*! ./SecondaryStructureAxis */ "./src/component/chart/SecondaryStructureAxis.ts"));


/***/ }),

/***/ "./src/component/index.ts":
/*!********************************!*\
  !*** ./src/component/index.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./chart */ "./src/component/chart/index.ts"));
__export(__webpack_require__(/*! ./widget */ "./src/component/widget/index.ts"));
__export(__webpack_require__(/*! ./ContactMap */ "./src/component/ContactMap.tsx"));
__export(__webpack_require__(/*! ./FeatureViewer */ "./src/component/FeatureViewer.tsx"));
__export(__webpack_require__(/*! ./InfoPanel */ "./src/component/InfoPanel.tsx"));
__export(__webpack_require__(/*! ./NGLComponent */ "./src/component/NGLComponent.tsx"));
__export(__webpack_require__(/*! ./PredictedContactMap */ "./src/component/PredictedContactMap.tsx"));
__export(__webpack_require__(/*! ./TensorTComponent */ "./src/component/TensorTComponent.tsx"));
__export(__webpack_require__(/*! ./TFrameComponent */ "./src/component/TFrameComponent.tsx"));
__export(__webpack_require__(/*! ./VizSelectorPanel */ "./src/component/VizSelectorPanel.tsx"));


/***/ }),

/***/ "./src/component/widget/CategorySelector.tsx":
/*!***************************************************!*\
  !*** ./src/component/widget/CategorySelector.tsx ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
/**
 * Class to represent a dropdown.
 *
 * @extends {React.Component<ICategorySelectorProps, any>}
 */
var CategorySelector = /** @class */ (function (_super) {
    __extends(CategorySelector, _super);
    function CategorySelector(props) {
        return _super.call(this, props) || this;
    }
    CategorySelector.prototype.render = function () {
        return (this.props.categories && (React.createElement(semantic_ui_react_1.Dropdown, { fluid: true, onChange: this.props.onCategoryChange, options: __spread(this.props.categories.map(function (cat) {
                return { key: cat, text: cat, value: cat };
            })), placeholder: 'Select Category', search: true })));
    };
    CategorySelector.defaultProps = {
        categories: [],
    };
    return CategorySelector;
}(React.Component));
exports.CategorySelector = CategorySelector;


/***/ }),

/***/ "./src/component/widget/ChellRadioGroup.tsx":
/*!**************************************************!*\
  !*** ./src/component/widget/ChellRadioGroup.tsx ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var ChellRadioGroup = /** @class */ (function (_super) {
    __extends(ChellRadioGroup, _super);
    function ChellRadioGroup(props) {
        var _this = _super.call(this, props) || this;
        _this.handleChange = function (index) { return function (event, data) {
            _this.setState({
                selectedIndex: index,
            });
            if (_this.props.onChange) {
                _this.props.onChange(index);
            }
        }; };
        _this.renderOptions = function (id, options, disabled, style) { return (React.createElement(semantic_ui_react_1.Grid, { centered: true, columns: 2, relaxed: true, padded: true }, options.map(function (option, index) { return (React.createElement(semantic_ui_react_1.Grid.Column, { key: id + "-" + option, textAlign: 'center' },
            React.createElement(semantic_ui_react_1.Form.Radio, { checked: _this.state.selectedIndex === index, disabled: disabled, label: { children: option, style: style }, name: option, onChange: _this.handleChange(index), value: index }))); }))); };
        _this.state = {
            selectedIndex: 0,
        };
        return _this;
    }
    ChellRadioGroup.prototype.render = function () {
        var _a = this.props, disabled = _a.disabled, id = _a.id, options = _a.options, style = _a.style, title = _a.title;
        return (React.createElement(semantic_ui_react_1.Form, { style: style },
            React.createElement(semantic_ui_react_1.Form.Field, null, title),
            this.renderOptions(id, options, disabled, style)));
    };
    ChellRadioGroup.defaultProps = {
        disabled: false,
        style: {},
        title: 'How to calculate distance between two residues:',
    };
    return ChellRadioGroup;
}(React.Component));
exports.ChellRadioGroup = ChellRadioGroup;


/***/ }),

/***/ "./src/component/widget/ChellSlider.tsx":
/*!**********************************************!*\
  !*** ./src/component/widget/ChellSlider.tsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:import-name
var rc_slider_1 = __webpack_require__(/*! rc-slider */ "./node_modules/rc-slider/es/index.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
// https://github.com/react-component/slider/ requires the css imported like this.
// tslint:disable-next-line:no-submodule-imports no-import-side-effect
__webpack_require__(/*! rc-slider/assets/index.css */ "./node_modules/rc-slider/assets/index.css");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
/**
 * Represents a simple 2d slider, allowing a value to be selected between a minimum and maximum.
 *
 * @export
 * @extends {React.Component<ChellSliderProps, IChellSliderState>}
 */
var ChellSlider = /** @class */ (function (_super) {
    __extends(ChellSlider, _super);
    function ChellSlider(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Updates the state of the slider after user commits to change. If applicable, invokes appropriate callback.
         */
        _this.onAfterChange = function (cb) { return function (value) {
            if (cb) {
                cb(value);
            }
            _this.setState({
                value: value,
            });
        }; };
        /**
         * Updates the state of the slider as the user moves the slider around but before selection is committed.
         * If applicable, invokes appropriate callback as well.
         */
        _this.onChange = function (cb) { return function (value) {
            if (cb) {
                cb(value);
            }
            _this.setState({
                value: value,
            });
        }; };
        _this.onReset = function () {
            _this.onChange(_this.props.onChange)(_this.state.defaultValue);
            // this.onAfterChange(this.props.onAfterChange)(this.state.defaultValue);
        };
        _this.state = {
            defaultValue: props.defaultValue ? props.defaultValue : props.value,
            value: props.value,
        };
        return _this;
    }
    ChellSlider.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, defaultValue = _a.defaultValue, value = _a.value;
        if (value && value !== prevProps.value) {
            this.setState({
                value: value,
            });
        }
        var candidateDefaultValue = defaultValue ? defaultValue : value;
        if (this.state.defaultValue === -1 && candidateDefaultValue !== this.state.defaultValue) {
            this.setState({
                defaultValue: candidateDefaultValue,
            });
        }
    };
    ChellSlider.prototype.render = function () {
        var _a = this.props, className = _a.className, value = _a.value, hideLabelValue = _a.hideLabelValue, max = _a.max, min = _a.min, label = _a.label, onAfterChange = _a.onAfterChange, onChange = _a.onChange, style = _a.style, remainingProps = __rest(_a, ["className", "value", "hideLabelValue", "max", "min", "label", "onAfterChange", "onChange", "style"]);
        return (React.createElement(semantic_ui_react_1.Grid, { columns: 'equal', style: style, textAlign: 'left' },
            React.createElement(semantic_ui_react_1.Grid.Column, { className: className },
                !hideLabelValue && React.createElement("p", null, label + ": " + this.state.value),
                React.createElement(rc_slider_1.default, __assign({ max: max, min: min, onAfterChange: this.onAfterChange(onAfterChange), onChange: this.onChange(onChange), value: value }, remainingProps))),
            React.createElement(semantic_ui_react_1.Grid.Column, { verticalAlign: 'middle', width: 2 },
                React.createElement(semantic_ui_react_1.Button, { icon: 'undo', onClick: this.onReset, size: 'small' }))));
    };
    return ChellSlider;
}(React.Component));
exports.ChellSlider = ChellSlider;


/***/ }),

/***/ "./src/component/widget/ChellTooltip.tsx":
/*!***********************************************!*\
  !*** ./src/component/widget/ChellTooltip.tsx ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var defaultStyle = {
    backgroundColor: 'rgba(0, 244, 0, 0.6)',
    color: 'lightgrey',
    display: 'block',
    fontFamily: 'sans-serif',
    padding: '0.5em',
    pointerEvents: 'none',
    position: 'absolute',
    zIndex: 10,
};
exports.initialTooltipState = {
    show: true,
    timer: undefined,
};
var ChellTooltip = /** @class */ (function (_super) {
    __extends(ChellTooltip, _super);
    function ChellTooltip(props) {
        var _this = _super.call(this, props) || this;
        _this.state = exports.initialTooltipState;
        return _this;
    }
    ChellTooltip.prototype.componentDidUpdate = function (nextProps) {
        var _this = this;
        var _a = nextProps.timeout, timeout = _a === void 0 ? 0 : _a;
        if (!this.state.timer && timeout > 0) {
            var timer = setTimeout(function () {
                _this.setState({ show: false });
            }, timeout);
            this.setState({
                timer: timer,
            });
        }
    };
    ChellTooltip.prototype.componentWillUnmount = function () {
        var timer = this.state.timer;
        if (timer) {
            clearTimeout(timer);
        }
    };
    ChellTooltip.prototype.render = function () {
        var _a = this.props, message = _a.message, _b = _a.style, style = _b === void 0 ? defaultStyle : _b;
        var show = this.state.show;
        return (show && (React.createElement("div", { style: style, className: "ChellTooltip" }, message)));
    };
    return ChellTooltip;
}(React.Component));
exports.ChellTooltip = ChellTooltip;


/***/ }),

/***/ "./src/component/widget/ComponentCard.tsx":
/*!************************************************!*\
  !*** ./src/component/widget/ComponentCard.tsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var ReactDOM = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var ComponentCard = /** @class */ (function (_super) {
    __extends(ComponentCard, _super);
    function ComponentCard(props) {
        var _this = _super.call(this, props) || this;
        _this.cardRef = null;
        _this.renderTopMenu = function (height) { return (React.createElement(semantic_ui_react_1.Menu, { secondary: true, style: { margin: 0, height: height } },
            React.createElement(semantic_ui_react_1.Menu.Item, { position: 'left', fitted: 'horizontally', style: { margin: 0 } },
                React.createElement("img", { alt: 'component icon', src: _this.props.iconSrc, style: { height: '32px', padding: '2px', width: '32px' } }),
                _this.props.componentName),
            React.createElement(semantic_ui_react_1.Menu.Item, { position: 'right', fitted: 'horizontally', style: { margin: 0 } },
                React.createElement(semantic_ui_react_1.Icon, { name: _this.state.isFullPage ? 'compress' : 'expand arrows alternate', onClick: _this.onFullPageToggle }),
                _this.props.showSettings && React.createElement(semantic_ui_react_1.Icon, { name: 'settings' })))); };
        _this.onFullPageToggle = function () {
            _this.setState({
                isFullPage: !_this.state.isFullPage,
            });
        };
        _this.state = {
            framedStyle: {
                transformOrigin: 'top left',
            },
            isFullPage: props.isFullPage,
        };
        return _this;
    }
    ComponentCard.prototype.componentDidMount = function () {
        var _this = this;
        if (this.props.isFramedComponent) {
            window.onresize = function () {
                if (_this.props.isFramedComponent) {
                    _this.resizeFramedComponent();
                }
            };
            this.resizeFramedComponent();
        }
    };
    ComponentCard.prototype.componentDidUpdate = function (prevProps, prevState) {
        var isFullPage = this.state.isFullPage;
        if (isFullPage !== prevState.isFullPage) {
            this.resizeFramedComponent();
        }
    };
    ComponentCard.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, headerHeight = _a.headerHeight, height = _a.height, isFramedComponent = _a.isFramedComponent, width = _a.width;
        var _b = this.state, isFullPage = _b.isFullPage, framedStyle = _b.framedStyle;
        var expandedStyle = {
            bottom: 0,
            height: 'calc(100vmin)',
            left: 0,
            padding: '5px',
            position: 'fixed',
            right: 0,
            width: 'calc(100vmin)',
            zIndex: 10000,
        };
        var cardStyle = __assign({ maxWidth: 'unset', padding: '0 0 5px 5px' }, (isFullPage ? __assign({}, expandedStyle) : { height: height, width: width }));
        var dimmedBackground = document.getElementById('chell-dimmed-background');
        if (isFullPage && dimmedBackground) {
            dimmedBackground.style.display = 'block';
        }
        else if (dimmedBackground) {
            dimmedBackground.style.display = 'none';
        }
        return (React.createElement(semantic_ui_react_1.Card, { centered: true, className: 'chell-component-card', ref: function (ref) { return (_this.cardRef = ref); }, style: cardStyle },
            this.renderTopMenu(headerHeight),
            isFramedComponent ? React.createElement("div", { style: framedStyle }, children) : children));
    };
    ComponentCard.prototype.resizeFramedComponent = function () {
        var _a = this.props, frameHeight = _a.frameHeight, frameWidth = _a.frameWidth, headerHeight = _a.headerHeight;
        var _b = this.state, framedStyle = _b.framedStyle, isFullPage = _b.isFullPage;
        if (this.cardRef) {
            var iFrameNodeRef = ReactDOM.findDOMNode(this.cardRef);
            var iFrameNodeStyle = iFrameNodeRef ? window.getComputedStyle(iFrameNodeRef) : null;
            if (iFrameNodeStyle && iFrameNodeStyle.width && iFrameNodeStyle.height) {
                document.body.style.overflowY = isFullPage ? 'hidden' : 'auto';
                var refHeight = parseInt(iFrameNodeStyle.height, 10) - 18;
                var refWidth = parseInt(iFrameNodeStyle.width, 10) - 10;
                this.setState({
                    framedStyle: __assign({}, framedStyle, { transform: "scale(calc(" + refWidth + "/" + frameWidth + "),calc((" + refHeight + " - " + headerHeight + ")/" + frameHeight + "))" }),
                });
            }
        }
    };
    ComponentCard.defaultProps = {
        frameHeight: 0,
        frameWidth: 0,
        headerHeight: 32,
        height: '525px',
        iconSrc: 'assets/icons/spring-icon.png',
        isFramedComponent: false,
        isFullPage: false,
        padding: 0,
        showSettings: false,
        width: '525px',
    };
    return ComponentCard;
}(React.Component));
exports.ComponentCard = ComponentCard;


/***/ }),

/***/ "./src/component/widget/SettingsPanel.tsx":
/*!************************************************!*\
  !*** ./src/component/widget/SettingsPanel.tsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var SettingsPanel = /** @class */ (function (_super) {
    __extends(SettingsPanel, _super);
    function SettingsPanel(props) {
        var _this = _super.call(this, props) || this;
        _this.panel = null;
        _this.onButtonClick = function (e) {
            _this.setState({
                visible: !_this.state.visible,
            });
        };
        _this.renderSettingsButton = function () { return (React.createElement(semantic_ui_react_1.Button, { basic: true, floated: 'right', icon: 'settings', onClick: _this.onButtonClick })); };
        _this.state = {
            visible: false,
        };
        return _this;
    }
    SettingsPanel.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _this = this;
        var visible = this.state.visible;
        if (visible && prevState.visible !== visible) {
            window.addEventListener('click', function (e) {
                if (_this.panel) {
                    var panelRect = _this.panel.getBoundingClientRect();
                    var x = e.x, y = e.y;
                    var isIntersected = x >= panelRect.left && x <= panelRect.right && y >= panelRect.top && y <= panelRect.bottom;
                    if (!isIntersected) {
                        _this.hideSettingsPanel();
                        window.removeEventListener('click', _this.hideSettingsPanel);
                    }
                }
            });
        }
        else {
            window.removeEventListener('click', function (e) { return _this.hideSettingsPanel; });
        }
    };
    SettingsPanel.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, configurations = _a.configurations, inverted = _a.inverted, opacity = _a.opacity, showConfigurations = _a.showConfigurations, width = _a.width;
        var visible = this.state.visible;
        return (React.createElement("div", { ref: function (node) { return (_this.panel = node ? node : null); } },
            React.createElement(semantic_ui_react_1.Grid, { columns: 1 },
                showConfigurations && React.createElement(semantic_ui_react_1.Grid.Column, null, this.renderSettingsButton()),
                React.createElement(semantic_ui_react_1.Sidebar.Pushable, { style: { width: width } },
                    React.createElement(semantic_ui_react_1.Sidebar, { as: semantic_ui_react_1.Menu, animation: 'overlay', inverted: inverted, style: { width: width, opacity: opacity }, vertical: true, visible: visible }, this.renderConfigurations(configurations)),
                    React.createElement(semantic_ui_react_1.Sidebar.Pusher, null, children)))));
    };
    SettingsPanel.prototype.renderConfigurations = function (configurations) {
        var _this = this;
        return (React.createElement(semantic_ui_react_1.Grid, { centered: true }, configurations.map(function (config, index) {
            var id = config.id
                ? config.id
                : config.name
                    .toLowerCase()
                    .split(' ')
                    .join('-') + "-" + index;
            switch (config.type) {
                case data_1.CONFIGURATION_COMPONENT_TYPE.BUTTON:
                    return React.createElement(semantic_ui_react_1.Grid.Row, { key: id }, _this.renderConfigurationButton(config, id));
                case data_1.CONFIGURATION_COMPONENT_TYPE.LABEL:
                    return React.createElement(semantic_ui_react_1.Grid.Row, { key: id }, _this.renderConfigurationLabel(config, id));
                case data_1.CONFIGURATION_COMPONENT_TYPE.RADIO:
                    return React.createElement(semantic_ui_react_1.Grid.Row, { key: id }, _this.renderConfigurationRadioButton(config, id));
                case data_1.CONFIGURATION_COMPONENT_TYPE.SLIDER:
                    return React.createElement(semantic_ui_react_1.Grid.Row, { key: id }, _this.renderConfigurationSlider(config, id));
                default: {
                    return React.createElement(semantic_ui_react_1.Grid.Row, { key: id }, "configuration for " + id);
                }
            }
        })));
    };
    SettingsPanel.prototype.renderConfigurationButton = function (config, id) {
        return (React.createElement(semantic_ui_react_1.Button, { compact: true, id: id, onClick: config.onClick, style: __assign({}, config.style) },
            config.icon && React.createElement(semantic_ui_react_1.Icon, { name: config.icon }),
            config.name));
    };
    SettingsPanel.prototype.renderConfigurationLabel = function (config, id) {
        return (React.createElement(semantic_ui_react_1.Label, { basic: true, id: id, style: __assign({}, config.style), color: 'orange' }, config.name));
    };
    SettingsPanel.prototype.renderConfigurationRadioButton = function (config, id) {
        return (React.createElement(component_1.ChellRadioGroup, { id: id, options: config.options, onChange: config.onChange, style: __assign({ color: 'white' }, config.style), title: config.name }));
    };
    SettingsPanel.prototype.renderConfigurationSlider = function (config, id) {
        return (React.createElement(component_1.ChellSlider, { className: id, label: config.name, max: config.values.max, min: config.values.min, onAfterChange: config.onAfterChange, onChange: config.onChange, style: __assign({ color: 'white', padding: '0 25px', width: '95%' }, config.style), value: config.values.current }));
    };
    SettingsPanel.prototype.hideSettingsPanel = function () {
        this.setState({
            visible: false,
        });
    };
    SettingsPanel.defaultProps = {
        configurations: new Array(),
        direction: 'left',
        inverted: true,
        opacity: 0.6,
        showConfigurations: true,
        width: '100%',
    };
    return SettingsPanel;
}(React.Component));
exports.SettingsPanel = SettingsPanel;


/***/ }),

/***/ "./src/component/widget/index.ts":
/*!***************************************!*\
  !*** ./src/component/widget/index.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./CategorySelector */ "./src/component/widget/CategorySelector.tsx"));
__export(__webpack_require__(/*! ./ChellRadioGroup */ "./src/component/widget/ChellRadioGroup.tsx"));
__export(__webpack_require__(/*! ./ChellSlider */ "./src/component/widget/ChellSlider.tsx"));
__export(__webpack_require__(/*! ./ChellTooltip */ "./src/component/widget/ChellTooltip.tsx"));
__export(__webpack_require__(/*! ./ComponentCard */ "./src/component/widget/ComponentCard.tsx"));
__export(__webpack_require__(/*! ./SettingsPanel */ "./src/component/widget/SettingsPanel.tsx"));


/***/ }),

/***/ "./src/container/AnatomogramContainer.tsx":
/*!************************************************!*\
  !*** ./src/container/AnatomogramContainer.tsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:import-name
var anatomogram_1 = __webpack_require__(/*! anatomogram */ "./node_modules/anatomogram/lib/index.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var immutable_1 = __webpack_require__(/*! immutable */ "./node_modules/immutable/dist/immutable.js");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
exports.springToAnatomogramMapping = {
    homo_sapiens: {
        P11A: 'UBERON_0000178',
        P11B: 'UBERON_0001155',
        P12A: 'UBERON_0000955',
        P9A: 'UBERON_0000977',
    },
    mus_musculus: {
        Bladder: 'UBERON_0001255',
        Heart: 'UBERON_0000948',
        Kidney: 'UBERON_0002113',
        Limb: 'UBERON_0014892',
        Liver: 'UBERON_0002107',
        Lung: 'UBERON_0002048',
        Mammary: 'UBERON_0001911',
        Marrow: 'UBERON_0002371',
        Muscle: 'UBERON_0014892',
        Spleen: 'UBERON_0002106',
        Thymus: 'UBERON_0002370',
        Tongue: 'UBERON_0001723',
        Trachea: 'UBERON_0003126',
    },
};
exports.anatomogramToSpringMapping = {
    homo_sapiens: {
        UBERON_0000178: ['P11A'],
        UBERON_0000955: ['P12A'],
        UBERON_0000977: ['P9A'],
        UBERON_0001155: ['P11B'],
    },
    mus_musculus: {
        UBERON_0000948: ['Heart_and_Aorta', 'Heart_and_Aorta-10X_P7_4'],
        UBERON_0001255: ['Bladder', 'Bladder-10X_P4_3', 'Bladder-10X_P4_4', 'Bladder-10X_P7_7'],
        UBERON_0001723: ['Tongue', 'Tongue-10X_P4_0', 'Tongue-10X_P4_1', 'Tongue-10X_P7_10'],
        UBERON_0001911: ['Mammary_Gland', 'Mammary_Gland-10X_P7_12', 'Mammary_Gland-10X_P7_13'],
        UBERON_0002048: ['Lung', 'Lung-10X_P7_8', 'Lung-10X_P7_9', 'Lung-10X_P8_12', 'Lung-10X_P8_13'],
        UBERON_0002106: ['Spleen', 'Spleen-10X_P4_7', 'Spleen-10X_P7_6'],
        UBERON_0002107: ['Liver', 'Liver-10X_P4_2', 'Liver-10X_P7_0', 'Liver-10X_P7_1'],
        UBERON_0002113: ['Kidney', 'Kidney-10X_P4_5', 'Kidney-10X_P4_6', 'Kidney-10X_P7_5'],
        UBERON_0002370: ['Thymus', 'Thymus-10X_P7_11'],
        UBERON_0002371: ['Marrow', 'Marrow-10X_P7_2', 'Marrow-10X_P7_3'],
        UBERON_0003126: ['Trachea', 'Trachea-10X_P8_14', 'Trachea-10X_P8_15'],
        UBERON_0014892: ['Limb_Muscle', 'Limb_Muscle-10X_P7_14', 'Limb_Muscle-10X_P7_15'],
    },
};
var AnatomogramContainerClass = /** @class */ (function (_super) {
    __extends(AnatomogramContainerClass, _super);
    function AnatomogramContainerClass(props) {
        var _this = _super.call(this, props) || this;
        _this.onClick = function (id) {
            var _a = _this.props, species = _a.species, springContext = _a.springContext;
            var labels = exports.anatomogramToSpringMapping[species][id];
            springContext.toggleLabels(labels);
        };
        _this.onMouseOut = function (id) {
            return;
        };
        _this.onMouseOver = function (id) {
            return;
        };
        _this.parseCategory = function (category) {
            var splitCategories = category.split(/-|_/);
            return splitCategories[0];
        };
        _this.state = {
            ids: Object.keys(exports.anatomogramToSpringMapping[props.species]),
            selectIds: immutable_1.Set(),
        };
        return _this;
    }
    AnatomogramContainerClass.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        var springContext = this.props.springContext;
        if (!springContext.selectedLabels.equals(prevProps.springContext.selectedLabels)) {
            var selectIds = springContext.selectedLabels
                .toArray()
                .filter(function (label) { return exports.springToAnatomogramMapping[_this.props.species][_this.parseCategory(label)] !== undefined; })
                .map(function (label) { return exports.springToAnatomogramMapping[_this.props.species][_this.parseCategory(label)]; });
            this.setState({
                selectIds: immutable_1.Set(selectIds),
            });
        }
    };
    AnatomogramContainerClass.prototype.render = function () {
        var _a = this.state, ids = _a.ids, selectIds = _a.selectIds;
        return (React.createElement("div", { className: 'anatomogram-container', style: { height: '100%' } },
            React.createElement(anatomogram_1.default, { atlasUrl: "", highlightColour: 'yellow', onClick: this.onClick, onMouseOut: this.onMouseOut, onMouseOver: this.onMouseOver, selectColour: 'ffaa00', selectIds: selectIds.toArray(), showIds: ids, species: this.props.species, selectedView: this.props.species === 'mus_musculus' ? 'female' : 'male' })));
    };
    AnatomogramContainerClass.defaultProps = {
        height: '300px',
        springContext: __assign({}, context_1.initialSpringContext),
        style: {},
        width: '400px',
    };
    AnatomogramContainerClass.displayName = 'Anatomogram';
    return AnatomogramContainerClass;
}(React.Component));
exports.AnatomogramContainerClass = AnatomogramContainerClass;
exports.AnatomogramContainer = function (props) { return (React.createElement(context_1.SpringContext.Consumer, null, function (springContext) { return React.createElement(AnatomogramContainerClass, __assign({}, props, { springContext: springContext })); })); };


/***/ }),

/***/ "./src/container/ProteinFeatureViewer.tsx":
/*!************************************************!*\
  !*** ./src/container/ProteinFeatureViewer.tsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var helper_1 = __webpack_require__(/*! ~chell-viz~/helper */ "./src/helper/index.ts");
var ProteinFeatureViewer = /** @class */ (function (_super) {
    __extends(ProteinFeatureViewer, _super);
    function ProteinFeatureViewer(props) {
        var _this = _super.call(this, props) || this;
        _this.onProteinInputChange = function (event, data) {
            _this.setState({
                proteinId: data.value,
            });
        };
        _this.onProteinInputSubmit = function (event, data) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deriveProteinData()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        _this.onShowGroupedChange = function (event, data) {
            _this.setState({
                showGrouped: data.checked !== undefined ? data.checked : _this.state.showGrouped,
            });
        };
        _this.renderAnnotationText = function (proteinId, index) {
            var _a = _this.state, domainData = _a.domainData, protein = _a.protein;
            var pFamIds = protein
                ? protein.dbReferences
                    .filter(function (dbRef) { return dbRef.type === 'Pfam'; })
                    .filter(function (pFamRef) {
                    var properties = pFamRef.properties;
                    var entryName = properties ? properties['entry name'] : null;
                    return entryName && (entryName === proteinId || entryName.localeCompare(proteinId + "-like " + index));
                })
                : [];
            return pFamIds.length >= 1
                ? proteinId + ": " + proteinId + " domain (" + domainData[index].start + " - " + domainData[index].end + ")<br /><a href=\"http://pfam.xfam.org/family/" + pFamIds[0].id + "\">PFAM</a> <a href=\"http://mutationaligner.org/domains/" + pFamIds[0].id + "\">Mutagen Aligner</a>"
                : '';
        };
        _this.state = {
            data: [],
            domainData: [],
            proteinId: props.initialProteinId,
            showGrouped: true,
        };
        return _this;
    }
    ProteinFeatureViewer.prototype.componentDidMount = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deriveProteinData()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ProteinFeatureViewer.prototype.render = function () {
        var _a = this.state, domainData = _a.domainData, protein = _a.protein, proteinId = _a.proteinId, showGrouped = _a.showGrouped;
        return (React.createElement("div", { className: 'protein-feature-viewer' },
            React.createElement(semantic_ui_react_1.GridRow, { centered: true, stretched: false },
                React.createElement(semantic_ui_react_1.GridColumn, null,
                    React.createElement(component_1.FeatureViewer, { data: domainData, getTextForHover: this.renderAnnotationText, title: protein ? protein.id : '', showGrouped: showGrouped })),
                React.createElement(semantic_ui_react_1.GridColumn, null,
                    React.createElement(semantic_ui_react_1.Form, { onSubmit: this.onProteinInputSubmit },
                        React.createElement(semantic_ui_react_1.Form.Input, { onChange: this.onProteinInputChange, value: proteinId, fluid: false, width: 'three' }),
                        React.createElement(semantic_ui_react_1.Form.Button, null, "Submit Protein ID"),
                        React.createElement(semantic_ui_react_1.Form.Checkbox, { defaultChecked: true, label: 'Show grouped?', onChange: this.onShowGroupedChange }))))));
    };
    ProteinFeatureViewer.prototype.deriveProteinData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, protein, domains, colorMapper_1, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, fetch("https://www.ebi.ac.uk/proteins/api/proteins/" + this.state.proteinId)];
                    case 1:
                        result = _a.sent();
                        if (!(result && result.ok)) return [3 /*break*/, 3];
                        return [4 /*yield*/, result.json()];
                    case 2:
                        protein = (_a.sent());
                        domains = protein.features.filter(function (feature) { return feature.type === 'DOMAIN'; });
                        colorMapper_1 = new helper_1.ColorMapper();
                        this.setState({
                            domainData: domains.map(function (domain, index) {
                                var begin = domain.begin, _a = domain.description, description = _a === void 0 ? '' : _a, end = domain.end;
                                // This matches domains that do and do not have other of the same domain in the protein.
                                var domainName = description.split('-like')[0];
                                return new data_1.TintedChell1DSection(domainName, begin ? Number.parseInt(begin, 10) : -1, end ? Number.parseInt(end, 10) : -1, colorMapper_1.getColorFor(domainName));
                            }),
                            protein: protein,
                        });
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        console.log(e_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ProteinFeatureViewer.defaultProps = {
        // initialProteinId: 'Q13485',
        initialProteinId: 'Q9NYJ7',
    };
    return ProteinFeatureViewer;
}(React.Component));
exports.ProteinFeatureViewer = ProteinFeatureViewer;


/***/ }),

/***/ "./src/container/SiteHeader.tsx":
/*!**************************************!*\
  !*** ./src/container/SiteHeader.tsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var react_router_dom_1 = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/es/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var SiteHeader = /** @class */ (function (_super) {
    __extends(SiteHeader, _super);
    function SiteHeader(props) {
        var _this = _super.call(this, props) || this;
        _this.renderNavMenu = function () {
            return (React.createElement(semantic_ui_react_1.Menu, { defaultActiveIndex: -1, secondary: true },
                React.createElement(semantic_ui_react_1.Menu.Item, { key: 'datasets' },
                    React.createElement(react_router_dom_1.Link, { to: '/dataset', style: { color: 'black', fontSize: '18px' } }, "datasets")),
                React.createElement(semantic_ui_react_1.Menu.Item, { key: 'visualizations' },
                    React.createElement(react_router_dom_1.Link, { to: '/visualizations', style: { color: 'black', fontSize: '18px' } }, "visualizations")),
                React.createElement(semantic_ui_react_1.Menu.Item, { key: 'stories' },
                    React.createElement(react_router_dom_1.Link, { to: '/stories', style: { color: 'black', fontSize: '18px' } }, "stories"))));
        };
        _this.onMouseClick = function (e) {
            return;
        };
        _this.renderVisualizationsMenu = function () {
            return (React.createElement(semantic_ui_react_1.Container, { fluid: true },
                React.createElement(semantic_ui_react_1.Header, null, "Visualization applications"),
                React.createElement(semantic_ui_react_1.Divider, null),
                "dataset",
                React.createElement(semantic_ui_react_1.Divider, null),
                React.createElement(semantic_ui_react_1.Search, { defaultValue: 'search', icon: false }),
                React.createElement(semantic_ui_react_1.Table, { basic: 'very' },
                    React.createElement(semantic_ui_react_1.Table.Header, null,
                        React.createElement(semantic_ui_react_1.Table.Row, null,
                            React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Select"),
                            React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Name"),
                            React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Author(s)"),
                            React.createElement(semantic_ui_react_1.Table.HeaderCell, null, "Last updated")),
                        React.createElement(semantic_ui_react_1.Table.Row, { cells: [
                                { key: 'Select', content: React.createElement(semantic_ui_react_1.Checkbox, { checked: true }) },
                                { key: 'Name', content: 'SPRING' },
                                { key: 'Author', content: 'Weinreb, Wolock, Klein' },
                                { key: 'Last Updated', content: 'Nov 13, 2018' },
                            ] }),
                        React.createElement(semantic_ui_react_1.Table.Row, { cells: [
                                { key: 'Select', content: React.createElement(semantic_ui_react_1.Checkbox, { checked: false }) },
                                { key: 'Name', content: 'tSNE-Tensor' },
                                { key: 'Author', content: '??' },
                                { key: 'Last Updated', content: 'Nov 13, 2018' },
                            ], style: { border: 'none' } }),
                        React.createElement(semantic_ui_react_1.Table.Row, { cells: [
                                { key: 'Select', content: React.createElement(semantic_ui_react_1.Checkbox, { checked: false }) },
                                { key: 'Name', content: 'Anatomogram' },
                                { key: 'Author', content: '??' },
                                { key: 'Last Updated', content: 'Nov 13, 2018' },
                            ], style: { border: 'none' } })))));
        };
        _this.renderDatasetMenu = function () {
            var visualizations = [];
            if (_this.props.location) {
                var params = new URLSearchParams(_this.props.location.search);
                visualizations = params.getAll('viz').map(function (viz) { return "viz=" + viz; });
            }
            var datasets = ['hpc/full', 'hpc_sf2/full', 'tabula_muris/10k', 'tabula_muris/full', 'tabula_muris/lung'];
            var panes = [
                {
                    menuItem: 'human cell atlas',
                    render: function () { return (React.createElement(semantic_ui_react_1.Tab.Pane, null,
                        React.createElement(semantic_ui_react_1.Container, { fluid: true },
                            React.createElement(semantic_ui_react_1.Table, { basic: 'very' },
                                React.createElement(semantic_ui_react_1.Table.Header, null,
                                    React.createElement(semantic_ui_react_1.Table.Row, null,
                                        React.createElement(semantic_ui_react_1.Table.HeaderCell, null,
                                            React.createElement(semantic_ui_react_1.Dropdown, { placeholder: 'search', selection: true })),
                                        React.createElement(semantic_ui_react_1.Table.HeaderCell, null,
                                            React.createElement(semantic_ui_react_1.Dropdown, { placeholder: 'organ', selection: true })),
                                        React.createElement(semantic_ui_react_1.Table.HeaderCell, null,
                                            React.createElement(semantic_ui_react_1.Dropdown, { placeholder: 'method', selection: true })))))))); },
                },
                {
                    menuItem: 'HCA Dynamics public',
                    render: function () { return (React.createElement(semantic_ui_react_1.List, null, datasets.map(function (dataset, index) { return _this.renderDatasetLinkItem(dataset, index, visualizations); }))); },
                },
                {
                    menuItem: 'upload from computer',
                    render: function () { return React.createElement(semantic_ui_react_1.Tab.Pane, null, "Coming soon!"); },
                },
            ];
            return (React.createElement(semantic_ui_react_1.Container, { fluid: true },
                React.createElement(semantic_ui_react_1.Header, null, "datasets"),
                React.createElement(semantic_ui_react_1.Divider, null),
                React.createElement(semantic_ui_react_1.Tab, { defaultActiveIndex: 1, menu: { secondary: true, pointing: true }, panes: panes })));
        };
        _this.renderDatasetLinkItem = function (datasetName, index, visualizations) { return (React.createElement(semantic_ui_react_1.List.Item, { key: "dataset-link-" + index },
            React.createElement(react_router_dom_1.Link, { onClick: _this.closeModal, to: { pathname: '/dataset', search: "?name=" + datasetName + "&" + visualizations.join('&') } }, datasetName))); };
        _this.closeModal = function () {
            _this.setState({ isModalOpen: false });
        };
        _this.openModal = function (event, data) {
            _this.setState({ isModalOpen: true });
        };
        _this.state = {
            currentPageName: null,
            isModalOpen: false,
        };
        return _this;
    }
    SiteHeader.prototype.componentDidMount = function () {
        window.addEventListener('click', this.onMouseClick);
        if (this.props.location) {
            this.handleQueryParams(this.props.location.search);
        }
    };
    SiteHeader.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.location && this.props.location !== prevProps.location) {
            this.handleQueryParams(this.props.location.search);
        }
    };
    SiteHeader.prototype.componentWillUnmount = function () {
        window.removeEventListener('click', this.onMouseClick);
    };
    SiteHeader.prototype.render = function () {
        return (React.createElement(semantic_ui_react_1.Header, null,
            React.createElement(semantic_ui_react_1.Menu, { secondary: true, borderless: true, fluid: true, style: { maxHeight: '40px', padding: '20px 0 0 0' } },
                React.createElement(semantic_ui_react_1.Menu.Item, { fitted: 'vertically', position: 'left' },
                    React.createElement(react_router_dom_1.Link, { to: '/' },
                        React.createElement("img", { alt: 'hca-dynamics-icon', src: 'assets/icons/bio-blocks-icon-2x.png', style: { height: '32px', width: '32px' } }),
                        React.createElement("span", { style: { color: 'black', fontSize: '32px', fontWeight: 'bold' } }, "HCA Dynamics"))),
                this.renderNavMenu(),
                React.createElement(semantic_ui_react_1.Menu.Item, { position: 'right' },
                    React.createElement(semantic_ui_react_1.Input, { icon: 'search', size: 'massive', transparent: true }))),
            this.renderNavBreadcrumb(),
            this.renderCurrentData()));
    };
    SiteHeader.prototype.renderCurrentData = function () {
        var location = this.props.location;
        if (location) {
            var params = new URLSearchParams(location.search);
            var visualizations = params.getAll('viz');
            // tslint:disable-next-line:no-backbone-get-set-outside-model
            var name_1 = params.get('name');
            return (name_1 &&
                data_1.DatasetData[name_1] && (React.createElement(semantic_ui_react_1.Grid, { centered: true, padded: true, textAlign: 'center' },
                React.createElement(semantic_ui_react_1.Grid.Row, { textAlign: 'left' },
                    React.createElement("p", null, "Selected visualization(s): ",
                        React.createElement("span", { style: { fontWeight: 'normal' } }, visualizations.map(function (viz) { return data_1.VizData[viz].name; }).join(', ')),
                        React.createElement("br", null),
                        name_1 && "Selected dataset: ",
                        React.createElement("span", { style: { fontWeight: 'normal' } }, data_1.DatasetData[name_1].fullName + " (" + name_1 + ")"))))));
        }
        else {
            return null;
        }
    };
    SiteHeader.prototype.renderNavBreadcrumb = function () {
        return (React.createElement(semantic_ui_react_1.Breadcrumb, { style: { padding: '0 0 0 40px' } },
            React.createElement(semantic_ui_react_1.Breadcrumb.Section, null,
                React.createElement(react_router_dom_1.Link, { to: '/' }, "home")),
            this.props.location &&
                this.props.location.pathname
                    .split('/')
                    .filter(function (candidatePath) { return candidatePath.length >= 1; })
                    .map(function (path, index) { return (React.createElement(React.Fragment, { key: "breadcrumb-" + index },
                    React.createElement(semantic_ui_react_1.Breadcrumb.Divider, { icon: 'right angle' }),
                    React.createElement(semantic_ui_react_1.Breadcrumb.Section, null,
                        React.createElement(react_router_dom_1.Link, { to: "/" + path }, path)))); }),
            this.state.currentPageName && (React.createElement(React.Fragment, null,
                React.createElement(semantic_ui_react_1.Breadcrumb.Divider, { icon: 'right angle' }),
                React.createElement(semantic_ui_react_1.Breadcrumb.Section, null, this.state.currentPageName)))));
    };
    SiteHeader.prototype.handleQueryParams = function (search) {
        var params = new URLSearchParams(search);
        var visualizations = params.getAll('viz');
        // tslint:disable-next-line:no-backbone-get-set-outside-model
        var name = params.get('name');
        if (visualizations.length >= 1 && !name) {
            this.setState({
                currentPageName: name,
                isModalOpen: true,
            });
        }
        else {
            this.setState({
                currentPageName: name,
                isModalOpen: false,
            });
        }
    };
    return SiteHeader;
}(React.Component));
exports.SiteHeader = SiteHeader;


/***/ }),

/***/ "./src/container/SpringContainer.tsx":
/*!*******************************************!*\
  !*** ./src/container/SpringContainer.tsx ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
// tslint:disable:import-name match-default-export-name
var react_iframe_comm_1 = __webpack_require__(/*! react-iframe-comm */ "./node_modules/react-iframe-comm/dist/IframeComm.js");
// tslint:enable:import-name match-default-export-name
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
var SpringContainerClass = /** @class */ (function (_super) {
    __extends(SpringContainerClass, _super);
    function SpringContainerClass(props) {
        var _this = _super.call(this, props) || this;
        _this.onReady = function () {
            return;
        };
        _this.onReceiveMessage = function (msg) {
            var data = msg.data;
            var springContext = _this.props.springContext;
            switch (data.type) {
                case 'selected-category-update':
                case 'selected-cells-update': {
                    springContext.update(data.payload.indices, data.payload.currentCategory);
                    break;
                }
                case 'loaded': {
                    _this.setState({
                        postMessageData: {
                            payload: {
                                indices: springContext.currentCells.toArray(),
                            },
                            type: 'init',
                        },
                    });
                }
                default: {
                    console.log("Got this msg for ya: " + JSON.stringify(msg));
                }
            }
        };
        _this.generateSpringURL = function (dataset) {
            return window.location.origin + "/" + window.location.pathname.substr(0, window.location.pathname.lastIndexOf('/')) + "/springViewer.html?datasets/" + dataset;
        };
        _this.state = {
            postMessageData: {
                payload: {},
                type: 'init',
            },
            springUrl: _this.generateSpringURL(_this.props.datasetLocation),
        };
        return _this;
    }
    SpringContainerClass.prototype.componentDidUpdate = function (prevProps, prevState) {
        var springContext = this.props.springContext;
        if (!prevProps.springContext.currentCells.equals(springContext.currentCells)) {
            console.log("sending new cells to spring, totalling " + springContext.currentCells.size);
            this.setState({
                postMessageData: {
                    payload: {
                        indices: springContext.currentCells.toArray(),
                    },
                    type: 'selected-cells-update',
                },
            });
        }
        else if (prevProps.datasetLocation !== this.props.datasetLocation) {
            this.setState({
                springUrl: this.generateSpringURL(this.props.datasetLocation),
            });
        }
    };
    SpringContainerClass.prototype.render = function () {
        var _a = this.props, isFullPage = _a.isFullPage, springHeight = _a.springHeight, springWidth = _a.springWidth;
        var _b = this.state, postMessageData = _b.postMessageData, springUrl = _b.springUrl;
        var attributes = {
            allowFullScreen: true,
            height: springHeight,
            src: springUrl,
            width: springWidth,
        };
        var targetOriginPieces = springUrl.split('/');
        return (React.createElement(component_1.ComponentCard, { componentName: SpringContainerClass.displayName, isFramedComponent: true, isFullPage: isFullPage, frameHeight: springHeight, frameWidth: springWidth, height: '500px' },
            React.createElement(react_iframe_comm_1.default, { attributes: attributes, postMessageData: postMessageData, handleReady: this.onReady, handleReceiveMessage: this.onReceiveMessage, targetOrigin: targetOriginPieces[0] + "//" + targetOriginPieces[2] })));
    };
    SpringContainerClass.defaultProps = {
        data: {
            links: new Array(),
            nodes: new Array(),
        },
        datasetLocation: 'hpc/full',
        headerHeight: 32,
        isFullPage: false,
        padding: 0,
        selectedCategory: '',
        springContext: __assign({}, context_1.initialSpringContext),
        springHeight: 1150,
        springWidth: 1150,
    };
    SpringContainerClass.displayName = 'SPRING';
    return SpringContainerClass;
}(React.Component));
exports.SpringContainerClass = SpringContainerClass;
exports.SpringContainer = function (props) { return (React.createElement(context_1.SpringContext.Consumer, null, function (springContext) { return React.createElement(SpringContainerClass, __assign({}, props, { springContext: springContext })); })); };


/***/ }),

/***/ "./src/container/TensorTContainer.tsx":
/*!********************************************!*\
  !*** ./src/container/TensorTContainer.tsx ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var tensorFlow = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js");
// tslint:disable-next-line:no-submodule-imports
var tsne_1 = __webpack_require__(/*! @tensorflow/tfjs-tsne/dist/tsne */ "./node_modules/@tensorflow/tfjs-tsne/dist/tsne.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var helper_1 = __webpack_require__(/*! ~chell-viz~/helper */ "./src/helper/index.ts");
var TensorTContainerClass = /** @class */ (function (_super) {
    __extends(TensorTContainerClass, _super);
    function TensorTContainerClass(props) {
        var _this = _super.call(this, props) || this;
        _this.canvasContext = null;
        _this.getPlotlyCoordsFromTsne = function (coords) {
            var springContext = _this.props.springContext;
            return [
                {
                    marker: {
                        color: _this.props.pointColor,
                    },
                    mode: 'markers',
                    type: 'scattergl',
                    x: coords.map(function (coord) { return coord[0]; }),
                    y: coords.map(function (coord) { return coord[1]; }),
                },
                {
                    marker: {
                        color: '#ffaa00',
                    },
                    mode: 'markers',
                    type: 'scattergl',
                    x: springContext.currentCells.toArray().map(function (cellIndex) { return coords[cellIndex][0]; }),
                    y: springContext.currentCells.toArray().map(function (cellIndex) { return coords[cellIndex][1]; }),
                },
            ];
        };
        _this.getPlotlyCoordsFromSpring = function (coords, currentCells) {
            return [
                {
                    marker: {
                        color: _this.props.pointColor,
                    },
                    mode: 'markers',
                    type: 'scattergl',
                    x: coords.map(function (coord) { return coord[0]; }),
                    y: coords.map(function (coord) { return coord[1]; }),
                },
                {
                    marker: {
                        color: '#ffaa00',
                    },
                    mode: 'markers',
                    type: 'scattergl',
                    x: currentCells.map(function (cellIndex) { return coords[cellIndex][0]; }),
                    y: currentCells.map(function (cellIndex) { return coords[cellIndex][1]; }),
                },
            ];
        };
        _this.getTensorConfigs = function () { return [
            {
                name: 'Iterate Once',
                onClick: _this.onIterateForward(),
                type: data_1.CONFIGURATION_COMPONENT_TYPE.BUTTON,
            },
            {
                name: 'Iterate Ten Times',
                onClick: _this.onIterateForward(10),
                type: data_1.CONFIGURATION_COMPONENT_TYPE.BUTTON,
            },
            {
                name: 'Iterate Fifty Times',
                onClick: _this.onIterateForward(50),
                type: data_1.CONFIGURATION_COMPONENT_TYPE.BUTTON,
            },
            {
                name: 'Reset',
                onClick: _this.onReset(),
                type: data_1.CONFIGURATION_COMPONENT_TYPE.BUTTON,
            },
            {
                icon: 'hashtag',
                name: "Total Iterations: " + _this.state.numIterations,
                type: data_1.CONFIGURATION_COMPONENT_TYPE.LABEL,
            },
        ]; };
        _this.handlePointSelection = function (event) {
            var springContext = _this.props.springContext;
            var coordsArray = _this.state.coordsArray;
            var selectedCells = new Array();
            var _loop_1 = function (i) {
                var x = event.selectedPoints[i];
                var y = event.selectedPoints[i + 1];
                var cellIndex = coordsArray.findIndex(function (coord) { return coord[0] === x && coord[1] === y; });
                if (cellIndex >= 0) {
                    selectedCells.push(cellIndex);
                }
            };
            for (var i = 0; i < event.selectedPoints.length - 1; i += 2) {
                _loop_1(i);
            }
            springContext.setCells(selectedCells);
        };
        _this.renderIterateLabel = function () { return React.createElement("label", null, "iterations: " + _this.state.numIterations); };
        /**
         * Renders the radio button responsible for toggling the animation on/off.
         */
        _this.renderIterateButton = function () { return (React.createElement(semantic_ui_react_1.Radio, { label: React.createElement("label", { style: { fontSize: '14px', fontWeight: 'bold' } }, "iterate"), onClick: _this.onIterationToggle(), toggle: true })); };
        _this.renderResetButton = function () { return React.createElement(semantic_ui_react_1.Icon, { name: 'undo', onClick: _this.onReset() }); };
        _this.onIterateForward = function (amount) {
            if (amount === void 0) { amount = 1; }
            return function () { return __awaiter(_this, void 0, void 0, function () {
                var _a, isComputing, tsne, coordsArray, plotlyCoords;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this.state, isComputing = _a.isComputing, tsne = _a.tsne;
                            if (!(tsne && !isComputing)) return [3 /*break*/, 3];
                            this.setState({
                                isComputing: true,
                            });
                            return [4 /*yield*/, tsne.iterate(amount)];
                        case 1:
                            _b.sent();
                            return [4 /*yield*/, tsne.coordsArray()];
                        case 2:
                            coordsArray = _b.sent();
                            plotlyCoords = this.getPlotlyCoordsFromTsne(coordsArray);
                            this.setState({
                                coordsArray: coordsArray,
                                isComputing: false,
                                numIterations: this.state.numIterations + amount,
                                plotlyCoords: plotlyCoords,
                            });
                            _b.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
        };
        _this.onIterationToggle = function () { return function () {
            var isAnimating = !_this.state.isAnimating;
            if (isAnimating) {
                var animationFrame_1 = function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.onIterateForward(1)()];
                            case 1:
                                _a.sent();
                                if (this.state.isAnimating && this.state.numIterations < 500) {
                                    requestAnimationFrame(animationFrame_1);
                                }
                                else {
                                    this.setState({ isAnimating: false });
                                }
                                return [2 /*return*/];
                        }
                    });
                }); };
                requestAnimationFrame(animationFrame_1);
            }
            _this.setState({ isAnimating: isAnimating });
        }; };
        _this.onReset = function () { return function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.computeTensorTsne(0)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }; };
        _this.state = {
            coordsArray: [],
            isAnimating: false,
            isComputing: false,
            numIterations: 0,
            plotlyCoords: [],
        };
        return _this;
    }
    TensorTContainerClass.prototype.componentDidMount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tensorData, tsneData, tsne, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, helper_1.fetchTensorTSneCoordinateData("datasets/" + this.props.datasetLocation)];
                    case 1:
                        tensorData = _a.sent();
                        tsneData = tensorFlow.tensor(tensorData);
                        return [4 /*yield*/, Promise.resolve().then(function () { return __webpack_require__(/*! @tensorflow/tfjs-tsne */ "./node_modules/@tensorflow/tfjs-tsne/dist-es6/index.js"); })];
                    case 2:
                        tsne = (_a.sent()).tsne(tsneData);
                        this.setState({
                            tsne: tsne,
                        });
                        return [4 /*yield*/, this.computeTensorTsne(this.state.numIterations)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        console.log(e_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    TensorTContainerClass.prototype.componentDidUpdate = function (prevProps) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2, _a, springContext, tsne, _b, _c, _d, indices, _e, _f, node, _g, _h, _j;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        springContext = this.props.springContext;
                        tsne = this.state.tsne;
                        if (!(this.props.datasetLocation !== prevProps.datasetLocation)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.setupTensorData()];
                    case 1:
                        _k.sent();
                        return [3 /*break*/, 6];
                    case 2:
                        if (!tsne) return [3 /*break*/, 6];
                        if (!(springContext.currentCells !== prevProps.springContext.currentCells)) return [3 /*break*/, 4];
                        _b = this.setState;
                        _c = {};
                        _d = this.getPlotlyCoordsFromTsne;
                        return [4 /*yield*/, tsne.coordsArray()];
                    case 3:
                        _b.apply(this, [(_c.plotlyCoords = _d.apply(this, [_k.sent()]),
                                _c)]);
                        return [3 /*break*/, 6];
                    case 4:
                        if (!!lodash_1.isEqual(springContext.selectedLabels, prevProps.springContext.selectedLabels)) return [3 /*break*/, 6];
                        indices = new Array();
                        try {
                            for (_e = __values(springContext.graphData.nodes), _f = _e.next(); !_f.done; _f = _e.next()) {
                                node = _f.value;
                                if (springContext.selectedLabels.includes(node.labelForCategory[springContext.selectedCategory])) {
                                    indices.push(node.number);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        _g = this.setState;
                        _h = {};
                        _j = this.getPlotlyCoordsFromSpring;
                        return [4 /*yield*/, tsne.coordsArray()];
                    case 5:
                        _g.apply(this, [(_h.plotlyCoords = _j.apply(this, [_k.sent(), indices]),
                                _h)]);
                        _k.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    TensorTContainerClass.prototype.render = function () {
        var isFullPage = this.props.isFullPage;
        var plotlyCoords = this.state.plotlyCoords;
        return (React.createElement(component_1.ComponentCard, { componentName: TensorTContainerClass.displayName, iconSrc: 'assets/icons/tfjs-tsne-icon.png', isFullPage: isFullPage },
            React.createElement(semantic_ui_react_1.Grid, { centered: true, style: { height: '100%', marginLeft: 0, width: '100%' } },
                React.createElement(semantic_ui_react_1.Grid.Row, { columns: 'equal', style: { maxHeight: '23px', padding: '7px 0 0 0' } },
                    React.createElement(semantic_ui_react_1.Grid.Column, { floated: 'left' }, this.renderIterateButton()),
                    React.createElement(semantic_ui_react_1.Grid.Column, null, this.renderIterateLabel()),
                    React.createElement(semantic_ui_react_1.Grid.Column, { floated: 'right' }, this.renderResetButton())),
                React.createElement(semantic_ui_react_1.Grid.Row, { stretched: true, style: { height: '90%', margin: 0 } },
                    React.createElement(component_1.TensorTComponent, { onSelectedCallback: this.handlePointSelection, pointsToPlot: plotlyCoords })))));
    };
    TensorTContainerClass.prototype.computeTensorTsne = function (numIterations) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, isComputing, tsne, coordsArray, plotlyCoords;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.state, isComputing = _a.isComputing, tsne = _a.tsne;
                        if (!(tsne && !isComputing)) return [3 /*break*/, 3];
                        this.setState({
                            isComputing: true,
                        });
                        return [4 /*yield*/, tsne.compute(numIterations)];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, tsne.coordsArray()];
                    case 2:
                        coordsArray = _b.sent();
                        plotlyCoords = this.getPlotlyCoordsFromTsne(coordsArray);
                        this.setState({
                            coordsArray: coordsArray,
                            isComputing: false,
                            numIterations: numIterations,
                            plotlyCoords: plotlyCoords,
                        });
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    TensorTContainerClass.prototype.setupTensorData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tensorData, tsneData, tsne, numIterations, coordsArray, plotlyCoords, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.setState({
                            isAnimating: false,
                            isComputing: true,
                            plotlyCoords: [],
                            tsne: undefined,
                        });
                        return [4 /*yield*/, helper_1.fetchTensorTSneCoordinateData("datasets/" + this.props.datasetLocation)];
                    case 1:
                        tensorData = _a.sent();
                        tsneData = tensorFlow.tensor(tensorData);
                        tsne = new tsne_1.TSNE(tsneData);
                        numIterations = 0;
                        return [4 /*yield*/, tsne.compute(numIterations)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tsne.coordsArray()];
                    case 3:
                        coordsArray = _a.sent();
                        plotlyCoords = this.getPlotlyCoordsFromTsne(coordsArray);
                        this.setState({
                            coordsArray: coordsArray,
                            isComputing: false,
                            numIterations: numIterations,
                            plotlyCoords: plotlyCoords,
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        e_3 = _a.sent();
                        console.log(e_3);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    TensorTContainerClass.defaultProps = {
        datasetLocation: 'hpc/full',
        height: 400,
        isFullPage: false,
        pointColor: '#aa0000',
        springContext: __assign({}, context_1.initialSpringContext),
        style: {
            padding: 0,
        },
        width: 400,
    };
    TensorTContainerClass.displayName = 'tSNE - TensorFlow';
    return TensorTContainerClass;
}(React.Component));
exports.TensorTContainerClass = TensorTContainerClass;
exports.TensorTContainer = function (props) { return (React.createElement(context_1.SpringContext.Consumer, null, function (springContext) { return React.createElement(TensorTContainerClass, __assign({}, props, { springContext: springContext })); })); };


/***/ }),

/***/ "./src/container/VizPanelContainer.tsx":
/*!*********************************************!*\
  !*** ./src/container/VizPanelContainer.tsx ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var component_1 = __webpack_require__(/*! ~chell-viz~/component */ "./src/component/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var helper_1 = __webpack_require__(/*! ~chell-viz~/helper */ "./src/helper/index.ts");
exports.initialVizPanelState = {
    currentDataDir: '',
    data: new Object(),
};
var VizPanelContainer = /** @class */ (function (_super) {
    __extends(VizPanelContainer, _super);
    function VizPanelContainer(props) {
        var _this = _super.call(this, props) || this;
        _this.state = exports.initialVizPanelState;
        _this.renderFileUploadForm = function () { return (React.createElement(semantic_ui_react_1.Label, { as: "label", basic: true, htmlFor: 'upload' },
            React.createElement(semantic_ui_react_1.Button, { icon: 'upload', label: {
                    basic: true,
                    content: 'Upload',
                }, labelPosition: 'right' }),
            React.createElement("input", { id: 'upload', onChange: _this.onDataUpload, hidden: true, type: 'file', multiple: true, required: true }))); };
        _this.onDataUpload = function (e) { return __awaiter(_this, void 0, void 0, function () {
            var fileList, files, pdbIndex, mappingIndex_1, couplingIndex, pdbData, couplingResult, mappingResult, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fileList = e.target.files;
                        if (!fileList) return [3 /*break*/, 5];
                        files = Array.from(fileList);
                        pdbIndex = files.findIndex(function (file) { return file.name.endsWith('.pdb'); });
                        mappingIndex_1 = files.findIndex(function (file) { return file.name.localeCompare('residue_mapping.csv') === 0; });
                        couplingIndex = files.findIndex(function (file, index) { return file.name.endsWith('.csv') && index !== mappingIndex_1; });
                        if (!(pdbIndex === -1 || mappingIndex_1 === -1 || couplingIndex === -1)) return [3 /*break*/, 1];
                        alert('Incorrect files uploaded! Please upload a file named residue_mapping.csv as well as a .pdb and .csv file!');
                        return [3 /*break*/, 5];
                    case 1: return [4 /*yield*/, data_1.ChellPDB.createPDB(files[pdbIndex])];
                    case 2:
                        pdbData = _a.sent();
                        return [4 /*yield*/, helper_1.readFileAsText(files[couplingIndex])];
                    case 3:
                        couplingResult = _a.sent();
                        return [4 /*yield*/, helper_1.readFileAsText(files[mappingIndex_1])];
                    case 4:
                        mappingResult = _a.sent();
                        data = {
                            couplingScores: helper_1.getCouplingScoresData(couplingResult, helper_1.generateResidueMapping(mappingResult)),
                            pdbData: pdbData,
                            secondaryStructures: [],
                        };
                        this.setState({
                            data: __assign({}, this.state.data, { 'Contact Map': data, NGL: pdbData.nglStructure }),
                        });
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        _this.onDataDirChange = function (event, data) {
            _this.setState({
                currentDataDir: data.value,
            });
        };
        _this.state = __assign({}, _this.state, { currentDataDir: props.dataDirs[0] });
        return _this;
    }
    VizPanelContainer.prototype.componentDidMount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, results, _b, _c, viz, _d, _e, e_1_1;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        results = {};
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 6, 7, 8]);
                        _b = __values(this.props.supportedVisualizations), _c = _b.next();
                        _f.label = 2;
                    case 2:
                        if (!!_c.done) return [3 /*break*/, 5];
                        viz = _c.value;
                        _d = results;
                        _e = viz;
                        return [4 /*yield*/, helper_1.fetchAppropriateData(viz, this.state.currentDataDir)];
                    case 3:
                        _d[_e] = _f.sent();
                        _f.label = 4;
                    case 4:
                        _c = _b.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        this.setState({
                            data: __assign({}, results),
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    VizPanelContainer.prototype.componentDidUpdate = function (prevProps, prevState) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2, _a, results, _b, _c, viz, _d, _e, e_2_1;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (!(prevState.currentDataDir !== this.state.currentDataDir)) return [3 /*break*/, 9];
                        results = {};
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 6, 7, 8]);
                        _b = __values(this.props.supportedVisualizations), _c = _b.next();
                        _f.label = 2;
                    case 2:
                        if (!!_c.done) return [3 /*break*/, 5];
                        viz = _c.value;
                        _d = results;
                        _e = viz;
                        return [4 /*yield*/, helper_1.fetchAppropriateData(viz, this.state.currentDataDir)];
                    case 3:
                        _d[_e] = _f.sent();
                        _f.label = 4;
                    case 4:
                        _c = _b.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_2_1 = _f.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        this.setState({
                            data: __assign({}, results),
                        });
                        _f.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    VizPanelContainer.prototype.render = function () {
        var allowUploads = this.props.allowUploads;
        return (React.createElement(semantic_ui_react_1.Grid, { className: 'VizPanelContainer', columns: this.props.numPanels, centered: true, relaxed: true },
            React.createElement(semantic_ui_react_1.GridRow, { columns: 1, centered: true },
                React.createElement(semantic_ui_react_1.Dropdown, { className: 'viz-panel-container-dropdown', onChange: this.onDataDirChange, options: __spread(this.props.dataDirs.map(function (dir) {
                        return { key: dir, text: dir, value: dir };
                    })), placeholder: this.props.dataDirs[0], search: true })),
            this.renderPanels(this.props.numPanels, this.state.data, this.props.initialVisualizations).map(function (panel, index) { return (React.createElement(semantic_ui_react_1.GridColumn, { key: index }, panel)); }),
            allowUploads && this.renderFileUploadForm()));
    };
    VizPanelContainer.prototype.renderPanels = function (numPanels, data, initialVisualizations) {
        var result = [];
        for (var i = 0; i < numPanels; ++i) {
            result.push(React.createElement(component_1.VizSelectorPanel, { data: data, initialViz: initialVisualizations[i], supportedVisualizations: this.props.supportedVisualizations }));
        }
        return result;
    };
    VizPanelContainer.defaultProps = {
        allowUploads: true,
        initialVisualizations: [],
        /** Number of panels to be controlled by this container. Currently limited to 4. */
        numPanels: 1,
    };
    return VizPanelContainer;
}(React.Component));
exports.VizPanelContainer = VizPanelContainer;


/***/ }),

/***/ "./src/container/index.ts":
/*!********************************!*\
  !*** ./src/container/index.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./AnatomogramContainer */ "./src/container/AnatomogramContainer.tsx"));
__export(__webpack_require__(/*! ./ProteinFeatureViewer */ "./src/container/ProteinFeatureViewer.tsx"));
__export(__webpack_require__(/*! ./SpringContainer */ "./src/container/SpringContainer.tsx"));
__export(__webpack_require__(/*! ./SiteHeader */ "./src/container/SiteHeader.tsx"));
__export(__webpack_require__(/*! ./TensorTContainer */ "./src/container/TensorTContainer.tsx"));
__export(__webpack_require__(/*! ./VizPanelContainer */ "./src/container/VizPanelContainer.tsx"));


/***/ }),

/***/ "./src/context/ChellContextProvider.tsx":
/*!**********************************************!*\
  !*** ./src/context/ChellContextProvider.tsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
/**
 * Shorthand for passing all Chell contexts down.
 *
 * @export
 * @extends {React.Component<any, any>}
 */
var ChellContextProvider = /** @class */ (function (_super) {
    __extends(ChellContextProvider, _super);
    function ChellContextProvider(props) {
        return _super.call(this, props) || this;
    }
    ChellContextProvider.prototype.render = function () {
        var params = new URLSearchParams(this.props.location ? this.props.location.search : '');
        // tslint:disable-next-line:no-backbone-get-set-outside-model
        var datasetLocation = params.get('name');
        return (React.createElement(context_1.SecondaryStructureContextProvider, null,
            React.createElement(context_1.SpringContextProvider, { datasetLocation: datasetLocation ? datasetLocation : '' },
                React.createElement(context_1.ResidueContextProvider, null, this.props.children))));
    };
    return ChellContextProvider;
}(React.Component));
exports.ChellContextProvider = ChellContextProvider;


/***/ }),

/***/ "./src/context/CouplingContext.tsx":
/*!*****************************************!*\
  !*** ./src/context/CouplingContext.tsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var context_1 = __webpack_require__(/*! ~chell-viz~/context */ "./src/context/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
exports.initialCouplingContext = {
    couplingScores: new data_1.CouplingContainer(),
};
exports.CouplingContext = React.createContext(exports.initialCouplingContext);
exports.CouplingContextConsumer = exports.CouplingContext.Consumer;
/**
 * Shorthand for passing contexts relevant for Coupling Scores - Primarily interaction with residues and secondary structures.
 *
 * @export
 * @extends {React.Component<any, ICouplingContext>}
 */
var CouplingContextProvider = /** @class */ (function (_super) {
    __extends(CouplingContextProvider, _super);
    function CouplingContextProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.state = exports.initialCouplingContext;
        return _this;
    }
    CouplingContextProvider.prototype.render = function () {
        return (React.createElement(context_1.SecondaryStructureContextProvider, null,
            React.createElement(context_1.ResidueContextProvider, null,
                React.createElement(exports.CouplingContext.Provider, { value: this.state }, this.props.children))));
    };
    return CouplingContextProvider;
}(React.Component));
exports.CouplingContextProvider = CouplingContextProvider;


/***/ }),

/***/ "./src/context/GenericContextProvider.tsx":
/*!************************************************!*\
  !*** ./src/context/GenericContextProvider.tsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-classes-per-file
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
exports.createGenericContext = function (readValue, writeValue) {
    var readContext = React.createContext(readValue);
    var writeContext = React.createContext(writeValue);
    // tslint:disable-next-line:no-object-literal-type-assertion
    var bothContext = React.createContext(__assign({}, readValue, writeValue));
    var Consumers = {
        Both: bothContext.Consumer,
        Read: readContext.Consumer,
        Write: writeContext.Consumer,
    };
    var Providers = {
        Both: bothContext.Provider,
        Read: readContext.Provider,
        Write: writeContext.Provider,
    };
    var allConsumers = __spread(Object.values(Consumers));
    var allProviders = __spread(Object.values(Providers));
    return {
        Consumers: Consumers,
        Providers: Providers,
        allConsumers: allConsumers,
        allProviders: allProviders,
        allProvidersJSX: function (state, children) {
            // tslint:disable-next-line
            return allProviders.reduce(function (prev, Curr) { return React.createElement(Curr, { value: state }, prev); }, children);
        },
    };
};


/***/ }),

/***/ "./src/context/ResidueContext.tsx":
/*!****************************************!*\
  !*** ./src/context/ResidueContext.tsx ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
exports.initialResidueContext = {
    addCandidateResidues: function (residues) {
        return;
    },
    addHoveredResidues: function (residues) {
        return;
    },
    addLockedResiduePair: function (residues) {
        return;
    },
    candidateResidues: new Array(),
    clearAllResidues: function () {
        return;
    },
    hoveredResidues: new Array(),
    lockedResiduePairs: new Map(),
    removeAllLockedResiduePairs: function () {
        return;
    },
    removeCandidateResidues: function () {
        return;
    },
    removeHoveredResidues: function () {
        return;
    },
    removeLockedResiduePair: function (residues) {
        return;
    },
    removeNonLockedResidues: function () {
        return;
    },
    toggleLockedResiduePair: function (residues) {
        return;
    },
};
exports.ResidueContext = React.createContext(exports.initialResidueContext);
exports.ResidueContextConsumer = exports.ResidueContext.Consumer;
var ResidueContextProvider = /** @class */ (function (_super) {
    __extends(ResidueContextProvider, _super);
    function ResidueContextProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.onAddCandidateResidues = function (candidateResidues) {
            _this.setState({
                candidateResidues: candidateResidues.sort(),
            });
        };
        _this.onAddHoveredResidues = function (hoveredResidues) {
            _this.setState({
                hoveredResidues: hoveredResidues.sort(),
            });
        };
        _this.onAddLockedResiduePair = function (residues) {
            var lockedResiduePairs = _this.state.lockedResiduePairs;
            var sortedResidues = residues.sort();
            var residuePairKey = sortedResidues.toString();
            if (!lockedResiduePairs.has(residuePairKey)) {
                var result = new Map(lockedResiduePairs);
                result.set(residuePairKey, sortedResidues);
                _this.setState({
                    lockedResiduePairs: result,
                });
            }
        };
        _this.onClearAllResidues = function () {
            _this.setState({
                candidateResidues: new Array(),
                hoveredResidues: new Array(),
                lockedResiduePairs: new Map(),
            });
        };
        _this.onRemoveAllLockedResiduePairs = function () {
            _this.setState({
                lockedResiduePairs: new Map(),
            });
        };
        _this.onRemoveCandidateResidue = function () {
            _this.setState({
                candidateResidues: new Array(),
            });
        };
        _this.onRemoveHoveredResidues = function () {
            _this.setState({
                hoveredResidues: new Array(),
            });
        };
        _this.onRemoveLockedResiduePair = function (residues) {
            var residuePairKey = residues.sort().join(',');
            var lockedResiduePairs = _this.state.lockedResiduePairs;
            if (lockedResiduePairs.has(residuePairKey)) {
                var result = new Map(lockedResiduePairs);
                result.delete(residuePairKey);
                _this.setState({
                    lockedResiduePairs: result,
                });
            }
        };
        _this.onRemoveNonLockedResidues = function () {
            _this.setState({
                candidateResidues: new Array(),
                hoveredResidues: new Array(),
            });
        };
        _this.onToggleLockedResiduePair = function (residues) {
            var lockedResiduePairs = _this.state.lockedResiduePairs;
            var sortedResidues = residues.sort();
            var residuePairKey = sortedResidues.toString();
            var result = new Map(lockedResiduePairs);
            if (!lockedResiduePairs.has(residuePairKey)) {
                result.set(residuePairKey, sortedResidues);
            }
            else {
                result.delete(residuePairKey);
            }
            _this.setState({
                lockedResiduePairs: result,
            });
        };
        _this.state = __assign({}, exports.initialResidueContext, { addCandidateResidues: _this.onAddCandidateResidues, addHoveredResidues: _this.onAddHoveredResidues, addLockedResiduePair: _this.onAddLockedResiduePair, clearAllResidues: _this.onClearAllResidues, removeAllLockedResiduePairs: _this.onRemoveAllLockedResiduePairs, removeCandidateResidues: _this.onRemoveCandidateResidue, removeHoveredResidues: _this.onRemoveHoveredResidues, removeLockedResiduePair: _this.onRemoveLockedResiduePair, removeNonLockedResidues: _this.onRemoveNonLockedResidues, toggleLockedResiduePair: _this.onToggleLockedResiduePair });
        return _this;
    }
    ResidueContextProvider.prototype.render = function () {
        return React.createElement(exports.ResidueContext.Provider, { value: this.state }, this.props.children);
    };
    return ResidueContextProvider;
}(React.Component));
exports.ResidueContextProvider = ResidueContextProvider;


/***/ }),

/***/ "./src/context/SecondaryStructureContext.tsx":
/*!***************************************************!*\
  !*** ./src/context/SecondaryStructureContext.tsx ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-classes-per-file
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
exports.initialSecondaryStructContextRead = {
    hoveredSecondaryStructures: new Array(),
    selectedSecondaryStructures: new Array(),
};
exports.initialSecondaryStructContextWrite = {
    addHoveredSecondaryStructure: function (section) {
        return;
    },
    addSelectedSecondaryStructure: function (section) {
        return;
    },
    clearAllSecondaryStructures: function () {
        return;
    },
    removeHoveredSecondaryStructure: function (section) {
        return;
    },
    removeSecondaryStructure: function (section) {
        return;
    },
};
exports.initialSecondaryStructureContext = __assign({}, exports.initialSecondaryStructContextWrite, exports.initialSecondaryStructContextRead);
exports.SecondaryStructureContextRead = React.createContext(exports.initialSecondaryStructContextRead);
exports.SecondaryStructureContextWrite = React.createContext(exports.initialSecondaryStructContextWrite);
exports.SecondaryStructureContext = React.createContext(exports.initialSecondaryStructureContext);
exports.SecondaryStructureContextReadConsumer = exports.SecondaryStructureContextRead.Consumer;
exports.SecondaryStructureContextWriteConsumer = exports.SecondaryStructureContextWrite.Consumer;
exports.SecondaryStructureContextConsumer = exports.SecondaryStructureContext.Consumer;
var SecondaryStructureContextProvider = /** @class */ (function (_super) {
    __extends(SecondaryStructureContextProvider, _super);
    function SecondaryStructureContextProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.onAddHoveredSecondaryStructure = function () { return function (section) {
            if (!_this.state.hoveredSecondaryStructures.includes(section)) {
                _this.setState({
                    hoveredSecondaryStructures: __spread(_this.state.hoveredSecondaryStructures, [section]),
                });
            }
        }; };
        _this.onAddSelectedSecondaryStructure = function () { return function (section) {
            if (!_this.state.selectedSecondaryStructures.includes(section)) {
                _this.setState({
                    selectedSecondaryStructures: __spread(_this.state.selectedSecondaryStructures, [section]),
                });
            }
        }; };
        _this.onClearSecondaryStructure = function () { return function () {
            _this.setState({
                hoveredSecondaryStructures: new Array(),
                selectedSecondaryStructures: new Array(),
            });
        }; };
        _this.onRemoveHoveredSecondaryStructure = function () { return function (sectionToRemove) {
            var prevIndex = _this.state.hoveredSecondaryStructures.findIndex(function (section) {
                return section.label === sectionToRemove.label &&
                    section.start === sectionToRemove.start &&
                    section.end === sectionToRemove.end;
            });
            _this.setState({
                hoveredSecondaryStructures: __spread(_this.state.hoveredSecondaryStructures.splice(0, prevIndex), _this.state.hoveredSecondaryStructures.splice(prevIndex + 1)),
            });
        }; };
        _this.onRemoveSecondaryStructure = function () { return function (sectionToRemove) {
            var prevSelectedIndex = _this.state.selectedSecondaryStructures.findIndex(function (section) {
                return section.label === sectionToRemove.label &&
                    section.start === sectionToRemove.start &&
                    section.end === sectionToRemove.end;
            });
            var prevHoveredIndex = _this.state.hoveredSecondaryStructures.findIndex(function (section) {
                return section.label === sectionToRemove.label &&
                    section.start === sectionToRemove.start &&
                    section.end === sectionToRemove.end;
            });
            _this.setState({
                hoveredSecondaryStructures: __spread(_this.state.hoveredSecondaryStructures.splice(0, prevHoveredIndex), _this.state.hoveredSecondaryStructures.splice(prevHoveredIndex + 1)),
                selectedSecondaryStructures: __spread(_this.state.selectedSecondaryStructures.splice(0, prevSelectedIndex), _this.state.selectedSecondaryStructures.splice(prevSelectedIndex + 1)),
            });
        }; };
        _this.state = {
            addHoveredSecondaryStructure: _this.onAddHoveredSecondaryStructure(),
            addSelectedSecondaryStructure: _this.onAddSelectedSecondaryStructure(),
            clearAllSecondaryStructures: _this.onClearSecondaryStructure(),
            hoveredSecondaryStructures: new Array(),
            removeHoveredSecondaryStructure: _this.onRemoveHoveredSecondaryStructure(),
            removeSecondaryStructure: _this.onRemoveSecondaryStructure(),
            selectedSecondaryStructures: new Array(),
        };
        return _this;
    }
    SecondaryStructureContextProvider.prototype.render = function () {
        return (React.createElement(exports.SecondaryStructureContextRead.Provider, { value: this.state },
            React.createElement(exports.SecondaryStructureContextWrite.Provider, { value: this.state },
                React.createElement(exports.SecondaryStructureContext.Provider, { value: this.state }, this.props.children))));
    };
    return SecondaryStructureContextProvider;
}(React.Component));
exports.SecondaryStructureContextProvider = SecondaryStructureContextProvider;


/***/ }),

/***/ "./src/context/SpringContext.tsx":
/*!***************************************!*\
  !*** ./src/context/SpringContext.tsx ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = __webpack_require__(/*! immutable */ "./node_modules/immutable/dist/immutable.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var helper_1 = __webpack_require__(/*! ~chell-viz~/helper */ "./src/helper/index.ts");
exports.initialSpringContext = {
    addLabel: function (label) {
        return;
    },
    addLabels: function (labels) {
        return;
    },
    categories: immutable_1.Set(),
    changeCategory: function (selectedCategory) {
        return;
    },
    currentCells: immutable_1.Set(),
    graphData: { nodes: new Array() },
    labelsByCategory: new Map(),
    removeAllCells: function () {
        return;
    },
    removeCells: function (cells) {
        return;
    },
    removeLabel: function (label) {
        return;
    },
    removeLabels: function (labels) {
        return;
    },
    selectedCategory: '',
    selectedLabels: immutable_1.Set(),
    setCells: function (cells) {
        return;
    },
    toggleLabels: function (labels) {
        return;
    },
    update: function (cells, selectedCategory, label) {
        return;
    },
};
exports.SpringContext = React.createContext(exports.initialSpringContext);
var SpringContextProvider = /** @class */ (function (_super) {
    __extends(SpringContextProvider, _super);
    function SpringContextProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.deriveCurrentCellsFromLabels = function (selectedLabels) {
            var e_1, _a;
            var _b = _this.state, categories = _b.categories, graphData = _b.graphData, labelsByCategory = _b.labelsByCategory;
            var validCategories = immutable_1.Set();
            selectedLabels.forEach(function (label) {
                if (label) {
                    categories.forEach(function (category) {
                        if (category) {
                            var labels = labelsByCategory.get(category);
                            if (labels && labels.includes(label)) {
                                validCategories = validCategories.add(category);
                            }
                        }
                    });
                }
            });
            var cellIndices = immutable_1.Set();
            var _loop_1 = function (node) {
                validCategories.forEach(function (category) {
                    if (category && selectedLabels.includes(node.labelForCategory[category])) {
                        cellIndices = cellIndices.add(node.number);
                        return;
                    }
                });
            };
            try {
                for (var _c = __values(graphData.nodes), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var node = _d.value;
                    _loop_1(node);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return cellIndices;
        };
        _this.deriveValidLabelsFromCells = function (currentCells) {
            var e_2, _a, e_3, _b;
            var _c = _this.state, categories = _c.categories, graphData = _c.graphData;
            var result = immutable_1.Set();
            try {
                for (var currentCells_1 = __values(currentCells), currentCells_1_1 = currentCells_1.next(); !currentCells_1_1.done; currentCells_1_1 = currentCells_1.next()) {
                    var cellIndex = currentCells_1_1.value;
                    try {
                        for (var _d = __values(categories.toArray()), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var category = _e.value;
                            result = result.add(graphData.nodes[cellIndex].labelForCategory[category]);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (currentCells_1_1 && !currentCells_1_1.done && (_a = currentCells_1.return)) _a.call(currentCells_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return result;
        };
        _this.onAddLabel = function (label) {
            var selectedLabels = _this.state.selectedLabels;
            if (!selectedLabels.includes(label)) {
                _this.setState({
                    selectedLabels: selectedLabels.add(label),
                });
            }
        };
        _this.onAddLabels = function (labels) {
            var e_4, _a;
            var selectedLabels = _this.state.selectedLabels;
            try {
                for (var labels_1 = __values(labels), labels_1_1 = labels_1.next(); !labels_1_1.done; labels_1_1 = labels_1.next()) {
                    var label = labels_1_1.value;
                    if (!selectedLabels.includes(label)) {
                        selectedLabels = selectedLabels.add(label);
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (labels_1_1 && !labels_1_1.done && (_a = labels_1.return)) _a.call(labels_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
            _this.setState({ selectedLabels: selectedLabels });
        };
        _this.onChangeCategory = function (selectedCategory) {
            _this.setState({
                selectedCategory: selectedCategory,
            });
        };
        _this.onRemoveAllCells = function () {
            _this.setState({
                currentCells: immutable_1.Set(),
            });
        };
        _this.onRemoveCells = function (cellsToRemove) {
            var currentCells = _this.state.currentCells;
            _this.setState({
                currentCells: immutable_1.Set(currentCells.filter(function (cell) { return cell !== undefined && !cellsToRemove.includes(cell); })),
            });
        };
        _this.onRemoveLabel = function (label) {
            var selectedLabels = _this.state.selectedLabels;
            _this.setState({
                selectedLabels: selectedLabels.remove(label),
            });
        };
        _this.onRemoveLabels = function (labels) {
            var e_5, _a;
            var selectedLabels = _this.state.selectedLabels;
            try {
                for (var labels_2 = __values(labels), labels_2_1 = labels_2.next(); !labels_2_1.done; labels_2_1 = labels_2.next()) {
                    var label = labels_2_1.value;
                    selectedLabels = selectedLabels.remove(label);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (labels_2_1 && !labels_2_1.done && (_a = labels_2.return)) _a.call(labels_2);
                }
                finally { if (e_5) throw e_5.error; }
            }
            _this.setState({
                selectedLabels: selectedLabels,
            });
        };
        _this.onSetCells = function (cells) {
            _this.setState({
                currentCells: immutable_1.Set(cells),
            });
        };
        _this.onToggleLabels = function (labels) {
            var e_6, _a;
            var selectedLabels = _this.state.selectedLabels;
            try {
                for (var labels_3 = __values(labels), labels_3_1 = labels_3.next(); !labels_3_1.done; labels_3_1 = labels_3.next()) {
                    var label = labels_3_1.value;
                    selectedLabels = selectedLabels.includes(label) ? selectedLabels.remove(label) : selectedLabels.add(label);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (labels_3_1 && !labels_3_1.done && (_a = labels_3.return)) _a.call(labels_3);
                }
                finally { if (e_6) throw e_6.error; }
            }
            _this.setState({
                currentCells: _this.deriveCurrentCellsFromLabels(selectedLabels),
                selectedLabels: selectedLabels,
            });
        };
        _this.onUpdate = function (currentCells, selectedCategory) {
            _this.setState({
                currentCells: immutable_1.Set(currentCells),
                selectedCategory: selectedCategory ? selectedCategory : _this.state.selectedCategory,
                selectedLabels: _this.deriveValidLabelsFromCells(currentCells),
            });
        };
        _this.state = __assign({}, exports.initialSpringContext, { addLabel: _this.onAddLabel, addLabels: _this.onAddLabels, changeCategory: _this.onChangeCategory, removeAllCells: _this.onRemoveAllCells, removeCells: _this.onRemoveCells, removeLabel: _this.onRemoveLabel, removeLabels: _this.onRemoveLabels, setCells: _this.onSetCells, toggleLabels: _this.onToggleLabels, update: _this.onUpdate });
        return _this;
    }
    SpringContextProvider.prototype.componentDidMount = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setupData()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SpringContextProvider.prototype.componentDidUpdate = function (prevProps) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.props.datasetLocation !== prevProps.datasetLocation)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.setupData()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    SpringContextProvider.prototype.render = function () {
        return React.createElement(exports.SpringContext.Provider, { value: this.state }, this.props.children);
    };
    SpringContextProvider.prototype.setupData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var graphData_1, categories, labelsByCategory_1, e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, helper_1.fetchSpringData("assets/datasets/" + this.props.datasetLocation)];
                    case 1:
                        graphData_1 = _a.sent();
                        categories = immutable_1.Set(graphData_1.nodes.length >= 1 ? Object.keys(graphData_1.nodes[0].labelForCategory) : []);
                        labelsByCategory_1 = new Map();
                        categories.forEach(function (category) {
                            if (category) {
                                var labels = immutable_1.Set(Array.from(graphData_1.nodes.map(function (node) { return node.labelForCategory[category]; })));
                                labelsByCategory_1.set(category, labels);
                            }
                        });
                        this.setState({
                            categories: categories,
                            graphData: graphData_1,
                            labelsByCategory: labelsByCategory_1,
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        e_7 = _a.sent();
                        console.log(e_7);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return SpringContextProvider;
}(React.Component));
exports.SpringContextProvider = SpringContextProvider;


/***/ }),

/***/ "./src/context/index.ts":
/*!******************************!*\
  !*** ./src/context/index.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./ChellContextProvider */ "./src/context/ChellContextProvider.tsx"));
__export(__webpack_require__(/*! ./CouplingContext */ "./src/context/CouplingContext.tsx"));
__export(__webpack_require__(/*! ./GenericContextProvider */ "./src/context/GenericContextProvider.tsx"));
__export(__webpack_require__(/*! ./ResidueContext */ "./src/context/ResidueContext.tsx"));
__export(__webpack_require__(/*! ./SecondaryStructureContext */ "./src/context/SecondaryStructureContext.tsx"));
__export(__webpack_require__(/*! ./SpringContext */ "./src/context/SpringContext.tsx"));


/***/ }),

/***/ "./src/data/AminoAcid.ts":
/*!*******************************!*\
  !*** ./src/data/AminoAcid.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Ala = { fullName: 'Alanine', singleLetterCode: 'A', threeLetterCode: 'ALA' };
var Arg = { fullName: 'Arginine', singleLetterCode: 'R', threeLetterCode: 'ARG' };
var Asn = { fullName: 'Asparagine', singleLetterCode: 'N', threeLetterCode: 'ASN' };
var Asp = { fullName: 'Aspartic Acid', singleLetterCode: 'D', threeLetterCode: 'ASP' };
var Cys = { fullName: 'Cysteine', singleLetterCode: 'C', threeLetterCode: 'CYS' };
var Gln = { fullName: 'Glutamine', singleLetterCode: 'Q', threeLetterCode: 'GLN' };
var Glu = { fullName: 'Glutamic Acid', singleLetterCode: 'E', threeLetterCode: 'GLU' };
var Gly = { fullName: 'Glycine', singleLetterCode: 'G', threeLetterCode: 'GLY' };
var His = { fullName: 'Histidine', singleLetterCode: 'H', threeLetterCode: 'HIS' };
var Ile = { fullName: 'Isoleucine', singleLetterCode: 'I', threeLetterCode: 'ILE' };
var Leu = { fullName: 'Leucine', singleLetterCode: 'L', threeLetterCode: 'LEU' };
var Lys = { fullName: 'Lysine', singleLetterCode: 'K', threeLetterCode: 'LYS' };
var Met = { fullName: 'Methionine', singleLetterCode: 'M', threeLetterCode: 'MET' };
var Phe = { fullName: 'Phenylalanine', singleLetterCode: 'F', threeLetterCode: 'PHE' };
var Pro = { fullName: 'Proline', singleLetterCode: 'P', threeLetterCode: 'PRO' };
var Ser = { fullName: 'Serine', singleLetterCode: 'S', threeLetterCode: 'SER' };
var Thr = { fullName: 'Threonine', singleLetterCode: 'T', threeLetterCode: 'THR' };
var Trp = { fullName: 'Tryptophan', singleLetterCode: 'W', threeLetterCode: 'TRP' };
var Tyr = { fullName: 'Tyrosine', singleLetterCode: 'Y', threeLetterCode: 'TYR' };
var Val = { fullName: 'Valine', singleLetterCode: 'V', threeLetterCode: 'VAL' };
// tslint:disable:object-literal-sort-keys
exports.AMINO_ACIDS_BY_SINGLE_LETTER_CODE = {
    A: Ala,
    R: Arg,
    N: Asn,
    D: Asp,
    C: Cys,
    Q: Gln,
    E: Glu,
    G: Gly,
    H: His,
    I: Ile,
    L: Leu,
    K: Lys,
    M: Met,
    F: Phe,
    P: Pro,
    S: Ser,
    T: Thr,
    W: Trp,
    Y: Tyr,
    V: Val,
};
// tslint:enable:object-literal-sort-keys
exports.AMINO_ACIDS_BY_THREE_LETTER_CODE = {
    ALA: Ala,
    ARG: Arg,
    ASN: Asn,
    ASP: Asp,
    CYS: Cys,
    GLN: Gln,
    GLU: Glu,
    GLY: Gly,
    HIS: His,
    ILE: Ile,
    LEU: Leu,
    LYS: Lys,
    MET: Met,
    PHE: Phe,
    PRO: Pro,
    SER: Ser,
    THR: Thr,
    TRP: Trp,
    TYR: Tyr,
    VAL: Val,
};
exports.AMINO_ACIDS = [
    Ala,
    Arg,
    Asn,
    Asp,
    Cys,
    Gln,
    Glu,
    Gly,
    His,
    Ile,
    Leu,
    Lys,
    Met,
    Phe,
    Pro,
    Ser,
    Thr,
    Trp,
    Tyr,
    Val,
];
exports.getPDBAndCouplingMismatch = function (pdbData, couplingScores) {
    var pdbSequence = pdbData.sequence;
    var couplingSequence = couplingScores.sequence;
    var mismatches = exports.getSequenceMismatch(pdbSequence, couplingSequence);
    if (mismatches.length === 0) {
        return pdbData.getResidueNumberingMismatches(couplingScores);
    }
    return mismatches;
};
exports.getSequenceMismatch = function (firstSequence, secondSequence) {
    var mismatches = new Array();
    if (firstSequence.length === secondSequence.length) {
        for (var i = 0; i < firstSequence.length; ++i) {
            var couplingAminoAcid = firstSequence[i];
            var pdbAminoAcid = secondSequence[i];
            if (couplingAminoAcid !== pdbAminoAcid) {
                mismatches.push({
                    firstAminoAcid: exports.AMINO_ACIDS_BY_SINGLE_LETTER_CODE[couplingAminoAcid],
                    resno: i,
                    secondAminoAcid: exports.AMINO_ACIDS_BY_SINGLE_LETTER_CODE[pdbAminoAcid],
                });
            }
        }
    }
    return mismatches;
};


/***/ }),

/***/ "./src/data/Chell1DSection.ts":
/*!************************************!*\
  !*** ./src/data/Chell1DSection.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Class to encapsulate a 1 Dimensional data segment.
 * This is defined as a numerical range with inclusive start, inclusive end, and label associated with it.
 * Additionally, a Section is defined such that [start <= end] - meaning values will be flipped to keep this constraint.
 *
 * @export
 */
var Chell1DSection = /** @class */ (function () {
    function Chell1DSection(label, start, end) {
        if (end === void 0) { end = start; }
        this.label = label;
        this.sectionEnd = 0;
        this.sectionStart = 0;
        this.sectionEnd = Math.max(end, start);
        this.sectionStart = Math.min(start, end);
    }
    Object.defineProperty(Chell1DSection.prototype, "end", {
        get: function () {
            return this.sectionEnd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chell1DSection.prototype, "length", {
        get: function () {
            return this.sectionEnd - this.sectionStart + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chell1DSection.prototype, "start", {
        get: function () {
            return this.sectionStart;
        },
        enumerable: true,
        configurable: true
    });
    Chell1DSection.prototype.contains = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var e_1, _a;
        try {
            for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                var value = values_1_1.value;
                if (value < this.sectionStart || value > this.sectionEnd || value === undefined) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
    };
    Chell1DSection.prototype.updateStart = function (newNum) {
        if (newNum > this.sectionEnd) {
            this.sectionStart = this.sectionEnd;
            this.sectionEnd = newNum;
        }
        else {
            this.sectionStart = newNum;
        }
    };
    Chell1DSection.prototype.updateEnd = function (newNum) {
        if (newNum < this.sectionStart) {
            this.sectionEnd = this.sectionStart;
            this.sectionStart = newNum;
        }
        else {
            this.sectionEnd = newNum;
        }
    };
    return Chell1DSection;
}());
exports.Chell1DSection = Chell1DSection;


/***/ }),

/***/ "./src/data/ChellConfig.ts":
/*!*********************************!*\
  !*** ./src/data/ChellConfig.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CONFIGURATION_COMPONENT_TYPE;
(function (CONFIGURATION_COMPONENT_TYPE) {
    CONFIGURATION_COMPONENT_TYPE["BUTTON"] = "BUTTON";
    CONFIGURATION_COMPONENT_TYPE["LABEL"] = "LABEL";
    CONFIGURATION_COMPONENT_TYPE["RADIO"] = "RADIO";
    CONFIGURATION_COMPONENT_TYPE["SLIDER"] = "SLIDER";
})(CONFIGURATION_COMPONENT_TYPE = exports.CONFIGURATION_COMPONENT_TYPE || (exports.CONFIGURATION_COMPONENT_TYPE = {}));


/***/ }),

/***/ "./src/data/ChellData.ts":
/*!*******************************!*\
  !*** ./src/data/ChellData.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VIZ_TYPE;
(function (VIZ_TYPE) {
    VIZ_TYPE["CONTACT_MAP"] = "Contact Map";
    VIZ_TYPE["INFO_PANEL"] = "Info Panel";
    VIZ_TYPE["NGL"] = "NGL";
    VIZ_TYPE["SPRING"] = "Spring";
    VIZ_TYPE["TENSOR-T-SNE"] = "TENSOR-T-SNE";
    VIZ_TYPE["T-SNE"] = "T-SNE";
    VIZ_TYPE["T-SNE-FRAME"] = "T-SNE-FRAME";
})(VIZ_TYPE = exports.VIZ_TYPE || (exports.VIZ_TYPE = {}));
var CONTACT_DISTANCE_PROXIMITY;
(function (CONTACT_DISTANCE_PROXIMITY) {
    CONTACT_DISTANCE_PROXIMITY["CLOSEST"] = "CLOSEST";
    CONTACT_DISTANCE_PROXIMITY["C_ALPHA"] = "C-\u03B1";
})(CONTACT_DISTANCE_PROXIMITY = exports.CONTACT_DISTANCE_PROXIMITY || (exports.CONTACT_DISTANCE_PROXIMITY = {}));
var SECONDARY_STRUCTURE_CODES;
(function (SECONDARY_STRUCTURE_CODES) {
    SECONDARY_STRUCTURE_CODES["G"] = "310_HELIX";
    SECONDARY_STRUCTURE_CODES["H"] = "ALPHA_HELIX";
    SECONDARY_STRUCTURE_CODES["I"] = "PI_HELIX";
    SECONDARY_STRUCTURE_CODES["T"] = "HYDROGEN_BONDED_TURN";
    SECONDARY_STRUCTURE_CODES["E"] = "BETA_SHEET";
    SECONDARY_STRUCTURE_CODES["B"] = "BETA_BRIDGE";
    SECONDARY_STRUCTURE_CODES["S"] = "BEND";
    SECONDARY_STRUCTURE_CODES["C"] = "COIL";
})(SECONDARY_STRUCTURE_CODES = exports.SECONDARY_STRUCTURE_CODES || (exports.SECONDARY_STRUCTURE_CODES = {}));
var CHELL_CHART_EVENT_TYPE;
(function (CHELL_CHART_EVENT_TYPE) {
    CHELL_CHART_EVENT_TYPE[CHELL_CHART_EVENT_TYPE["AFTER_PLOT"] = 0] = "AFTER_PLOT";
    CHELL_CHART_EVENT_TYPE[CHELL_CHART_EVENT_TYPE["CLICK"] = 1] = "CLICK";
    CHELL_CHART_EVENT_TYPE[CHELL_CHART_EVENT_TYPE["DOUBLE_CLICK"] = 2] = "DOUBLE_CLICK";
    CHELL_CHART_EVENT_TYPE[CHELL_CHART_EVENT_TYPE["HOVER"] = 3] = "HOVER";
    CHELL_CHART_EVENT_TYPE[CHELL_CHART_EVENT_TYPE["RELAYOUT"] = 4] = "RELAYOUT";
    CHELL_CHART_EVENT_TYPE[CHELL_CHART_EVENT_TYPE["SELECTION"] = 5] = "SELECTION";
    CHELL_CHART_EVENT_TYPE[CHELL_CHART_EVENT_TYPE["UNHOVER"] = 6] = "UNHOVER";
})(CHELL_CHART_EVENT_TYPE = exports.CHELL_CHART_EVENT_TYPE || (exports.CHELL_CHART_EVENT_TYPE = {}));
var CHELL_CHART_PIECE;
(function (CHELL_CHART_PIECE) {
    CHELL_CHART_PIECE[CHELL_CHART_PIECE["AXIS"] = 0] = "AXIS";
    CHELL_CHART_PIECE[CHELL_CHART_PIECE["POINT"] = 1] = "POINT";
})(CHELL_CHART_PIECE = exports.CHELL_CHART_PIECE || (exports.CHELL_CHART_PIECE = {}));


/***/ }),

/***/ "./src/data/ChellPDB.ts":
/*!******************************!*\
  !*** ./src/data/ChellPDB.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var NGL = __webpack_require__(/*! ngl */ "./node_modules/ngl/dist/ngl.esm.js");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
/**
 * A ChellPDB instance provides an API to interact with a loaded PDB file while hiding the implementation details of how it is loaded.
 *
 * @export
 */
var ChellPDB = /** @class */ (function () {
    function ChellPDB() {
        this.fileName = '';
        this.nglData = new NGL.Structure();
    }
    ChellPDB.createEmptyPDB = function () {
        return new ChellPDB();
    };
    /**
     * Creates an instance of ChellPDB with PDB data.
     *
     * !IMPORTANT! Since fetching the data is an asynchronous action, this must be used to create a new instance!
     */
    ChellPDB.createPDB = function (file) {
        if (file === void 0) { file = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var result, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        result = new ChellPDB();
                        _a = result;
                        return [4 /*yield*/, NGL.autoLoad(file)];
                    case 1:
                        _a.nglData = (_b.sent());
                        result.fileName = typeof file === 'string' ? file : file.name;
                        return [2 /*return*/, result];
                }
            });
        });
    };
    ChellPDB.createPDBFromNGLData = function (nglData) {
        var result = new ChellPDB();
        result.nglData = nglData;
        return result;
    };
    Object.defineProperty(ChellPDB.prototype, "contactInformation", {
        get: function () {
            var _this = this;
            if (!this.contactInfo) {
                var result_1 = new data_1.CouplingContainer();
                this.nglData.eachResidue(function (outerResidue) {
                    if (outerResidue.isProtein()) {
                        var i_1 = outerResidue.resno;
                        _this.nglData.eachResidue(function (innerResidue) {
                            var j = innerResidue.resno;
                            if (innerResidue.isProtein() && i_1 !== j) {
                                result_1.addCouplingScore({
                                    dist: _this.getMinDistBetweenResidues(i_1, j).dist,
                                    i: i_1,
                                    j: j,
                                });
                            }
                        });
                    }
                });
                this.contactInfo = result_1;
            }
            return this.contactInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChellPDB.prototype, "nglStructure", {
        get: function () {
            return this.nglData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChellPDB.prototype, "secondaryStructure", {
        get: function () {
            var result = new Array();
            this.nglData.eachResidue(function (residue) {
                if (residue.isProtein()) {
                    var structId = 'C';
                    if (residue.isSheet()) {
                        structId = 'E';
                    }
                    else if (residue.isHelix()) {
                        structId = 'H';
                    }
                    else if (residue.isTurn()) {
                        return;
                    }
                    result.push({ resno: residue.resno, structId: structId });
                }
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChellPDB.prototype, "secondaryStructureSections", {
        get: function () {
            var result = new Array();
            this.nglData.eachResidue(function (residue) {
                if (residue.isProtein()) {
                    var chainIndex = residue.chainIndex;
                    while (!result[chainIndex]) {
                        result.push(new Array());
                    }
                    var structId = 'C';
                    if (residue.isSheet()) {
                        structId = 'E';
                    }
                    else if (residue.isHelix()) {
                        structId = 'H';
                    }
                    if (result[chainIndex].length >= 1 && result[chainIndex][result[chainIndex].length - 1].label === structId) {
                        result[chainIndex][result[chainIndex].length - 1].updateEnd(residue.resno);
                    }
                    else {
                        result[chainIndex].push(new data_1.Chell1DSection(structId, residue.resno));
                    }
                }
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChellPDB.prototype, "name", {
        get: function () {
            var splitName = this.fileName.split('/');
            var lastPart = splitName[splitName.length - 1];
            return lastPart.slice(0, lastPart.lastIndexOf('.'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChellPDB.prototype, "sequence", {
        get: function () {
            return this.nglData ? this.nglData.getSequence().join('') : '';
        },
        enumerable: true,
        configurable: true
    });
    ChellPDB.prototype.eachResidue = function (callback) {
        this.nglData.eachResidue(callback);
    };
    /**
     * Given some existing coupling scores, a new CouplingContainer will be created with data augmented with info derived from this PDB.
     *
     * @param couplingScores A collection of coupling scores to be augmented.
     * @param measuredProximity How to calculate the distance between two residues.
     * @returns A CouplingContainer with contact information from both the original array and this PDB file.
     */
    ChellPDB.prototype.amendPDBWithCouplingScores = function (couplingScores, measuredProximity) {
        var _this = this;
        var result = new data_1.CouplingContainer(couplingScores);
        var alphaId = this.nglData.atomMap.dict[ChellPDB.NGL_C_ALPHA_INDEX];
        var minDist = {};
        this.nglData.eachResidue(function (outerResidue) {
            _this.nglData.eachResidue(function (innerResidue) {
                if (outerResidue.isProtein() && innerResidue.isProtein()) {
                    if (measuredProximity === data_1.CONTACT_DISTANCE_PROXIMITY.C_ALPHA) {
                        var firstResidueCAlphaIndex = _this.getCAlphaAtomIndexFromResidue(outerResidue.index, alphaId);
                        var secondResidueCAlphaIndex = _this.getCAlphaAtomIndexFromResidue(innerResidue.index, alphaId);
                        result.addCouplingScore({
                            dist: _this.nglData
                                .getAtomProxy(firstResidueCAlphaIndex)
                                .distanceTo(_this.nglData.getAtomProxy(secondResidueCAlphaIndex)),
                            i: outerResidue.resno,
                            j: innerResidue.resno,
                        });
                    }
                    else {
                        var key = Math.min(outerResidue.resno, innerResidue.resno) + "," + Math.max(outerResidue.resno, innerResidue.resno);
                        if (!minDist[key]) {
                            minDist[key] = _this.getMinDistBetweenResidueIndices(outerResidue.index, innerResidue.index).dist;
                        }
                        result.addCouplingScore({
                            dist: minDist[key],
                            i: outerResidue.resno,
                            j: innerResidue.resno,
                        });
                    }
                }
            });
        });
        this.contactInfo = result;
        return this.contactInfo;
    };
    /**
     * Find the index of the c-alpha atom for a given residue.
     *
     * @param residueIndex Index of the residue to find the c-alpha atom for.
     * @param alphaId Index that determines if an atom is a c-alpha.
     * @returns Index of the c-alpha atom with respect to the array of all of the atoms.
     */
    ChellPDB.prototype.getCAlphaAtomIndexFromResidue = function (residueIndex, alphaId) {
        var residueStore = this.nglData.residueStore;
        var atomOffset = residueStore.atomOffset[residueIndex];
        var atomCount = residueStore.atomCount[residueIndex];
        var result = atomOffset;
        while (residueStore.residueTypeId[result] !== alphaId && result < atomOffset + atomCount) {
            result++;
        }
        return result;
    };
    /**
     * Helper function to find the smallest possible distance between two residues via their atoms.
     *
     * @param resnoI The first residue.
     * @param resnoJ The second residue.
     * @returns Shortest distance between the two residues in ångströms.
     */
    ChellPDB.prototype.getMinDistBetweenResidues = function (resnoI, resnoJ) {
        return this.getMinDistBetweenResidueIndices(this.nglData.residueStore.resno.indexOf(resnoI), this.nglData.residueStore.resno.indexOf(resnoJ));
    };
    ChellPDB.prototype.getResidueNumberingMismatches = function (contacts) {
        var result = new Array();
        this.eachResidue(function (residue) {
            var pdbResCode = residue.resname.toUpperCase();
            var couplingAminoAcid = contacts.getAminoAcidOfContact(residue.resno);
            if (couplingAminoAcid &&
                data_1.AMINO_ACIDS_BY_THREE_LETTER_CODE[pdbResCode] !==
                    data_1.AMINO_ACIDS_BY_SINGLE_LETTER_CODE[couplingAminoAcid.singleLetterCode]) {
                result.push({
                    firstAminoAcid: data_1.AMINO_ACIDS_BY_SINGLE_LETTER_CODE[couplingAminoAcid.singleLetterCode],
                    resno: residue.resno,
                    secondAminoAcid: data_1.AMINO_ACIDS_BY_THREE_LETTER_CODE[pdbResCode],
                });
            }
        });
        return result;
    };
    /**
     * Helper function to find the smallest possible distance between two residues via their atoms.
     *
     * @param indexI Index of the first residue with respect to the array of all residues.
     * @param indexJ Index of the second residue with respect to the array of all residues.
     * @returns Shortest distance between the two residues in ångströms.
     */
    ChellPDB.prototype.getMinDistBetweenResidueIndices = function (indexI, indexJ) {
        var residueStore = this.nglData.residueStore;
        var firstResCount = residueStore.atomCount[indexI];
        var secondResCount = residueStore.atomCount[indexJ];
        var firstAtomIndex = residueStore.atomOffset[indexI];
        var secondAtomIndex = residueStore.atomOffset[indexJ];
        var result = {
            atomIndexI: -1,
            atomIndexJ: -1,
            dist: Number.MAX_SAFE_INTEGER,
        };
        for (var firstCounter = 0; firstCounter < firstResCount; ++firstCounter) {
            for (var secondCounter = 0; secondCounter < secondResCount; ++secondCounter) {
                var atomIndexI = firstAtomIndex + firstCounter;
                var atomIndexJ = secondAtomIndex + secondCounter;
                var dist = this.nglData.getAtomProxy(atomIndexI).distanceTo(this.nglData.getAtomProxy(atomIndexJ));
                if (dist < result.dist) {
                    result = {
                        atomIndexI: atomIndexI,
                        atomIndexJ: atomIndexJ,
                        dist: dist,
                    };
                }
            }
        }
        return result;
    };
    ChellPDB.NGL_C_ALPHA_INDEX = 'CA|C';
    return ChellPDB;
}());
exports.ChellPDB = ChellPDB;


/***/ }),

/***/ "./src/data/CouplingContainer.ts":
/*!***************************************!*\
  !*** ./src/data/CouplingContainer.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
/**
 * A CouplingContainer provides access to the coupling information of residue pairs.
 *
 * Behind the scenes, it is backed by a sparse 2D array to avoid data duplication and provide O(1) access.
 *
 * @export
 */
var CouplingContainer = /** @class */ (function () {
    function CouplingContainer(scores) {
        var e_1, _a;
        if (scores === void 0) { scores = []; }
        var _this = this;
        this.contacts = new Array();
        /** How many distinct contacts are currently stored. */
        this.totalStoredContacts = 0;
        this.indexRange = {
            max: 50,
            min: 1,
        };
        /** Used for iterator access. */
        this.rowCounter = 0;
        /** Used for iterator access. */
        this.colCounter = 0;
        /**
         * Primary interface for getting a coupling score, provides access to the same data object regardless of order of (firstRes, secondRes).
         */
        this.getCouplingScore = function (firstRes, secondRes) {
            var row = _this.contacts[Math.min(firstRes, secondRes) - 1];
            return row ? row[Math.max(firstRes, secondRes) - 1] : undefined;
        };
        this.includes = function (firstRes, secondRes) {
            return _this.contacts[Math.min(firstRes, secondRes) - 1] &&
                _this.contacts[Math.min(firstRes, secondRes) - 1][Math.max(firstRes, secondRes) - 1] !== undefined;
        };
        try {
            for (var scores_1 = __values(scores), scores_1_1 = scores_1.next(); !scores_1_1.done; scores_1_1 = scores_1.next()) {
                var score = scores_1_1.value;
                this.addCouplingScore(score);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (scores_1_1 && !scores_1_1.done && (_a = scores_1.return)) _a.call(scores_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(CouplingContainer.prototype, "allContacts", {
        get: function () {
            return this.contacts;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CouplingContainer.prototype, "chainLength", {
        get: function () {
            return this.indexRange.max - this.indexRange.min + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CouplingContainer.prototype, "rankedContacts", {
        get: function () {
            return Array.from(this).sort(function (a, b) {
                if (a.cn && b.cn) {
                    return b.cn - a.cn;
                }
                else if (a.cn && !b.cn) {
                    return -1;
                }
                else if (!a.cn && b.cn) {
                    return 1;
                }
                return 0;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CouplingContainer.prototype, "residueIndexRange", {
        get: function () {
            return this.indexRange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CouplingContainer.prototype, "sequence", {
        get: function () {
            var result = '';
            for (var i = this.indexRange.min; i <= this.indexRange.max; ++i) {
                var aminoAcid = this.getAminoAcidOfContact(i);
                if (aminoAcid) {
                    result += aminoAcid.singleLetterCode;
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CouplingContainer.prototype, "totalContacts", {
        get: function () {
            return this.totalStoredContacts;
        },
        enumerable: true,
        configurable: true
    });
    CouplingContainer.prototype[Symbol.iterator] = function () {
        return this;
    };
    /**
     * Add a coupling score to this collection. If there is already an entry for this (i,j) contact, it will be overridden!
     *
     * @param score A Coupling Score to add to the collection.
     */
    CouplingContainer.prototype.addCouplingScore = function (score) {
        var A_i = score.A_i, A_j = score.A_j, i = score.i, j = score.j;
        var minResidueIndex = Math.min(i, j) - 1;
        var maxResidueIndex = Math.max(i, j) - 1;
        var isFlipped = minResidueIndex + 1 === j;
        if (!this.contacts[minResidueIndex]) {
            this.contacts[minResidueIndex] = new Array();
        }
        if (!this.contacts[minResidueIndex][maxResidueIndex]) {
            this.totalStoredContacts++;
        }
        this.contacts[minResidueIndex][maxResidueIndex] = __assign({}, this.contacts[minResidueIndex][maxResidueIndex], score);
        if (isFlipped) {
            this.contacts[minResidueIndex][maxResidueIndex].i = j;
            this.contacts[minResidueIndex][maxResidueIndex].j = i;
            if (A_i && A_j) {
                this.contacts[minResidueIndex][maxResidueIndex].A_i = A_j;
                this.contacts[minResidueIndex][maxResidueIndex].A_j = A_i;
            }
        }
        this.indexRange = {
            max: Math.max(this.indexRange.max, maxResidueIndex + 1),
            min: Math.min(this.indexRange.min, minResidueIndex + 1),
        };
    };
    CouplingContainer.prototype.getAminoAcidOfContact = function (resno) {
        var e_2, _a, e_3, _b;
        if (resno > this.chainLength + 1) {
            return undefined;
        }
        try {
            for (var _c = __values(this.allContacts), _d = _c.next(); !_d.done; _d = _c.next()) {
                var outerContact = _d.value;
                if (outerContact) {
                    try {
                        for (var outerContact_1 = __values(outerContact), outerContact_1_1 = outerContact_1.next(); !outerContact_1_1.done; outerContact_1_1 = outerContact_1.next()) {
                            var innerContact = outerContact_1_1.value;
                            if (innerContact && innerContact.i === resno && innerContact.A_i) {
                                return data_1.AMINO_ACIDS_BY_SINGLE_LETTER_CODE[innerContact.A_i];
                            }
                            else if (innerContact && innerContact.j === resno && innerContact.A_j) {
                                return data_1.AMINO_ACIDS_BY_SINGLE_LETTER_CODE[innerContact.A_j];
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (outerContact_1_1 && !outerContact_1_1.done && (_b = outerContact_1.return)) _b.call(outerContact_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return undefined;
    };
    /**
     * Determine which contacts in this coupling container are observed.
     *
     * @param [distFilter=5] For each score, if dist <= distFilter, it is considered observed.
     * @param [linearDistFilter=5] For each score, if |i - j| >= linearDistFilter, it will be a candidate for being correct/incorrect.
     * @returns Contacts that should be considered observed in the current data set.
     */
    CouplingContainer.prototype.getObservedContacts = function (distFilter, linearDistFilter) {
        if (distFilter === void 0) { distFilter = 5; }
        if (linearDistFilter === void 0) { linearDistFilter = 5; }
        var e_4, _a;
        var result = new Array();
        try {
            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var score = _c.value;
                if (score.dist && score.dist <= distFilter && Math.abs(score.i - score.j) >= linearDistFilter) {
                    result.push(score);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return result;
    };
    /**
     * Determine which contacts in this coupling container are both predicted and correct.
     *
     * @param totalPredictionsToShow How many predictions, max, to return.
     * @param [linearDistFilter=5] For each score, if |i - j| >= linearDistFilter, it will be a candidate for being correct/incorrect.
     * @param [measuredContactDistFilter=5]  If the dist for the contact is less than predictionCutoffDist, it is considered correct.
     * @returns An object containing 2 array fields: correct and predicted.
     */
    CouplingContainer.prototype.getPredictedContacts = function (totalPredictionsToShow, linearDistFilter, measuredContactDistFilter) {
        if (linearDistFilter === void 0) { linearDistFilter = 5; }
        if (measuredContactDistFilter === void 0) { measuredContactDistFilter = 5; }
        var e_5, _a;
        var result = {
            correct: new Array(),
            predicted: new Array(),
        };
        try {
            for (var _b = __values(this.rankedContacts
                .filter(function (score) { return Math.abs(score.i - score.j) >= linearDistFilter; })
                .slice(0, totalPredictionsToShow)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var contact = _c.value;
                if (contact.dist && contact.dist < measuredContactDistFilter) {
                    result.correct.push(contact);
                }
                result.predicted.push(contact);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return result;
    };
    CouplingContainer.prototype.next = function () {
        for (var i = this.rowCounter; i < this.contacts.length; ++i) {
            if (this.contacts[i]) {
                for (var j = this.colCounter; j < this.contacts[i].length; ++j) {
                    var score = this.contacts[i][j];
                    if (score) {
                        this.rowCounter = i;
                        this.colCounter = j + 1;
                        return {
                            done: false,
                            value: score,
                        };
                    }
                }
                this.colCounter = 0;
            }
        }
        this.rowCounter = 0;
        this.colCounter = 0;
        return {
            done: true,
            value: null,
        };
    };
    CouplingContainer.prototype.updateContact = function (i, j, score) {
        this.addCouplingScore(__assign({ i: i, j: j }, score));
    };
    return CouplingContainer;
}());
exports.CouplingContainer = CouplingContainer;


/***/ }),

/***/ "./src/data/PlotlyData.ts":
/*!********************************!*\
  !*** ./src/data/PlotlyData.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PLOTLY_CHART_TYPE;
(function (PLOTLY_CHART_TYPE) {
    /** [Plotly Bar Chart](https://plot.ly/javascript/bar-charts/) */
    PLOTLY_CHART_TYPE["bar"] = "bar";
    /** [Plotly Point Cloud](https://plot.ly/javascript/pointcloud/) */
    PLOTLY_CHART_TYPE["pointcloud"] = "pointcloud";
    /** [Plotly Line/Scatter Chart](https://plot.ly/javascript/line-and-scatter/) */
    PLOTLY_CHART_TYPE["scatter"] = "scatter";
    /** [Plotly Line/Scatter Chart in WebGL](https://plot.ly/javascript/line-and-scatter/) */
    PLOTLY_CHART_TYPE["scattergl"] = "scattergl";
    /** [Plotly 3D Scatter Plot](https://plot.ly/javascript/3d-scatter-plots/) */
    PLOTLY_CHART_TYPE["scatter3d"] = "scatter3d";
})(PLOTLY_CHART_TYPE = exports.PLOTLY_CHART_TYPE || (exports.PLOTLY_CHART_TYPE = {}));


/***/ }),

/***/ "./src/data/Protein.ts":
/*!*****************************!*\
  !*** ./src/data/Protein.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// cSpell:disable
// tslint:disable:max-line-length no-reserved-keywords
Object.defineProperty(exports, "__esModule", { value: true });
var PROTEIN_COMMENT_TYPE;
(function (PROTEIN_COMMENT_TYPE) {
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["DISEASE"] = 0] = "DISEASE";
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["DOMAIN"] = 1] = "DOMAIN";
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["FUNCTION"] = 2] = "FUNCTION";
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["INTERACTION"] = 3] = "INTERACTION";
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["MIM"] = 4] = "MIM";
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["PTM"] = 5] = "PTM";
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["SIMILARITY"] = 6] = "SIMILARITY";
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["SUBCELLULAR_LOCATION"] = 7] = "SUBCELLULAR_LOCATION";
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["SUBUNIT"] = 8] = "SUBUNIT";
    PROTEIN_COMMENT_TYPE[PROTEIN_COMMENT_TYPE["WEBRESOURCE"] = 9] = "WEBRESOURCE";
})(PROTEIN_COMMENT_TYPE = exports.PROTEIN_COMMENT_TYPE || (exports.PROTEIN_COMMENT_TYPE = {}));


/***/ }),

/***/ "./src/data/TintedChell1DSection.ts":
/*!******************************************!*\
  !*** ./src/data/TintedChell1DSection.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
/**
 * Class to encapsulate a 1 Dimensional data segment that has an associated color with it.
 *
 * @export
 * @extends Chell1DSection
 */
var TintedChell1DSection = /** @class */ (function (_super) {
    __extends(TintedChell1DSection, _super);
    function TintedChell1DSection(label, start, end, color) {
        if (end === void 0) { end = start; }
        if (color === void 0) { color = 'orange'; }
        var _this = _super.call(this, label, start, end) || this;
        _this.label = label;
        _this.sectionColor = 'orange';
        _this.sectionColor = color;
        return _this;
    }
    Object.defineProperty(TintedChell1DSection.prototype, "color", {
        get: function () {
            return this.sectionColor;
        },
        enumerable: true,
        configurable: true
    });
    TintedChell1DSection.prototype.updateColor = function (color) {
        this.sectionColor = color;
    };
    return TintedChell1DSection;
}(data_1.Chell1DSection));
exports.TintedChell1DSection = TintedChell1DSection;


/***/ }),

/***/ "./src/data/VizData.ts":
/*!*****************************!*\
  !*** ./src/data/VizData.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var springExamples = [
    {
        icon: 'assets/icons/example_hpc_sf2-spring.png',
        link: '/dataset?name=hpc_sf2/full&viz=spring',
        name: 'HPC (hematopoietic progenitor cells)',
        summary: 'Analysis of 33,473 hematopoietic progenitor cells as they differentiate over 6 days.\
       Barcodes were introduced at day 0 and cell lineage relationships were traced by\
       identifying progeny from their barcodes in scRNAseq of aliquots of the same population taken at several timepoints.',
    },
    {
        icon: 'assets/icons/tabula-muris-thumbnail.png',
        link: '/dataset?name=tabula_muris/10k&viz=spring',
        name: 'CZI Tabula muris',
        summary: 'Analysis of 10K mouse cells from 20 organs and tissues.',
    },
    {
        icon: 'assets/icons/example_tabularmuris_spring-tsne-anatomogram.png',
        link: '/dataset?name=tabula_muris/10k&viz=spring&viz=tfjs-tsne&viz=anatomogram',
        name: 'Tabula Muris - SPRING vs tSNE with Anatomogram',
        summary: 'Example comparison of data reduction techniques SPRING and tSNE\
    (of top 30 PCA components), on RNAseq profiles from 10000 cells\
    from the CZI Tabula muris dataset. Also includes anatomogram visualization for selection of tissue types.',
    },
    {
        icon: 'assets/icons/example_HPC_spring-tsne-anatomogram.png',
        link: '/dataset?name=hpc/full&viz=spring&viz=tfjs-tsne&viz=anatomogram',
        name: 'HPC - SPRING vs tSNE with Anatomogram',
        summary: 'Example interaction between SPRING, tSNE and Anatomogram visualization on a small dataset.',
    },
];
var anatomogram = {
    authors: ['Alfonso Muñoz-Pomer Fuentes'],
    citations: [],
    compatibility: [],
    detailedSummary: '',
    examples: [springExamples[2]],
    listAsOriginal: true,
    name: 'Anatomogram',
    relevantData: 'scRNA-seq',
    repo: { lastUpdate: '', link: 'https://github.com/ebi-gene-expression-group/anatomogram', version: '' },
    summary: 'Interactive anatomical diagram.',
};
var spring = {
    authors: ['Caleb Weinreb', 'Samuel Wolock', 'Allon Klein'],
    citations: [
        {
            fullCitation: 'Weinreb, Caleb, Samuel Wolock, and Allon M. Klein.\
      "SPRING: A kinetic interface for visualizing high dimensional single-cell expression data."\
      Bioinformatics 34.7 (2017): 1246-1248.',
            link: 'https://www.ncbi.nlm.nih.gov/pubmed/29228172',
        },
    ],
    compatibility: ['live tSNE', 'UMAP', 'PCA'],
    detailedSummary: 'SPRING is a tool for uncovering high-dimensional structure in single-cell gene expression data.\
   SPRING takes a (gene X cell) table of expression measurements and outputs a k-nearest-neighbor graph\
   rendered using a force directed layout.\
   Users can overlay prior information, including gene expression values, gene-set scores, cell cluster labels and sample IDs.\
   Users can also upload custom coordinates that have been generated using an outside program such as tSNE.',
    examples: springExamples,
    listAsOriginal: false,
    name: 'SPRING',
    relevantData: 'scRNA-seq',
    repo: {
        lastUpdate: '2018.03.12',
        link: 'https://github.com/AllonKleinLab/SPRING_dev',
        version: '2.0',
    },
    summary: 'SPRING is a tool for uncovering high-dimensional structure in single-cell expression data.',
};
var tfjsTsne = {
    authors: ['Yannick Assogba'],
    citations: [],
    compatibility: [],
    detailedSummary: '',
    examples: [springExamples[2], springExamples[3]],
    listAsOriginal: true,
    name: 'tfjs-tsne',
    relevantData: 'scRNA-seq',
    repo: { lastUpdate: '', link: 'https://github.com/tensorflow/tfjs-tsne', version: '' },
    summary: 'Improved tSNE implementation that runs in the browser.',
};
exports.VizData = {
    anatomogram: anatomogram,
    spring: spring,
    'tfjs-tsne': tfjsTsne,
    tfjsTsne: tfjsTsne,
};
exports.Stories = [
    {
        authors: ['Caleb Weinreb', 'Samuel Wolock', 'Allon Klein'],
        description: 'Analysis of 33,473 hematopoietic progenitor cells as they differentiate over 6 days.\
       Barcodes were introduced at day 0 and cell lineage relationships were traced by\
       identifying progeny from their barcodes in scRNAseq of aliquots of the same population taken at several timepoints.',
        icon: 'assets/icons/example_hpc_sf2-spring.png',
        link: '/dataset?name=hpc_sf2/full&viz=spring',
        title: 'Trajectory analysis of differentiating HPCs',
    },
    {
        authors: ['Drew Diamantoukos', 'Nicholas Gauthier'],
        description: 'Analysis of single cell transcriptomics of 20 mouse organs\
    from the tabula muris project.',
        icon: 'assets/icons/example_tabularmuris_spring-tsne-anatomogram.png',
        link: '/dataset?name=tabula_muris/10k&viz=spring&viz=tfjs-tsne&viz=anatomogram',
        title: 'Dimensionality-reduction analysis of tabula muris',
    },
];
exports.userDatasets = [
    {
        authors: ['Caleb Weinreb', 'Samuel Wolock', 'Allon klein'],
        links: {
            analysis: '',
            detail: '',
        },
        name: 'Differentiating hematopoietic cells',
        summary: 'Hematopoietic cells were subjected to barcoding and\
aliquots were subjected to scRNAseq as they underwent\
differentiation.',
    },
    {
        authors: ['The Tabula Muris Consortium'],
        links: {
            analysis: '',
            detail: '',
        },
        name: 'Tabula muris - scRNAseq of 20 mouse organs',
        summary: 'A compendium of single-cell transcriptomic data from the\
  model organism Mus musculus that comprises more than\
  100,000 cells from 20 organs and tissues',
    },
];
exports.DatasetData = {
    'hpc/full': {
        description: 'Analysis of the RNAseq proles from 4790 hematopoietic progenitor cells',
        enabled: true,
        fullName: 'Hematopoietic progenitor cells',
        serverNeeded: false,
    },
    'hpc_sf2/full': {
        description: 'Analysis of 33,473 the transcriptional prole of hematopoietic\
    progenitor cells as they dierentiate over 6 days',
        enabled: true,
        fullName: 'Hematopoietic progenitor cells',
        serverNeeded: false,
    },
    'tabula_muris/10k': {
        description: 'A subset pf 10,000 randomly sampled cells taken from the full\
  tabula_muris dataset (20 organs and tissues from Mus musculus)',
        enabled: true,
        fullName: 'Tabula muris',
        serverNeeded: false,
    },
    'tabula_muris/full': {
        description: 'A compendium of single-cell transcriptomic data from the\
  model organism Mus musculus that comprises more than\
  100,000 cells from 20 organs and tissues',
        enabled: false,
        fullName: 'Tabula muris',
        serverNeeded: true,
    },
    'tabula_muris/lung': {
        description: 'Analysis of the RNAseq proles from 4790 hematopoietic\
  progenitor cells',
        enabled: false,
        fullName: 'Tabula muris',
        serverNeeded: true,
    },
};


/***/ }),

/***/ "./src/data/event/ChellChartEvent.ts":
/*!*******************************************!*\
  !*** ./src/data/event/ChellChartEvent.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var ChellChartEvent = /** @class */ (function () {
    function ChellChartEvent(
    // tslint:disable-next-line:no-reserved-keywords
    type, chartPiece, selectedPoints, plotlyEvent) {
        if (selectedPoints === void 0) { selectedPoints = []; }
        if (plotlyEvent === void 0) { plotlyEvent = {}; }
        this.type = type;
        this.chartPiece = chartPiece;
        this.selectedPoints = selectedPoints;
        this.plotlyEvent = plotlyEvent;
    }
    ChellChartEvent.prototype.isAxis = function () {
        return this.chartPiece === data_1.CHELL_CHART_PIECE.AXIS;
    };
    return ChellChartEvent;
}());
exports.ChellChartEvent = ChellChartEvent;


/***/ }),

/***/ "./src/data/event/index.ts":
/*!*********************************!*\
  !*** ./src/data/event/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./ChellChartEvent */ "./src/data/event/ChellChartEvent.ts"));


/***/ }),

/***/ "./src/data/index.ts":
/*!***************************!*\
  !*** ./src/data/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./AminoAcid */ "./src/data/AminoAcid.ts"));
__export(__webpack_require__(/*! ./Chell1DSection */ "./src/data/Chell1DSection.ts"));
__export(__webpack_require__(/*! ./ChellConfig */ "./src/data/ChellConfig.ts"));
__export(__webpack_require__(/*! ./ChellData */ "./src/data/ChellData.ts"));
__export(__webpack_require__(/*! ./ChellPDB */ "./src/data/ChellPDB.ts"));
__export(__webpack_require__(/*! ./CouplingContainer */ "./src/data/CouplingContainer.ts"));
__export(__webpack_require__(/*! ./PlotlyData */ "./src/data/PlotlyData.ts"));
__export(__webpack_require__(/*! ./Protein */ "./src/data/Protein.ts"));
__export(__webpack_require__(/*! ./TintedChell1DSection */ "./src/data/TintedChell1DSection.ts"));
__export(__webpack_require__(/*! ./VizData */ "./src/data/VizData.ts"));
__export(__webpack_require__(/*! ./event */ "./src/data/event/index.ts"));


/***/ }),

/***/ "./src/helper/ColorMapper.ts":
/*!***********************************!*\
  !*** ./src/helper/ColorMapper.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Class to allow a mapping between a type and a color.
 *
 * @export
 */
var ColorMapper = /** @class */ (function () {
    function ColorMapper(colors) {
        if (colors === void 0) { colors = ColorMapper.DEFAULT_COLORS; }
        this.colors = colors;
        /**
         * Used to associate keys with a Color.
         */
        this.colorMap = new Map();
    }
    /**
     * Get the color for the provided key - if the key isn't stored, it will be added using the set of colors for this mapper.
     */
    ColorMapper.prototype.getColorFor = function (key) {
        if (!this.colorMap.has(key)) {
            this.addColorToMapper(key);
        }
        return this.colorMap.get(key);
    };
    /**
     * Method to allow a user to just add an entry to the colorMapper.
     *
     * @param key Key to store.
     * @param [color] Allows a color to be explicitly set for this key.
     * @param [addToColors] Flag to allow/disallow color to be added to set of colors used by this ColorMapper.
     */
    ColorMapper.prototype.addEntry = function (key, color, addToColors) {
        if (addToColors === void 0) { addToColors = true; }
        if (!this.colorMap.has(key)) {
            this.addColorToMapper(key, color, addToColors);
        }
    };
    /**
     * Sets the entry for the internal ColorMapper Map.
     * @param key Key to add
     * @param [color] Explicit color to use if provided.
     * @param [addToColors] Flag to allow/disallow color to be added to set of colors used by this ColorMapper.
     */
    ColorMapper.prototype.addColorToMapper = function (key, color, addToColors) {
        this.colorMap.set(key, color ? color : this.colors[this.colorMap.size % this.colors.length]);
        if (color && addToColors && !this.colors.includes(color)) {
            this.colors.push(color);
        }
    };
    ColorMapper.DEFAULT_COLORS = [
        'red',
        'green',
        'blue',
        'orange',
        'purple',
        'teal',
        'pink',
        'yellow',
        'violet',
        'olive',
        'brown',
    ];
    return ColorMapper;
}());
exports.ColorMapper = ColorMapper;


/***/ }),

/***/ "./src/helper/CouplingMapper.ts":
/*!**************************************!*\
  !*** ./src/helper/CouplingMapper.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var generateDefaultHeaderIndices = function (items) { return ({
    A_i: items.length - 2,
    A_j: items.length - 1,
    cn: 2,
    dist: 3,
    i: 0,
    j: 1,
}); };
// tslint:disable-next-line:export-name
exports.getCouplingHeaderIndices = function (items, areHeadersPresent) {
    if (!areHeadersPresent) {
        return generateDefaultHeaderIndices(items);
    }
    else {
        var result_1 = {};
        items.filter(function (item) { return item.length >= 1; }).map(function (header) {
            // Trim to remove whitespace, newlines, carriage returns, etc.
            result_1[header.trim()] = items.indexOf(header);
        });
        return result_1;
    }
};


/***/ }),

/***/ "./src/helper/DataHelper.ts":
/*!**********************************!*\
  !*** ./src/helper/DataHelper.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var NGL = __webpack_require__(/*! ngl */ "./node_modules/ngl/dist/ngl.esm.js");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var helper_1 = __webpack_require__(/*! ~chell-viz~/helper */ "./src/helper/index.ts");
exports.fetchAppropriateData = function (viz, dataDir) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (viz) {
            case data_1.VIZ_TYPE['T-SNE']:
            case data_1.VIZ_TYPE['T-SNE-FRAME']:
                return [2 /*return*/, exports.fetchTSneCoordinateData(dataDir)];
            case data_1.VIZ_TYPE['TENSOR-T-SNE']:
                return [2 /*return*/, exports.fetchTensorTSneCoordinateData(dataDir)];
            case data_1.VIZ_TYPE.SPRING:
                return [2 /*return*/, exports.fetchSpringData(dataDir)];
            case data_1.VIZ_TYPE.NGL:
                return [2 /*return*/, exports.fetchNGLDataFromDirectory(dataDir)];
            case data_1.VIZ_TYPE.CONTACT_MAP:
            case data_1.VIZ_TYPE.INFO_PANEL:
                return [2 /*return*/, exports.fetchContactMapData(dataDir)];
            default:
                return [2 /*return*/, Promise.reject({ error: "Currently no appropriate data getter for " + viz })];
        }
        return [2 /*return*/];
    });
}); };
exports.fetchAppropriateDataFromFile = function (viz, file) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = viz;
                switch (_a) {
                    case data_1.VIZ_TYPE.NGL: return [3 /*break*/, 1];
                    case data_1.VIZ_TYPE.CONTACT_MAP: return [3 /*break*/, 2];
                }
                return [3 /*break*/, 4];
            case 1: return [2 /*return*/, exports.fetchNGLDataFromFile(file)];
            case 2:
                _b = {};
                _c = exports.getCouplingScoresData;
                return [4 /*yield*/, helper_1.readFileAsText(file)];
            case 3: return [2 /*return*/, (_b.couplingScores = _c.apply(void 0, [_d.sent()]), _b)];
            case 4: return [2 /*return*/, Promise.reject({ error: "Currently no appropriate data getter for " + viz + " files" })];
        }
    });
}); };
exports.fetchSpringData = function (dataDir) { return __awaiter(_this, void 0, void 0, function () {
    var catColorData, nodes, categories;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetchCategoricalColorData(dataDir + "/categorical_coloring_data.json")];
            case 1:
                catColorData = _a.sent();
                nodes = new Array();
                categories = Object.keys(catColorData);
                catColorData[categories[0]].label_list.forEach(function (label, index) {
                    nodes.push({
                        labelForCategory: categories.reduce(function (prev, category) {
                            var _a;
                            return (__assign({}, prev, (_a = {}, _a[category] = catColorData[category].label_list[index], _a)));
                        }, {}),
                        number: index,
                    });
                });
                return [2 /*return*/, { nodes: nodes }];
        }
    });
}); };
var fetchCategoricalColorData = function (file) { return __awaiter(_this, void 0, void 0, function () {
    var e_1, _a, e_2, _b, input, result, _c, _d, key, colorData, output, label_colors, _e, _f, labelColorKey, hex;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0: return [4 /*yield*/, helper_1.fetchJSONFile(file)];
            case 1:
                input = (_g.sent());
                result = {};
                try {
                    for (_c = __values(Object.keys(input)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        key = _d.value;
                        colorData = input[key];
                        if (!colorData.label_colors || !colorData.label_list) {
                            throw new Error("Unable to parse color data - does it have keys named 'label_colors' and 'label_list'");
                        }
                        output = {
                            label_colors: {},
                            label_list: colorData.label_list,
                        };
                        label_colors = input[Object.keys(input)[0]].label_colors;
                        try {
                            // The input file might specify hex values as either 0xrrggbb or #rrggbb, so we need to convert the input to a consistent output format.
                            for (_e = __values(Object.keys(label_colors)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                labelColorKey = _f.value;
                                hex = label_colors[labelColorKey];
                                if (typeof hex === 'number') {
                                    output.label_colors[labelColorKey] = hex;
                                }
                                else if (hex.charAt(0) === '#') {
                                    output.label_colors[labelColorKey] = Number.parseInt("0x" + hex.slice(1), 16);
                                }
                                else {
                                    output.label_colors[labelColorKey] = Number.parseInt(hex, 16);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        result[key] = output;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return [2 /*return*/, result];
        }
    });
}); };
exports.fetchSpringCoordinateData = function (file) { return __awaiter(_this, void 0, void 0, function () {
    var coordinateText, coordinates, rows;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, helper_1.fetchCSVFile(file)];
            case 1:
                coordinateText = _a.sent();
                coordinates = [];
                rows = coordinateText ? coordinateText.split('\n') : [];
                rows.forEach(function (entry, index, array) {
                    var items = entry.split(',');
                    if (items.length >= 3) {
                        var xx = parseFloat(items[1].trim());
                        var yy = parseFloat(items[2].trim());
                        var nn = parseInt(items[0].trim(), 10);
                        coordinates[nn] = [xx, yy];
                    }
                    else if (entry.localeCompare('') !== 0) {
                        throw new Error("Unable to parse coordinate data - Row " + index + " does not have at least 3 columns!");
                    }
                });
                return [2 /*return*/, coordinates];
        }
    });
}); };
exports.fetchTSneCoordinateData = function (dataDir) { return __awaiter(_this, void 0, void 0, function () {
    var coordText, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, helper_1.fetchCSVFile(dataDir + "/tsne_output.csv")];
            case 1:
                coordText = _a.sent();
                result = [];
                coordText.split('\n').forEach(function (entry) {
                    if (entry.length > 0) {
                        var items = entry.split(',');
                        var coordinates = [parseFloat(items[0]), parseFloat(items[1])];
                        result.push(coordinates);
                    }
                });
                return [2 /*return*/, result];
        }
    });
}); };
exports.fetchTensorTSneCoordinateDataFromFile = function (fileLocation) { return __awaiter(_this, void 0, void 0, function () {
    var e_3, _a, coordText, matrix, _b, _c, row;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, helper_1.fetchCSVFile(fileLocation)];
            case 1:
                coordText = _d.sent();
                matrix = new Array();
                try {
                    for (_b = __values(coordText.split('\n')), _c = _b.next(); !_c.done; _c = _b.next()) {
                        row = _c.value;
                        if (row.length >= 1) {
                            matrix.push(row.split(',').map(parseFloat));
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                return [2 /*return*/, matrix];
        }
    });
}); };
exports.fetchTensorTSneCoordinateData = function (dataDir) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, exports.fetchTensorTSneCoordinateDataFromFile(dataDir + "/tsne_matrix.csv")];
    });
}); };
exports.fetchGraphData = function (file) { return __awaiter(_this, void 0, void 0, function () {
    var data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, helper_1.fetchJSONFile(file)];
            case 1:
                data = (_a.sent());
                if (!data.nodes || !data.links) {
                    throw new Error("Unable to parse graph data - does it have keys named 'nodes' and 'links'");
                }
                return [2 /*return*/, data];
        }
    });
}); };
exports.fetchNGLDataFromDirectory = function (dir) { return __awaiter(_this, void 0, void 0, function () {
    var file;
    return __generator(this, function (_a) {
        if (dir.length === 0) {
            return [2 /*return*/, Promise.reject('Empty path.')];
        }
        file = dir + "/protein.pdb";
        return [2 /*return*/, exports.fetchNGLDataFromFile(file)];
    });
}); };
exports.fetchNGLDataFromFile = function (file, params) {
    if (params === void 0) { params = {}; }
    return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, NGL.autoLoad(file, params)];
            case 1: return [2 /*return*/, (_a.sent())];
        }
    }); });
};
exports.fetchContactMapData = function (dir) { return __awaiter(_this, void 0, void 0, function () {
    var contactMapFiles, promiseResults, pdbData;
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (dir.length === 0) {
                    return [2 /*return*/, Promise.reject('Empty path.')];
                }
                contactMapFiles = ['coupling_scores.csv', 'residue_mapping.csv'];
                return [4 /*yield*/, Promise.all(contactMapFiles.map(function (file) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, helper_1.fetchCSVFile(dir + "/" + file)];
                    }); }); }))];
            case 1:
                promiseResults = _a.sent();
                return [4 /*yield*/, data_1.ChellPDB.createPDB(dir + "/protein.pdb")];
            case 2:
                pdbData = _a.sent();
                return [2 /*return*/, {
                        couplingScores: exports.getCouplingScoresData(promiseResults[0], helper_1.generateResidueMapping(promiseResults[1])),
                        pdbData: pdbData,
                        secondaryStructures: [],
                    }];
        }
    });
}); };
/**
 * Parses a coupling_scores.csv file to generate the appropriate data structure.
 *
 * !Important!
 * Currently 12 fields are assumed to be part of a single coupling score.
 * As such, any rows with less will be ignored.
 *
 * @param line The csv file as a single string.
 * @param residueMapping Maps the coupling_score.csv residue number to the residue number for the PDB.
 * @returns Array of CouplingScores suitable for chell-viz consumption.
 */
exports.getCouplingScoresData = function (line, residueMapping) {
    if (residueMapping === void 0) { residueMapping = []; }
    var headerRow = line.split('\n')[0].split(',');
    var isHeaderPresent = isCouplingHeaderPresent(headerRow);
    var headerIndices = helper_1.getCouplingHeaderIndices(headerRow, isHeaderPresent);
    var couplingScores = new data_1.CouplingContainer();
    line
        .split('\n')
        .slice(isHeaderPresent ? 1 : 0)
        .filter(function (row) { return row.split(',').length >= 2; })
        .map(function (row) {
        var items = row.split(',');
        var score = getCouplingScoreFromCSVRow(items, headerIndices);
        if (residueMapping.length >= 1) {
            var mappingIndexI = residueMapping.findIndex(function (mapping) { return mapping.couplingsResno === score.i; });
            var mappingIndexJ = residueMapping.findIndex(function (mapping) { return mapping.couplingsResno === score.j; });
            couplingScores.addCouplingScore(__assign({}, score, { A_i: residueMapping[mappingIndexI].pdbResCode, A_j: residueMapping[mappingIndexJ].pdbResCode, i: residueMapping[mappingIndexI].pdbResno, j: residueMapping[mappingIndexJ].pdbResno }));
        }
        else {
            couplingScores.addCouplingScore(score);
        }
    });
    return couplingScores;
};
var isCouplingHeaderPresent = function (headerRow) {
    return ['cn', 'dist', 'i', 'j'].filter(function (row) { return headerRow.includes(row); }).length >= 1;
};
var getCouplingScoreFromCSVRow = function (row, headerIndices) {
    return Object.entries(headerIndices).reduce(function (prev, headerName) {
        var _a;
        var couplingKey = headerName[0];
        var couplingKeyIndex = headerName[1];
        return __assign({}, prev, (_a = {}, _a[couplingKey] = isNaN(Number(row[couplingKeyIndex])) ? row[couplingKeyIndex] : Number(row[couplingKeyIndex]), _a));
    }, { i: -1, j: -1 });
};
exports.augmentCouplingScoresWithResidueMapping = function (couplingScores, residueMapping) {
    if (residueMapping === void 0) { residueMapping = []; }
    var e_4, _a;
    var result = new data_1.CouplingContainer();
    var _loop_1 = function (score) {
        var mappedIndexI = residueMapping.findIndex(function (mapping) { return mapping.couplingsResno === score.i; });
        var mappedIndexJ = residueMapping.findIndex(function (mapping) { return mapping.couplingsResno === score.j; });
        result.addCouplingScore({
            A_i: residueMapping[mappedIndexI].pdbResCode,
            A_j: residueMapping[mappedIndexJ].pdbResCode,
            cn: score.cn,
            dist: score.dist,
            i: residueMapping[mappedIndexI].pdbResno,
            j: residueMapping[mappedIndexJ].pdbResno,
        });
    };
    try {
        for (var couplingScores_1 = __values(couplingScores), couplingScores_1_1 = couplingScores_1.next(); !couplingScores_1_1.done; couplingScores_1_1 = couplingScores_1.next()) {
            var score = couplingScores_1_1.value;
            _loop_1(score);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (couplingScores_1_1 && !couplingScores_1_1.done && (_a = couplingScores_1.return)) _a.call(couplingScores_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return result;
};
/**
 * Parses a distance_map.csv file to generate the appropriate secondary structure mapping.
 *
 * !Important!
 * The first line in the csv will be ignored as it is assumed to be a csv header.
 *
 * !Important!
 * Currently 3 fields are assumed to be part of a single entry, with the second and third actually being relevant.
 * As such, any other rows will be ignored.
 *
 * @param line The csv file as a single string.
 * @returns Array of SecondaryStructure mappings suitable for chell-viz consumption.
 */
exports.getSecondaryStructureData = function (line) {
    return line
        .split('\n')
        .slice(1)
        .filter(function (row) { return row.split(',').length >= 3; })
        .map(function (row) {
        var items = row.split(',');
        return {
            resno: parseFloat(items[1]),
            structId: items[2],
        };
    });
};
/*
TODO Currently not being used by Spring. Remove? Use in future Spring work?
export const fetchColorData = async (file: string) => {
  const colorText: string = await fetchCSVFile(file);
  const dict: { [k: string]: any } = {};
  colorText.split('\n').forEach((entry, index, array) => {
    if (entry.length > 0) {
      const items = entry.split(',');
      const gene = items[0];
      const expArray: any[] = [];
      items.forEach((e, i, a) => {
        if (i > 0) {
          expArray.push(parseFloat(e));
        }
      });
      dict[gene] = expArray;
    }
  });
  return dict;
};
*/


/***/ }),

/***/ "./src/helper/FetchHelper.ts":
/*!***********************************!*\
  !*** ./src/helper/FetchHelper.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchCSVFile = function (filename) { return __awaiter(_this, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetch(filename)];
            case 1:
                response = _a.sent();
                if (response.ok) {
                    return [2 /*return*/, response.text()];
                }
                else {
                    throw new Error(genErrorMsg('CSV', response));
                }
                return [2 /*return*/];
        }
    });
}); };
exports.fetchJSONFile = function (filename) { return __awaiter(_this, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetch(filename)];
            case 1:
                response = _a.sent();
                if (response.ok) {
                    return [2 /*return*/, response.json()];
                }
                else {
                    throw new Error(genErrorMsg('JSON', response));
                }
                return [2 /*return*/];
        }
    });
}); };
var genErrorMsg = function (fileType, response) {
    return "Chell-viz error fetching " + fileType + " File!\nStatus: " + response.status + "\nMessage: " + response.statusText + "\n";
};
// https://blog.shovonhasan.com/using-promises-with-filereader/
exports.readFileAsText = function (inputFile) { return __awaiter(_this, void 0, void 0, function () {
    var temporaryFileReader;
    return __generator(this, function (_a) {
        temporaryFileReader = new FileReader();
        return [2 /*return*/, new Promise(function (resolve, reject) {
                temporaryFileReader.onerror = function () {
                    temporaryFileReader.abort();
                    reject('Problem parsing input file.');
                };
                temporaryFileReader.onload = function () {
                    resolve(temporaryFileReader.result);
                };
                temporaryFileReader.readAsText(inputFile);
            })];
    });
}); };


/***/ }),

/***/ "./src/helper/NGLHelper.ts":
/*!*********************************!*\
  !*** ./src/helper/NGLHelper.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultRepParams = {
    color: 'red',
    labelBackground: true,
    labelBackgroundColor: 'lightgrey',
    labelBackgroundMargin: 0.75,
    labelBorder: true,
    labelBorderColor: 'white',
    labelBorderWidth: 0.3,
    labelColor: 'black',
    labelSize: 5,
    labelUnit: 'angstrom',
    labelZOffset: 35,
};
/**
 * Draws a line between two residues in NGL.
 *
 * @param structureComponent The NGL Structure for which these residues belong to.
 * @param selection The [NGL Selection](http://nglviewer.org/ngl/api/manual/selection-language.html) defining the residues.
 */
exports.createDistanceRepresentation = function (structureComponent, selection, params) {
    if (params === void 0) { params = {}; }
    return structureComponent.addRepresentation('distance', __assign({}, exports.defaultRepParams, params, { atomPair: Array.isArray(selection) ? [selection] : [selection.split(',')] }));
};
/**
 * Marks a set of residues with a ball+stick representation in NGL.
 *
 * @param structureComponent The NGL Structure for which these residues belong to.
 * @param residues The residues to mark.
 */
exports.createBallStickRepresentation = function (structureComponent, residues) {
    return structureComponent.addRepresentation('ball+stick', {
        sele: residues.join(', '),
    });
};
/**
 * Highlights a secondary structure in NGL.
 *
 * @param structureComponent The NGL Structure for which these residues belong to.
 * @param section The secondary structure section to highlight.
 * @param [radiusScale=5] How large to make the ribbon highlight.
 * @param [color='pink'] The color of the ribbon highlight.
 */
exports.createSecStructRepresentation = function (structureComponent, section, radiusScale, color) {
    if (radiusScale === void 0) { radiusScale = 2; }
    if (color === void 0) { color = '#feb83f'; }
    var rep = structureComponent.addRepresentation('cartoon', {
        color: color,
        radiusScale: radiusScale,
        sele: section.start + "-" + section.end,
    });
    rep.setParameters({ wireframe: true });
    return rep;
};


/***/ }),

/***/ "./src/helper/PlotlyHelper.ts":
/*!************************************!*\
  !*** ./src/helper/PlotlyHelper.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
/**
 * Generate data in the expected format for a WebGL Scatter plot.
 *
 * @param entry A unit of Plotly data containing points, color, name, and any extras.
 * @param mirrorPoints Should we mirror the points on the x/y axis?
 * @returns Data suitable for consumption by Plotly.
 */
exports.generateScatterGLData = function (entry, mirrorPoints) {
    if (mirrorPoints === void 0) { mirrorPoints = false; }
    return (__assign({}, exports.generateScatterData(entry, mirrorPoints), { type: data_1.PLOTLY_CHART_TYPE.scattergl }));
};
/**
 * Generate data in the expected format for a Scatter plot.
 *
 * @param entry A unit of Plotly data containing points, color, name, and any extras.
 * @param mirrorPoints Should we mirror the points on the x/y axis?
 * @returns Data suitable for consumption by Plotly.
 */
exports.generateScatterData = function (entry, mirrorPoints) {
    if (mirrorPoints === void 0) { mirrorPoints = false; }
    var marker = entry.marker, points = entry.points, hoverinfo = entry.hoverinfo, subtitle = entry.subtitle, name = entry.name, text = entry.text;
    var xValues = points.map(function (data) { return data.i; });
    var yValues = points.map(function (data) { return data.j; });
    var zValues = points.map(function (data) { return (data.dist ? data.dist : -1); });
    var textValues = text ? (Array.isArray(text) ? text : [text]) : [];
    return {
        hoverinfo: hoverinfo ? hoverinfo : 'x+y+z',
        marker: __assign({ color: derivePlotlyColor(mirrorPoints, zValues, entry), size: entry.nodeSize }, marker),
        mode: 'markers',
        name: name + " " + subtitle,
        text: mirrorPoints
            ? __spread(textValues, textValues.map(
            // Given a coordinate '(x, y)', create '(y, x)' - needed because we have custom hover labels.
            function (coord) {
                return "(" + coord
                    .substr(1, coord.length - 2)
                    .split(', ')
                    .reverse()
                    .join(', ') + ")";
            })) : textValues,
        type: data_1.PLOTLY_CHART_TYPE.scatter,
        x: mirrorPoints ? __spread(xValues, yValues) : xValues,
        y: mirrorPoints ? __spread(yValues, xValues) : yValues,
        z: mirrorPoints ? __spread(zValues, zValues) : zValues,
    };
};
var derivePlotlyColor = function (mirrorPoints, zValues, entry) {
    var totalColors = mirrorPoints ? zValues.length * 2 : zValues.length;
    var result = new Array(totalColors);
    if (entry.marker && typeof entry.marker.color === 'string') {
        return result.fill(entry.marker.color);
    }
    else {
        var zStrings = zValues.map(function (val) { return val.toString(); });
        return mirrorPoints ? __spread(zStrings, zStrings) : zStrings;
    }
};
exports.generateFloat32ArrayFromContacts = function (array) {
    var result = new Float32Array(array.length * 2);
    array.forEach(function (item, index) {
        result[index * 2] = item.i;
        result[index * 2 + 1] = item.j;
    });
    return result;
};
/**
 * Generate data in the expected format for a Plotly PointCloud.
 *
 * @param entry A unit of Plotly data containing points, color, and any extras.
 * @param mirrorPoints Should we mirror the points on the x/y axis?
 * @returns Data suitable for consumption by Plotly.
 */
exports.generatePointCloudData = function (entry, mirrorPoints) {
    if (mirrorPoints === void 0) { mirrorPoints = false; }
    var points = entry.points;
    var coords = exports.generateFloat32ArrayFromContacts(points);
    return {
        marker: __assign({}, entry.marker, { sizemax: entry.nodeSize * 2, sizemin: entry.nodeSize }),
        mode: 'markers',
        type: data_1.PLOTLY_CHART_TYPE.pointcloud,
        xy: mirrorPoints
            ? new Float32Array(__spread(Array.from(coords), Array.from(coords)
                .slice()
                .reverse()))
            : coords,
    };
};


/***/ }),

/***/ "./src/helper/ResidueMapper.ts":
/*!*************************************!*\
  !*** ./src/helper/ResidueMapper.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var UNI_PROT_RESNO_HEADER = 'up_index';
var UNI_PROT_RESNAME_HEADER = 'up_residue';
var PDB_RESNO_HEADER = 'pdb_index';
var PDB_RESNAME_HEADER = 'pdb_residue';
var EV_SERVER_COUPLING_HEADER = 'id';
var EV_SERVER_STRUCTURE_HEADER = 'coord_id';
var EV_SERVER_STRUCTURE_CODE_HEADER = 'one_letter_code';
var EVFOLD_EXPECTED_HEADERS = [UNI_PROT_RESNO_HEADER, UNI_PROT_RESNAME_HEADER, PDB_RESNO_HEADER, PDB_RESNAME_HEADER];
var EVSERVER_EXPECTED_HEADERS = [
    EV_SERVER_COUPLING_HEADER,
    EV_SERVER_STRUCTURE_HEADER,
    EV_SERVER_STRUCTURE_CODE_HEADER,
];
/**
 * Determines the mapping of residues from a UniProt file to a PDB, given a indextableplus file.
 *
 * @description This file is, semantically, a csv with 4 headers:
 *
 * up_index - UniProt residue number.
 *
 * up_residue - UniProt residue name.
 *
 * pdb_index - PDB residue number.
 *
 * pdb_residue - PDB residue name.
 *
 * @param text The contents of a indextableplus file.
 * @returns Array of all residue mappings.
 */
exports.generateResidueMapping = function (text) {
    var tabOrCommaRegex = /\t|,/;
    var headers = text.split('\n')[0].split(tabOrCommaRegex);
    var isEvServer = isEvServerJob(headers);
    var headerMap = getResidueMappingHeaders(headers, isEvServer);
    var couplingsResnoIndex = isEvServer ? headerMap[EV_SERVER_COUPLING_HEADER] : headerMap[UNI_PROT_RESNO_HEADER];
    var structureResnoIndex = isEvServer ? headerMap[EV_SERVER_STRUCTURE_HEADER] : headerMap[PDB_RESNO_HEADER];
    var structureResCodeIndex = isEvServer ? headerMap[EV_SERVER_STRUCTURE_CODE_HEADER] : headerMap[PDB_RESNAME_HEADER];
    return text
        .split('\n')
        .slice(1)
        .reduce(function (result, line) {
        var splitLine = line.split(tabOrCommaRegex);
        if (splitLine.length >= EVFOLD_EXPECTED_HEADERS.length) {
            result.push({
                couplingsResCode: isEvServer
                    ? splitLine[structureResCodeIndex]
                    : splitLine[headerMap[UNI_PROT_RESNAME_HEADER]],
                couplingsResno: parseInt(splitLine[couplingsResnoIndex], 10),
                pdbResCode: splitLine[structureResCodeIndex],
                pdbResno: parseInt(splitLine[structureResnoIndex], 10),
            });
        }
        return result;
    }, new Array());
};
var getResidueMappingHeaders = function (headers, isEvServer) {
    var headerMap = {};
    var expectedHeaders = isEvServer ? EVSERVER_EXPECTED_HEADERS : EVFOLD_EXPECTED_HEADERS;
    if (headers.length >= EVFOLD_EXPECTED_HEADERS.length) {
        expectedHeaders.map(function (header) {
            if (!headers.includes(header)) {
                throw new Error("Missing error " + header + " in residue mapping file!");
            }
            headerMap[header] = headers.indexOf(header);
        });
    }
    return headerMap;
};
var isEvServerJob = function (headers) {
    var e_1, _a;
    try {
        for (var EVSERVER_EXPECTED_HEADERS_1 = __values(EVSERVER_EXPECTED_HEADERS), EVSERVER_EXPECTED_HEADERS_1_1 = EVSERVER_EXPECTED_HEADERS_1.next(); !EVSERVER_EXPECTED_HEADERS_1_1.done; EVSERVER_EXPECTED_HEADERS_1_1 = EVSERVER_EXPECTED_HEADERS_1.next()) {
            var header = EVSERVER_EXPECTED_HEADERS_1_1.value;
            if (!headers.includes(header)) {
                return false;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (EVSERVER_EXPECTED_HEADERS_1_1 && !EVSERVER_EXPECTED_HEADERS_1_1.done && (_a = EVSERVER_EXPECTED_HEADERS_1.return)) _a.call(EVSERVER_EXPECTED_HEADERS_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return true;
};


/***/ }),

/***/ "./src/helper/StringHelper.ts":
/*!************************************!*\
  !*** ./src/helper/StringHelper.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:export-name
exports.capitalizeFirstLetter = function (text) {
    return "" + text.substr(0, 1).toLocaleUpperCase() + text.substr(1).toLocaleLowerCase();
};


/***/ }),

/***/ "./src/helper/index.ts":
/*!*****************************!*\
  !*** ./src/helper/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./ColorMapper */ "./src/helper/ColorMapper.ts"));
__export(__webpack_require__(/*! ./CouplingMapper */ "./src/helper/CouplingMapper.ts"));
__export(__webpack_require__(/*! ./DataHelper */ "./src/helper/DataHelper.ts"));
__export(__webpack_require__(/*! ./FetchHelper */ "./src/helper/FetchHelper.ts"));
__export(__webpack_require__(/*! ./NGLHelper */ "./src/helper/NGLHelper.ts"));
__export(__webpack_require__(/*! ./PlotlyHelper */ "./src/helper/PlotlyHelper.ts"));
__export(__webpack_require__(/*! ./ResidueMapper */ "./src/helper/ResidueMapper.ts"));
__export(__webpack_require__(/*! ./StringHelper */ "./src/helper/StringHelper.ts"));


/***/ }),

/***/ "./src/hoc/ContextConsumerComposer.tsx":
/*!*********************************************!*\
  !*** ./src/hoc/ContextConsumerComposer.tsx ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var ContextConsumerComposer = /** @class */ (function (_super) {
    __extends(ContextConsumerComposer, _super);
    function ContextConsumerComposer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContextConsumerComposer.prototype.render = function () {
        var _a = this.props, children = _a.children, components = _a.components;
        return renderRecursive(children, components);
    };
    return ContextConsumerComposer;
}(React.Component));
exports.ContextConsumerComposer = ContextConsumerComposer;
/**
 * Recursively build up elements from props.components and accumulate `results` along the way.
 */
var renderRecursive = function (render, remaining, results) {
    if (results === void 0) { results = []; }
    // Once components is exhausted, we can render out the results array.
    if (!remaining[0]) {
        return render(results);
    }
    // Continue recursion for remaining items.
    // results.concat([value]) ensures [...results, value] instead of [...results, ...value]
    function nextRender(value) {
        return renderRecursive(render, remaining.slice(1), results.concat([value]));
    }
    var Item = remaining[0];
    // When it is an element, enhance the element's props with the render prop.
    return React.cloneElement(React.createElement(Item, null, nextRender), { displayName: Item.displayName });
};


/***/ }),

/***/ "./src/hoc/index.ts":
/*!**************************!*\
  !*** ./src/hoc/index.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./ContextConsumerComposer */ "./src/hoc/ContextConsumerComposer.tsx"));


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./component */ "./src/component/index.ts"));
__export(__webpack_require__(/*! ./container */ "./src/container/index.ts"));
__export(__webpack_require__(/*! ./context */ "./src/context/index.ts"));
__export(__webpack_require__(/*! ./data */ "./src/data/index.ts"));
__export(__webpack_require__(/*! ./helper */ "./src/helper/index.ts"));
__export(__webpack_require__(/*! ./hoc */ "./src/hoc/index.ts"));
__export(__webpack_require__(/*! ./page */ "./src/page/index.ts"));
__export(__webpack_require__(/*! ./ChellVizApp */ "./src/ChellVizApp.tsx"));


/***/ }),

/***/ "./src/page/DatasetPage.tsx":
/*!**********************************!*\
  !*** ./src/page/DatasetPage.tsx ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = __webpack_require__(/*! immutable */ "./node_modules/immutable/dist/immutable.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var container_1 = __webpack_require__(/*! ~chell-viz~/container */ "./src/container/index.ts");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var DatasetPage = /** @class */ (function (_super) {
    __extends(DatasetPage, _super);
    function DatasetPage(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            datasetLocation: '',
            visualizations: immutable_1.List(),
        };
        return _this;
    }
    DatasetPage.prototype.componentDidMount = function () {
        if (this.props.location) {
            this.setupSearchParameters(this.props.location.search);
        }
    };
    DatasetPage.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.location && this.props.location !== prevProps.location) {
            this.setupSearchParameters(this.props.location.search);
        }
    };
    DatasetPage.prototype.render = function () {
        var _this = this;
        var _a = this.state, visualizations = _a.visualizations, datasetLocation = _a.datasetLocation;
        return (React.createElement("div", { style: { padding: '20px' } },
            React.createElement(semantic_ui_react_1.Grid, { centered: true, stackable: true, stretched: false, padded: true, columns: 2 }, datasetLocation.length >= 1 &&
                visualizations.map(function (visualization, index) { return (React.createElement(semantic_ui_react_1.Grid.Column, { key: "dataset-visualization-" + index, style: { width: 'auto' } }, _this.renderVisualization(visualization, datasetLocation))); }))));
    };
    DatasetPage.prototype.setupSearchParameters = function (query) {
        var params = new URLSearchParams(query);
        // tslint:disable-next-line:no-backbone-get-set-outside-model
        var datasetLocation = params.get('name');
        var visualizations = immutable_1.fromJS(params.getAll('viz'));
        this.setState({
            datasetLocation: datasetLocation ? datasetLocation : '',
            visualizations: visualizations,
        });
    };
    DatasetPage.prototype.renderVisualization = function (viz, datasetLocation) {
        var isFullPage = this.state.visualizations.size === 1;
        switch (viz) {
            case data_1.VizData.spring.name.toLocaleLowerCase():
                return React.createElement(container_1.SpringContainer, { datasetLocation: datasetLocation, isFullPage: isFullPage });
            case data_1.VizData.tfjsTsne.name.toLocaleLowerCase():
                return React.createElement(container_1.TensorTContainer, { datasetLocation: datasetLocation, isFullPage: isFullPage });
            case data_1.VizData.anatomogram.name.toLocaleLowerCase():
                return React.createElement(container_1.AnatomogramContainer, { species: datasetLocation.includes('hpc') ? 'homo_sapiens' : 'mus_musculus' });
            default:
                return React.createElement(semantic_ui_react_1.Message, { error: true }, "Currently unsupported visualization '" + viz + "'");
        }
    };
    return DatasetPage;
}(React.Component));
exports.DatasetPage = DatasetPage;


/***/ }),

/***/ "./src/page/LandingPage.tsx":
/*!**********************************!*\
  !*** ./src/page/LandingPage.tsx ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var react_router_dom_1 = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/es/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var LandingPage = /** @class */ (function (_super) {
    __extends(LandingPage, _super);
    function LandingPage(props) {
        return _super.call(this, props) || this;
    }
    LandingPage.prototype.render = function () {
        return (React.createElement(semantic_ui_react_1.Container, { fluid: false },
            React.createElement(semantic_ui_react_1.Segment, { basic: true, padded: 'very' },
                React.createElement(semantic_ui_react_1.Grid, { centered: true, padded: true, relaxed: true },
                    this.renderFeaturedStories(),
                    this.renderFeaturedVisualizations(),
                    this.renderFeaturedDatasets()))));
    };
    LandingPage.prototype.renderSingleVisualization = function (viz) {
        return (React.createElement(semantic_ui_react_1.Grid.Row, { columns: 3 },
            React.createElement(semantic_ui_react_1.Grid.Column, { width: 2 },
                React.createElement("img", { src: "assets/icons/" + viz.name.toLocaleLowerCase() + "-thumbnail.png", style: { height: '90px', width: '90px' }, alt: "viz " + viz.name + " icon" })),
            React.createElement(semantic_ui_react_1.Grid.Column, { textAlign: 'left', width: 8 },
                React.createElement(semantic_ui_react_1.Header, null, viz.name),
                viz.summary,
                React.createElement("p", null,
                    React.createElement("span", { style: { fontWeight: 'bold' } },
                        viz.listAsOriginal ? 'Original authors' : 'Authors',
                        ": "),
                    viz.authors.length === 2 ? viz.authors[0] + " and " + viz.authors[1] : viz.authors.join(', ')),
                React.createElement("br", null)),
            React.createElement(semantic_ui_react_1.Grid.Column, { width: 2 },
                React.createElement(semantic_ui_react_1.Grid.Row, null,
                    React.createElement(semantic_ui_react_1.Button, { basic: true },
                        React.createElement(react_router_dom_1.Link, { to: { pathname: '/visualizations/', search: "?name=" + viz.name.toLocaleLowerCase() } }, "details"))),
                React.createElement(semantic_ui_react_1.Grid.Row, null,
                    React.createElement(semantic_ui_react_1.Button, { basic: true },
                        React.createElement(react_router_dom_1.Link, { to: { pathname: '/dataset', search: "?viz=" + viz.name.toLocaleLowerCase() } }, "launch"))))));
    };
    LandingPage.prototype.renderFeaturedDatasets = function () {
        return (React.createElement(React.Fragment, null,
            React.createElement(semantic_ui_react_1.Grid.Row, { centered: true },
                React.createElement(semantic_ui_react_1.Grid.Column, { width: 12 },
                    React.createElement(semantic_ui_react_1.Header, { floated: 'left' }, "Featured Datasets"),
                    React.createElement(semantic_ui_react_1.Divider, { section: true }))),
            React.createElement(semantic_ui_react_1.Grid.Row, { columns: 2, divided: true },
                this.renderHCADatasets(),
                this.renderUserSharedDatasets()),
            React.createElement(semantic_ui_react_1.Grid.Row, { centered: false },
                React.createElement(semantic_ui_react_1.Grid.Column, { width: 12 },
                    React.createElement(react_router_dom_1.Link, { style: { color: 'blue', float: 'right' }, to: 'datasets' }, "more datasets...")))));
    };
    LandingPage.prototype.renderFeaturedStories = function () {
        return (React.createElement(React.Fragment, null,
            React.createElement(semantic_ui_react_1.Grid.Row, { centered: false },
                React.createElement(semantic_ui_react_1.Grid.Column, { width: 12 },
                    React.createElement(semantic_ui_react_1.Header, { floated: 'left' }, "Featured Stories"),
                    React.createElement(semantic_ui_react_1.Divider, { section: true }))),
            this.renderSingleFeaturedStory(data_1.Stories[0]),
            this.renderSingleFeaturedStory(data_1.Stories[1]),
            React.createElement(semantic_ui_react_1.Grid.Row, { centered: false },
                React.createElement(semantic_ui_react_1.Grid.Column, { width: 12 },
                    React.createElement(react_router_dom_1.Link, { style: { color: 'blue', float: 'right' }, to: 'stories' }, "more stories...")))));
    };
    LandingPage.prototype.renderFeaturedVisualizations = function () {
        return (React.createElement(React.Fragment, null,
            React.createElement(semantic_ui_react_1.Grid.Row, { centered: false },
                React.createElement(semantic_ui_react_1.Grid.Column, { width: 12 },
                    React.createElement(semantic_ui_react_1.Header, { floated: 'left' }, "Featured Visualizations"),
                    React.createElement(semantic_ui_react_1.Divider, { section: true }))),
            this.renderSingleVisualization(data_1.VizData.spring),
            this.renderSingleVisualization(data_1.VizData.tfjsTsne),
            React.createElement(semantic_ui_react_1.Grid.Row, { centered: false },
                React.createElement(semantic_ui_react_1.Grid.Column, { width: 12 },
                    React.createElement(react_router_dom_1.Link, { style: { color: 'blue', float: 'right' }, to: 'visualizations' }, "more visualizations...")))));
    };
    LandingPage.prototype.renderSingleFeaturedStory = function (story) {
        return (React.createElement(semantic_ui_react_1.Grid.Row, { columns: 3 },
            React.createElement(semantic_ui_react_1.Grid.Column, { width: 2 },
                React.createElement("img", { src: story.icon, style: { height: '90px', width: '90px' }, alt: "story " + story.title + " icon" })),
            React.createElement(semantic_ui_react_1.Grid.Column, { textAlign: 'left', width: 8 },
                React.createElement(semantic_ui_react_1.Header, null, story.title),
                React.createElement("p", null,
                    React.createElement("span", { style: { fontWeight: 'bold' } }, "Description: "),
                    story.description),
                React.createElement("p", null,
                    React.createElement("span", { style: { fontWeight: 'bold' } }, "Analysis authors: "),
                    story.authors.length === 2 ? story.authors[0] + " and " + story.authors[1] : story.authors.join(', ')),
                React.createElement("br", null)),
            React.createElement(semantic_ui_react_1.Grid.Column, { width: 2 },
                React.createElement(semantic_ui_react_1.Button, { basic: true },
                    React.createElement(react_router_dom_1.Link, { to: story.link }, "launch")))));
    };
    LandingPage.prototype.renderHCADatasets = function () {
        return (React.createElement(semantic_ui_react_1.Grid.Column, { width: 3 },
            React.createElement(semantic_ui_react_1.Grid.Row, null,
                React.createElement("img", { src: 'assets/icons/hca-logo.png', style: { width: '150px', height: '250px' }, alt: 'human cell atlas logo' }),
                React.createElement(semantic_ui_react_1.Grid.Row, null,
                    React.createElement("a", { href: 'https://preview.data.humancellatlas.org/' }, "Search HCA datasets ...")))));
    };
    LandingPage.prototype.renderSingleUserSharedDatasets = function (dataset) {
        return (React.createElement(semantic_ui_react_1.Grid.Row, { columns: 2 },
            React.createElement(semantic_ui_react_1.Grid.Column, { floated: 'left' },
                React.createElement(semantic_ui_react_1.Header, null, dataset.name),
                React.createElement("p", null,
                    dataset.summary,
                    React.createElement("br", null),
                    React.createElement("span", { style: { fontWeight: 'bold' } }, "Authors: "),
                    dataset.authors.join(', '))),
            React.createElement(semantic_ui_react_1.Grid.Column, { floated: 'right' },
                React.createElement(semantic_ui_react_1.Button, { basic: true, floated: 'right' },
                    React.createElement(react_router_dom_1.Link, { to: dataset.links.detail }, "details")),
                React.createElement(semantic_ui_react_1.Button, { basic: true, floated: 'right' },
                    React.createElement(react_router_dom_1.Link, { to: dataset.links.analysis }, "analyze")))));
    };
    LandingPage.prototype.renderUserSharedDatasets = function () {
        return (React.createElement(semantic_ui_react_1.Grid.Column, { stretched: true, textAlign: 'left', width: 8 },
            React.createElement(semantic_ui_react_1.Grid.Row, { textAlign: 'center' },
                React.createElement(semantic_ui_react_1.Header, { as: 'h2', textAlign: 'center' }, "User shared")),
            React.createElement("br", null),
            React.createElement(semantic_ui_react_1.Grid.Row, null, this.renderSingleUserSharedDatasets(data_1.userDatasets[0])),
            React.createElement(semantic_ui_react_1.Grid.Row, null, this.renderSingleUserSharedDatasets(data_1.userDatasets[1]))));
    };
    return LandingPage;
}(React.Component));
exports.LandingPage = LandingPage;


/***/ }),

/***/ "./src/page/StoriesPage.tsx":
/*!**********************************!*\
  !*** ./src/page/StoriesPage.tsx ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var react_router_dom_1 = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/es/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var StoriesPage = /** @class */ (function (_super) {
    __extends(StoriesPage, _super);
    function StoriesPage(props) {
        return _super.call(this, props) || this;
    }
    StoriesPage.prototype.render = function () {
        var _this = this;
        return (React.createElement(semantic_ui_react_1.Grid, { centered: true, divided: 'vertically', padded: true, relaxed: false }, data_1.Stories.map(function (story, index) { return (React.createElement(React.Fragment, { key: "story-" + index }, _this.renderSingleFeaturedStory(story))); })));
    };
    StoriesPage.prototype.renderSingleFeaturedStory = function (story) {
        return (React.createElement(semantic_ui_react_1.Grid.Row, { columns: 3 },
            React.createElement(semantic_ui_react_1.Grid.Column, null,
                React.createElement("img", { src: story.icon, style: { height: '90px', width: '90px' }, alt: "story " + story.title + " icon" })),
            React.createElement(semantic_ui_react_1.Grid.Column, { textAlign: 'left' },
                React.createElement(semantic_ui_react_1.Header, null, story.title),
                React.createElement("p", null,
                    React.createElement("span", { style: { fontWeight: 'bold' } }, "Description: "),
                    story.description),
                React.createElement("p", null,
                    React.createElement("span", { style: { fontWeight: 'bold' } }, "Analysis authors: "),
                    story.authors.length === 2 ? story.authors[0] + " and " + story.authors[1] : story.authors.join(', ')),
                React.createElement("br", null)),
            React.createElement(semantic_ui_react_1.Grid.Column, null,
                React.createElement(semantic_ui_react_1.Button, { basic: true },
                    React.createElement(react_router_dom_1.Link, { to: story.link }, "launch")))));
    };
    return StoriesPage;
}(React.Component));
exports.StoriesPage = StoriesPage;


/***/ }),

/***/ "./src/page/VisualizationsPage.tsx":
/*!*****************************************!*\
  !*** ./src/page/VisualizationsPage.tsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var react_router_dom_1 = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/es/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var VisualizationsPage = /** @class */ (function (_super) {
    __extends(VisualizationsPage, _super);
    function VisualizationsPage(props) {
        return _super.call(this, props) || this;
    }
    VisualizationsPage.prototype.render = function () {
        return (React.createElement(semantic_ui_react_1.List, { divided: true },
            React.createElement(semantic_ui_react_1.List.Item, null, this.renderVisualizationItem(data_1.VizData.spring)),
            React.createElement(semantic_ui_react_1.List.Item, null, this.renderVisualizationItem(data_1.VizData.tfjsTsne)),
            React.createElement(semantic_ui_react_1.List.Item, null, this.renderVisualizationItem(data_1.VizData.anatomogram))));
    };
    VisualizationsPage.prototype.renderVisualizationItem = function (viz) {
        return (React.createElement(semantic_ui_react_1.Grid, { centered: true, columns: 3, padded: true, relaxed: true },
            React.createElement(semantic_ui_react_1.Grid.Column, null,
                React.createElement("img", { src: "assets/icons/" + viz.name.toLocaleLowerCase() + "-thumbnail.png", alt: "icon for " + viz.name, style: { height: '100px' } })),
            React.createElement(semantic_ui_react_1.Grid.Column, { textAlign: 'left' },
                React.createElement(semantic_ui_react_1.Header, { as: 'h2' }, viz.name),
                React.createElement(semantic_ui_react_1.List, null,
                    React.createElement(semantic_ui_react_1.List.Item, null, "" + (viz.listAsOriginal ? 'original: ' : '') + viz.authors.join(', ')),
                    React.createElement(semantic_ui_react_1.List.Item, null, viz.summary),
                    React.createElement(semantic_ui_react_1.List.Item, null, "relevant data: " + viz.relevantData))),
            React.createElement(semantic_ui_react_1.Grid.Column, { stretched: true },
                React.createElement(semantic_ui_react_1.Grid.Row, null,
                    React.createElement(semantic_ui_react_1.Button, { basic: true },
                        React.createElement(react_router_dom_1.Link, { to: { pathname: '/visualizations/', search: "?name=" + viz.name.toLocaleLowerCase() } }, "details"))),
                React.createElement(semantic_ui_react_1.Grid.Row, null,
                    React.createElement(semantic_ui_react_1.Button, { basic: true },
                        React.createElement(react_router_dom_1.Link, { to: { pathname: '/dataset', search: "?viz=" + viz.name.toLocaleLowerCase() } }, "launch"))))));
    };
    return VisualizationsPage;
}(React.Component));
exports.VisualizationsPage = VisualizationsPage;


/***/ }),

/***/ "./src/page/VizOverviewPage.tsx":
/*!**************************************!*\
  !*** ./src/page/VizOverviewPage.tsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var semantic_ui_react_1 = __webpack_require__(/*! semantic-ui-react */ "./node_modules/semantic-ui-react/dist/es/index.js");
var react_router_dom_1 = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/es/index.js");
var data_1 = __webpack_require__(/*! ~chell-viz~/data */ "./src/data/index.ts");
var VizOverviewPage = /** @class */ (function (_super) {
    __extends(VizOverviewPage, _super);
    function VizOverviewPage(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            currentViz: null,
        };
        return _this;
    }
    VizOverviewPage.prototype.componentDidMount = function () {
        this.setupCurrentViz();
    };
    VizOverviewPage.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.location !== prevProps.location) {
            this.setupCurrentViz();
        }
    };
    VizOverviewPage.prototype.render = function () {
        return (this.state.currentViz && (React.createElement(semantic_ui_react_1.Container, null,
            this.renderOverview(this.state.currentViz),
            this.renderExamples(this.state.currentViz.examples))));
    };
    VizOverviewPage.prototype.renderOverview = function (viz) {
        return (React.createElement(semantic_ui_react_1.Grid, { centered: true, columns: 2 },
            React.createElement(semantic_ui_react_1.Grid.Column, { width: 2 },
                React.createElement("img", { alt: "icon for " + viz.name, src: "assets/icons/" + viz.name.toLocaleLowerCase() + "-icon.png", style: { height: '150px', padding: '20px' } })),
            React.createElement(semantic_ui_react_1.Grid.Column, { textAlign: 'left' },
                React.createElement(semantic_ui_react_1.Header, { as: 'h1' },
                    viz.name,
                    React.createElement(semantic_ui_react_1.Header.Subheader, null, viz.authors.join(', '))),
                React.createElement(React.Fragment, null,
                    React.createElement("p", null, viz.detailedSummary),
                    React.createElement(semantic_ui_react_1.List, null,
                        React.createElement(semantic_ui_react_1.List.Item, null,
                            "applicable data: ",
                            viz.relevantData),
                        React.createElement(semantic_ui_react_1.List.Item, null,
                            "compatible with: ",
                            viz.compatibility.join(', ')),
                        React.createElement(semantic_ui_react_1.List.Item, null,
                            "citation(s):",
                            ' ',
                            viz.citations.map(function (citation, index) { return (React.createElement(React.Fragment, { key: viz.name.toLocaleLowerCase() + "-citation-" + index },
                                citation.fullCitation,
                                " (",
                                React.createElement("a", { href: citation.link }, "link"),
                                ")")); })),
                        React.createElement(semantic_ui_react_1.List.Item, null,
                            "version: ",
                            viz.repo.version,
                            " (last updated ",
                            viz.repo.lastUpdate,
                            "),",
                            React.createElement("a", { href: viz.repo.link }, " github link")),
                        React.createElement(semantic_ui_react_1.List.Item, null,
                            React.createElement(semantic_ui_react_1.Grid.Column, { floated: 'right' },
                                React.createElement(semantic_ui_react_1.Button, { basic: true, icon: true, labelPosition: 'right' },
                                    React.createElement(react_router_dom_1.Link, { to: { pathname: '/dataset', search: "?viz=" + viz.name.toLocaleLowerCase() } }, "launch " + viz.name),
                                    React.createElement(semantic_ui_react_1.Icon, { name: 'external alternate' })))))))));
    };
    VizOverviewPage.prototype.renderExamples = function (examples) {
        var _this = this;
        var panels = [
            {
                content: {
                    content: (React.createElement(React.Fragment, null,
                        React.createElement(semantic_ui_react_1.Divider, null),
                        React.createElement(semantic_ui_react_1.Grid, { centered: true, columns: 1, container: true, divided: 'vertically', style: { padding: '10px 0' } }, examples.map(function (example, index) { return (React.createElement(semantic_ui_react_1.Grid.Row, { columns: 2, key: "viz-example-" + index }, _this.renderExampleEntry(example))); })))),
                },
                key: 'examples',
                title: 'example stories',
            },
            {
                content: 'coming soon!',
                key: 'learn',
                title: 'learn',
            },
        ];
        return React.createElement(semantic_ui_react_1.Accordion, { panels: panels, defaultActiveIndex: 0 });
    };
    VizOverviewPage.prototype.renderExampleEntry = function (example) {
        return (React.createElement(React.Fragment, null,
            React.createElement(semantic_ui_react_1.Grid.Column, { width: 2 },
                React.createElement("img", { src: example.icon, alt: example.name + " icon", style: { height: '75px', width: '75px' } })),
            React.createElement(semantic_ui_react_1.Grid.Column, { textAlign: 'left', width: 8 },
                React.createElement(semantic_ui_react_1.Header, null, example.name),
                React.createElement("p", null, example.summary)),
            React.createElement(semantic_ui_react_1.Grid.Column, { floated: 'right' },
                React.createElement(semantic_ui_react_1.Button, { basic: true, icon: true, labelPosition: 'right' },
                    React.createElement(react_router_dom_1.Link, { to: example.link }, 'launch example'),
                    React.createElement(semantic_ui_react_1.Icon, { name: 'external alternate' })))));
    };
    VizOverviewPage.prototype.setupCurrentViz = function () {
        var params = new URLSearchParams(this.props.location ? this.props.location.search : '');
        // tslint:disable-next-line:no-backbone-get-set-outside-model
        var vizName = params.get('name');
        if (vizName === data_1.VizData.spring.name.toLocaleLowerCase()) {
            this.setState({
                currentViz: data_1.VizData.spring,
            });
        }
        else if (vizName === data_1.VizData.tfjsTsne.name.toLocaleLowerCase()) {
            this.setState({
                currentViz: data_1.VizData.tfjsTsne,
            });
        }
        else if (vizName === data_1.VizData.anatomogram.name.toLocaleLowerCase()) {
            this.setState({
                currentViz: data_1.VizData.anatomogram,
            });
        }
    };
    return VizOverviewPage;
}(React.Component));
exports.VizOverviewPage = VizOverviewPage;


/***/ }),

/***/ "./src/page/index.ts":
/*!***************************!*\
  !*** ./src/page/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./VisualizationsPage */ "./src/page/VisualizationsPage.tsx"));
__export(__webpack_require__(/*! ./DatasetPage */ "./src/page/DatasetPage.tsx"));
__export(__webpack_require__(/*! ./LandingPage */ "./src/page/LandingPage.tsx"));
__export(__webpack_require__(/*! ./StoriesPage */ "./src/page/StoriesPage.tsx"));
__export(__webpack_require__(/*! ./VizOverviewPage */ "./src/page/VizOverviewPage.tsx"));


/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,