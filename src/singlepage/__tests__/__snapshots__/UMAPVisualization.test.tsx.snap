// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UMAPVisualization UMAPSequenceContainer Should render when given a sequence. 1`] = `
<Grid
  centered={true}
  padded={true}
>
  <GridRow>
    <UMAPVisualization
      allSequences={
        Array [
          SeqRecord {
            "alphabet": undefined,
            "annotations": Object {
              "dbxrefs": Array [],
              "description": "<unknown description>",
              "id": "<unknown id>",
              "letterAnnotations": Object {},
              "metadata": Object {},
              "name": "<unknown name>",
            },
            "back_transcribe": [Function],
            "binaryRepresentation": [Function],
            "complement": [Function],
            "determineAlphabet": [Function],
            "equal": [Function],
            "ignoredCharacters": Array [
              "-",
            ],
            "integerRepresentation": [Function],
            "isValidDNA": [Function],
            "isValidProtein": [Function],
            "isValidRNA": [Function],
            "lower": [Function],
            "reverse_complement": [Function],
            "sequence": "gatcctag",
            "subSequence": [Function],
            "toString": [Function],
            "transcribe": [Function],
            "translate": [Function],
            "upper": [Function],
          },
        ]
      }
      dataLabels={
        Array [
          undefined,
        ]
      }
      dataMatrix={
        Array [
          Array [
            0,
            1,
            2,
            3,
            3,
            2,
            1,
            0,
          ],
        ]
      }
      distanceFn={[Function]}
      errorMessages={Array []}
      labelCategory="class"
      minDist={0.99}
      nComponents={2}
      nNeighbors={15}
      numIterationsBeforeReRender={1}
      numSequencesToShow={4000}
      spread={1}
      tooltipNames={
        Array [
          "<unknown name>",
        ]
      }
    />
  </GridRow>
</Grid>
`;

exports[`UMAPVisualization UMAPSequenceContainer Should render when given an empty sequence. 1`] = `
<Grid
  centered={true}
  padded={true}
>
  <GridRow>
    <UMAPVisualization
      allSequences={Array []}
      dataLabels={Array []}
      dataMatrix={Array []}
      distanceFn={[Function]}
      errorMessages={Array []}
      labelCategory="class"
      minDist={0.99}
      nComponents={2}
      nNeighbors={15}
      numIterationsBeforeReRender={1}
      numSequencesToShow={4000}
      spread={1}
      tooltipNames={Array []}
    />
  </GridRow>
</Grid>
`;

exports[`UMAPVisualization UMAPTranscriptionalContainer Should render when given an empty data matrix. 1`] = `
<UMAPVisualization
  dataLabels={Array []}
  dataMatrix={
    Array [
      Array [],
    ]
  }
  distanceFn={[Function]}
  errorMessages={Array []}
  minDist={0.99}
  nComponents={2}
  nNeighbors={15}
  numIterationsBeforeReRender={1}
  numSamplesToShow={4000}
  spread={1}
  tooltipNames={Array []}
/>
`;

exports[`UMAPVisualization UMAPVisualization Should render when given an empty data matrix. 1`] = `
<div>
  <ComponentCard
    componentName="UMAP"
    dockItems={
      Array [
        Object {
          "isLink": false,
          "text": "0 sequences | ",
        },
      ]
    }
    expandedStyle={
      Object {
        "height": "80vh",
        "width": "calc(0px + 80vh)",
      }
    }
    frameHeight={0}
    frameWidth={0}
    headerHeight={20}
    height="525px"
    iconSrc="https://bioblocks.org/media/5d3f528028d9720a3428e4b2"
    isDataReady={false}
    isFramedComponent={false}
    isFullPage={false}
    menuItems={
      Array [
        Object {
          "component": Object {
            "configs": Object {
              "Settings": Array [
                Object {
                  "marks": Object {
                    "0": "0",
                    "5": "5",
                  },
                  "name": "Min Dist",
                  "onChange": [Function],
                  "step": 0.01,
                  "type": "SLIDER",
                  "values": Object {
                    "current": 0.99,
                    "defaultValue": 0.99,
                    "max": 5,
                    "min": 0,
                  },
                },
                Object {
                  "marks": Object {
                    "0": "0",
                    "30": "30",
                  },
                  "name": "Neighbors",
                  "onChange": [Function],
                  "step": 1,
                  "type": "SLIDER",
                  "values": Object {
                    "current": 15,
                    "defaultValue": 15,
                    "max": 30,
                    "min": 0,
                  },
                },
                Object {
                  "marks": Object {
                    "0": "0",
                    "10": "10",
                  },
                  "name": "Spread",
                  "onChange": [Function],
                  "step": 1,
                  "type": "SLIDER",
                  "values": Object {
                    "current": 1,
                    "defaultValue": 1,
                    "max": 10,
                    "min": 0,
                  },
                },
                Object {
                  "current": "2",
                  "name": "Dimensions",
                  "onChange": [Function],
                  "options": Array [
                    "2",
                    "3",
                  ],
                  "type": "RADIO",
                },
                Object {
                  "name": "Re-Run UMAP",
                  "onClick": [Function],
                  "type": "BUTTON",
                },
              ],
            },
            "name": "POPUP",
            "props": Object {
              "disabled": true,
              "position": "top center",
              "wide": false,
            },
          },
          "description": "Settings",
        },
      ]
    }
    padding={0}
    showSettings={false}
    width="525px"
  >
    <PlotlyChart
      config={Object {}}
      data={Array []}
      height="100%"
      layout={
        Object {
          "autosize": true,
          "dragmode": "zoom",
          "hovermode": "closest",
          "legend": Object {
            "itemdoubleclick": false,
            "traceorder": "grouped",
            "x": 1,
            "y": 1,
          },
          "margin": Object {
            "b": 20,
          },
          "showlegend": false,
          "title": "",
          "xaxis": Object {
            "autorange": false,
            "range": Array [
              20,
              -20,
            ],
          },
          "yaxis": Object {
            "autorange": false,
            "range": Array [
              20,
              -20,
            ],
          },
        }
      }
      onLegendClickCallback={[Function]}
      showLoader={true}
      width="100%"
    />
  </ComponentCard>
</div>
`;
