// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UMAPVisualization UMAPSequenceContainer Should render when given a sequence. 1`] = `
<UMAPVisualization
  allSequences={
    Array [
      SeqRecord {
        "alphabet": undefined,
        "annotations": Object {
          "dbxrefs": Array [],
          "description": "<unknown description>",
          "id": "<unknown id>",
          "letterAnnotations": Object {},
          "metadata": Object {},
          "name": "<unknown name>",
        },
        "back_transcribe": [Function],
        "binaryRepresentation": [Function],
        "complement": [Function],
        "determineAlphabet": [Function],
        "equal": [Function],
        "ignoredCharacters": Array [
          "-",
        ],
        "integerRepresentation": [Function],
        "isValidDNA": [Function],
        "isValidProtein": [Function],
        "isValidRNA": [Function],
        "lower": [Function],
        "reverse_complement": [Function],
        "sequence": "gatcctag",
        "subSequence": [Function],
        "toString": [Function],
        "transcribe": [Function],
        "translate": [Function],
        "upper": [Function],
      },
    ]
  }
  dataLabels={
    Array [
      undefined,
    ]
  }
  dataMatrix={
    Array [
      Array [
        0,
        1,
        2,
        3,
        3,
        2,
        1,
        0,
      ],
    ]
  }
  distanceFn={[Function]}
  errorMessages={Array []}
  labelCategory="class"
  numIterationsBeforeReRender={1}
  numSequencesToShow={2000}
  tooltipNames={
    Array [
      "<unknown name>",
    ]
  }
  xRange={
    Array [
      -20,
      20,
    ]
  }
  yRange={
    Array [
      -20,
      20,
    ]
  }
/>
`;

exports[`UMAPVisualization UMAPSequenceContainer Should render when given an empty sequence. 1`] = `
<UMAPVisualization
  allSequences={Array []}
  dataLabels={Array []}
  dataMatrix={Array []}
  distanceFn={[Function]}
  errorMessages={Array []}
  labelCategory="class"
  numIterationsBeforeReRender={1}
  numSequencesToShow={2000}
  tooltipNames={Array []}
  xRange={
    Array [
      -20,
      20,
    ]
  }
  yRange={
    Array [
      -20,
      20,
    ]
  }
/>
`;

exports[`UMAPVisualization UMAPTranscriptionalContainer Should render when given an empty data matrix. 1`] = `
<UMAPVisualization
  dataLabels={Array []}
  dataMatrix={
    Array [
      Array [],
    ]
  }
  distanceFn={[Function]}
  errorMessages={Array []}
  numIterationsBeforeReRender={1}
  numSamplesToShow={4000}
  tooltipNames={Array []}
  xRange={
    Array [
      -20,
      20,
    ]
  }
  yRange={
    Array [
      -20,
      20,
    ]
  }
/>
`;

exports[`UMAPVisualization UMAPVisualization Should render when given an empty data matrix. 1`] = `
<div>
  <ComponentCard
    componentName="UMAP"
    dockItems={
      Array [
        Object {
          "isLink": false,
          "text": "",
        },
      ]
    }
    frameHeight={0}
    frameWidth={0}
    headerHeight={20}
    height="525px"
    iconSrc="https://bioblocks.org/media/5d3f528028d9720a3428e4b2"
    isDataReady={false}
    isFramedComponent={false}
    isFullPage={false}
    menuItems={Array []}
    padding={0}
    showSettings={false}
    width="525px"
  >
    <PlotlyChart
      config={Object {}}
      data={
        Array [
          Object {
            "marker": Object {
              "color": Array [],
            },
            "mode": "markers",
            "text": undefined,
            "type": "scattergl",
            "x": Float32Array [
              NaN,
            ],
            "y": Float32Array [
              NaN,
            ],
          },
        ]
      }
      height="100%"
      layout={
        Object {
          "autosize": true,
          "dragmode": "zoom",
          "hovermode": "closest",
          "legend": Object {},
          "margin": Object {
            "b": 20,
          },
          "showlegend": false,
          "title": "",
          "xaxis": Object {
            "autorange": false,
            "range": Array [
              -20,
              20,
            ],
          },
          "yaxis": Object {
            "autorange": false,
            "range": Array [
              -20,
              20,
            ],
          },
        }
      }
      showLoader={true}
      width="100%"
    />
  </ComponentCard>
</div>
`;
