// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContactMap Configuration Should match existing snapshot when given configurations. 1`] = `
<div
  className="ContactMapComponent"
  style={Object {}}
>
  <DimmerDimmable
    dimmed={true}
  >
    <Dimmer
      active={false}
    >
      <Loader />
    </Dimmer>
    <ContactMapChart
      candidateResidues={Array []}
      configurations={
        Array [
          Object {
            "name": "Clear Selections",
            "onClick": [Function],
            "type": "BUTTON",
          },
          Object {
            "name": "sample slider",
            "onChange": [MockFunction],
            "type": "SLIDER",
            "values": Object {
              "current": 5,
              "max": 10,
              "min": 0,
            },
          },
          Object {
            "current": "yes",
            "name": "sample radio",
            "onChange": [MockFunction],
            "options": Array [
              "yes",
              "no",
            ],
            "type": "RADIO",
          },
          Object {
            "id": "node-size-slider-0",
            "name": "Node size for Known Structure Contact",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 4,
              "max": 20,
              "min": 1,
            },
          },
          Object {
            "id": "node-size-slider-1",
            "name": "Node size for Selected Residue Pairs",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 6,
              "max": 20,
              "min": 1,
            },
          },
        ]
      }
      contactData={
        Array [
          Object {
            "hoverinfo": "text",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "mode": "lines+markers",
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [],
            "subtitle": "(from PDB structure)",
            "text": Array [],
          },
          Object {
            "hoverinfo": "none",
            "marker": Object {
              "color": Array [],
              "line": Object {
                "color": "#ff8800",
                "width": 3,
              },
              "symbol": "circle-open",
            },
            "mode": "lines+markers",
            "name": "Selected Residue Pairs",
            "nodeSize": 6,
            "points": Array [],
            "subtitle": "",
          },
        ]
      }
      dataTransformFn={[Function]}
      height="100%"
      legendModifiers={
        Object {
          "y": -0.4,
        }
      }
      marginModifiers={
        Object {
          "b": 65,
          "l": 65,
        }
      }
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={70}
      secondaryStructures={Array []}
      selectedSecondaryStructures={
        Array [
          Array [],
        ]
      }
      selectedSecondaryStructuresColor="#feb83f"
      showConfigurations={true}
      width="100%"
    />
  </DimmerDimmable>
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when a single point are hovered. 1`] = `
<div
  className="ContactMapComponent"
  style={Object {}}
>
  <DimmerDimmable
    dimmed={true}
  >
    <Dimmer
      active={false}
    >
      <Loader />
    </Dimmer>
    <ContactMapChart
      candidateResidues={Array []}
      configurations={
        Array [
          Object {
            "name": "Clear Selections",
            "onClick": [Function],
            "type": "BUTTON",
          },
          Object {
            "id": "node-size-slider-0",
            "name": "Node size for Known Structure Contact",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 4,
              "max": 20,
              "min": 1,
            },
          },
          Object {
            "id": "node-size-slider-1",
            "name": "Node size for Selected Residue Pairs",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 6,
              "max": 20,
              "min": 1,
            },
          },
        ]
      }
      contactData={
        Array [
          Object {
            "hoverinfo": "text",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "mode": "lines+markers",
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [
              Object {
                "dist": 1.3,
                "i": 41,
                "j": 52,
              },
              Object {
                "dist": 2.4,
                "i": 50,
                "j": 56,
              },
            ],
            "subtitle": "(from PDB structure)",
            "text": Array [
              "(41, 52)",
              "(50, 56)",
            ],
          },
          Object {
            "hoverinfo": "none",
            "marker": Object {
              "color": Array [
                "#ff8800",
                "#ff8800",
              ],
              "line": Object {
                "color": "#ff8800",
                "width": 3,
              },
              "symbol": "circle-open",
            },
            "mode": "lines+markers",
            "name": "Selected Residue Pairs",
            "nodeSize": 6,
            "points": Array [
              Object {
                "i": 41,
                "j": 41,
              },
            ],
            "subtitle": "",
          },
        ]
      }
      dataTransformFn={[Function]}
      height="100%"
      legendModifiers={
        Object {
          "y": -0.4,
        }
      }
      marginModifiers={
        Object {
          "b": 65,
          "l": 65,
        }
      }
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={77}
      secondaryStructures={Array []}
      selectedSecondaryStructures={
        Array [
          Array [],
        ]
      }
      selectedSecondaryStructuresColor="#feb83f"
      showConfigurations={true}
      width="100%"
    />
  </DimmerDimmable>
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when basic data. 1`] = `
<div
  className="ContactMapComponent"
  style={Object {}}
>
  <DimmerDimmable
    dimmed={true}
  >
    <Dimmer
      active={false}
    >
      <Loader />
    </Dimmer>
    <ContactMapChart
      candidateResidues={Array []}
      configurations={
        Array [
          Object {
            "name": "Clear Selections",
            "onClick": [Function],
            "type": "BUTTON",
          },
          Object {
            "id": "node-size-slider-0",
            "name": "Node size for Known Structure Contact",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 4,
              "max": 20,
              "min": 1,
            },
          },
          Object {
            "id": "node-size-slider-1",
            "name": "Node size for Selected Residue Pairs",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 6,
              "max": 20,
              "min": 1,
            },
          },
        ]
      }
      contactData={
        Array [
          Object {
            "hoverinfo": "text",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "mode": "lines+markers",
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [
              Object {
                "dist": 1.3,
                "i": 41,
                "j": 52,
              },
              Object {
                "dist": 2.4,
                "i": 50,
                "j": 56,
              },
            ],
            "subtitle": "(from PDB structure)",
            "text": Array [
              "(41, 52)",
              "(50, 56)",
            ],
          },
          Object {
            "hoverinfo": "none",
            "marker": Object {
              "color": Array [],
              "line": Object {
                "color": "#ff8800",
                "width": 3,
              },
              "symbol": "circle-open",
            },
            "mode": "lines+markers",
            "name": "Selected Residue Pairs",
            "nodeSize": 6,
            "points": Array [],
            "subtitle": "",
          },
        ]
      }
      dataTransformFn={[Function]}
      height="100%"
      legendModifiers={
        Object {
          "y": -0.4,
        }
      }
      marginModifiers={
        Object {
          "b": 65,
          "l": 65,
        }
      }
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={77}
      secondaryStructures={Array []}
      selectedSecondaryStructures={
        Array [
          Array [],
        ]
      }
      selectedSecondaryStructuresColor="#feb83f"
      showConfigurations={true}
      width="100%"
    />
  </DimmerDimmable>
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when given data with a PDB. 1`] = `
<div
  className="ContactMapComponent"
  style={Object {}}
>
  <DimmerDimmable
    dimmed={true}
  >
    <Dimmer
      active={false}
    >
      <Loader />
    </Dimmer>
    <ContactMapChart
      candidateResidues={Array []}
      configurations={
        Array [
          Object {
            "name": "Clear Selections",
            "onClick": [Function],
            "type": "BUTTON",
          },
          Object {
            "id": "node-size-slider-0",
            "name": "Node size for Known Structure Contact",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 4,
              "max": 20,
              "min": 1,
            },
          },
          Object {
            "id": "node-size-slider-1",
            "name": "Node size for Selected Residue Pairs",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 6,
              "max": 20,
              "min": 1,
            },
          },
        ]
      }
      contactData={
        Array [
          Object {
            "hoverinfo": "text",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "mode": "lines+markers",
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [
              Object {
                "A_i": "N",
                "A_j": "I",
                "dist": 1.3,
                "i": 1,
                "j": 10,
              },
            ],
            "subtitle": "(from PDB structure)",
            "text": Array [
              "(1N, 10I)",
            ],
          },
          Object {
            "hoverinfo": "none",
            "marker": Object {
              "color": Array [],
              "line": Object {
                "color": "#ff8800",
                "width": 3,
              },
              "symbol": "circle-open",
            },
            "mode": "lines+markers",
            "name": "Selected Residue Pairs",
            "nodeSize": 6,
            "points": Array [],
            "subtitle": "",
          },
        ]
      }
      dataTransformFn={[Function]}
      height="100%"
      legendModifiers={
        Object {
          "y": -0.4,
        }
      }
      marginModifiers={
        Object {
          "b": 65,
          "l": 65,
        }
      }
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={70}
      secondaryStructures={Array []}
      selectedSecondaryStructures={
        Array [
          Array [],
        ]
      }
      selectedSecondaryStructuresColor="#feb83f"
      showConfigurations={true}
      width="100%"
    />
  </DimmerDimmable>
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when given data with amino acids. 1`] = `
<div
  className="ContactMapComponent"
  style={Object {}}
>
  <DimmerDimmable
    dimmed={true}
  >
    <Dimmer
      active={false}
    >
      <Loader />
    </Dimmer>
    <ContactMapChart
      candidateResidues={Array []}
      configurations={
        Array [
          Object {
            "name": "Clear Selections",
            "onClick": [Function],
            "type": "BUTTON",
          },
          Object {
            "id": "node-size-slider-0",
            "name": "Node size for Known Structure Contact",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 4,
              "max": 20,
              "min": 1,
            },
          },
          Object {
            "id": "node-size-slider-1",
            "name": "Node size for Selected Residue Pairs",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 6,
              "max": 20,
              "min": 1,
            },
          },
        ]
      }
      contactData={
        Array [
          Object {
            "hoverinfo": "text",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "mode": "lines+markers",
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [
              Object {
                "A_i": "N",
                "A_j": "I",
                "dist": 1.3,
                "i": 1,
                "j": 10,
              },
            ],
            "subtitle": "(from PDB structure)",
            "text": Array [
              "(1N, 10I)",
            ],
          },
          Object {
            "hoverinfo": "none",
            "marker": Object {
              "color": Array [],
              "line": Object {
                "color": "#ff8800",
                "width": 3,
              },
              "symbol": "circle-open",
            },
            "mode": "lines+markers",
            "name": "Selected Residue Pairs",
            "nodeSize": 6,
            "points": Array [],
            "subtitle": "",
          },
        ]
      }
      dataTransformFn={[Function]}
      height="100%"
      legendModifiers={
        Object {
          "y": -0.4,
        }
      }
      marginModifiers={
        Object {
          "b": 65,
          "l": 65,
        }
      }
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={70}
      secondaryStructures={Array []}
      selectedSecondaryStructures={
        Array [
          Array [],
        ]
      }
      selectedSecondaryStructuresColor="#feb83f"
      showConfigurations={true}
      width="100%"
    />
  </DimmerDimmable>
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when given empty data. 1`] = `
<div
  className="ContactMapComponent"
  style={Object {}}
>
  <DimmerDimmable
    dimmed={true}
  >
    <Dimmer
      active={false}
    >
      <Loader />
    </Dimmer>
    <ContactMapChart
      candidateResidues={Array []}
      configurations={
        Array [
          Object {
            "name": "Clear Selections",
            "onClick": [Function],
            "type": "BUTTON",
          },
          Object {
            "id": "node-size-slider-0",
            "name": "Node size for Known Structure Contact",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 4,
              "max": 20,
              "min": 1,
            },
          },
          Object {
            "id": "node-size-slider-1",
            "name": "Node size for Selected Residue Pairs",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 6,
              "max": 20,
              "min": 1,
            },
          },
        ]
      }
      contactData={
        Array [
          Object {
            "hoverinfo": "text",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "mode": "lines+markers",
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [],
            "subtitle": "(from PDB structure)",
            "text": Array [],
          },
          Object {
            "hoverinfo": "none",
            "marker": Object {
              "color": Array [],
              "line": Object {
                "color": "#ff8800",
                "width": 3,
              },
              "symbol": "circle-open",
            },
            "mode": "lines+markers",
            "name": "Selected Residue Pairs",
            "nodeSize": 6,
            "points": Array [],
            "subtitle": "",
          },
        ]
      }
      dataTransformFn={[Function]}
      height="100%"
      legendModifiers={
        Object {
          "y": -0.4,
        }
      }
      marginModifiers={
        Object {
          "b": 65,
          "l": 65,
        }
      }
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={70}
      secondaryStructures={Array []}
      selectedSecondaryStructures={
        Array [
          Array [],
        ]
      }
      selectedSecondaryStructuresColor="#feb83f"
      showConfigurations={true}
      width="100%"
    />
  </DimmerDimmable>
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when given no data. 1`] = `
<div
  className="ContactMapComponent"
  style={Object {}}
>
  <DimmerDimmable
    dimmed={true}
  >
    <Dimmer
      active={false}
    >
      <Loader />
    </Dimmer>
    <ContactMapChart
      candidateResidues={Array []}
      configurations={
        Array [
          Object {
            "name": "Clear Selections",
            "onClick": [Function],
            "type": "BUTTON",
          },
          Object {
            "id": "node-size-slider-0",
            "name": "Node size for Known Structure Contact",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 4,
              "max": 20,
              "min": 1,
            },
          },
          Object {
            "id": "node-size-slider-1",
            "name": "Node size for Selected Residue Pairs",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 6,
              "max": 20,
              "min": 1,
            },
          },
        ]
      }
      contactData={
        Array [
          Object {
            "hoverinfo": "text",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "mode": "lines+markers",
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [],
            "subtitle": "(from PDB structure)",
            "text": Array [],
          },
          Object {
            "hoverinfo": "none",
            "marker": Object {
              "color": Array [],
              "line": Object {
                "color": "#ff8800",
                "width": 3,
              },
              "symbol": "circle-open",
            },
            "mode": "lines+markers",
            "name": "Selected Residue Pairs",
            "nodeSize": 6,
            "points": Array [],
            "subtitle": "",
          },
        ]
      }
      dataTransformFn={[Function]}
      height="100%"
      legendModifiers={
        Object {
          "y": -0.4,
        }
      }
      marginModifiers={
        Object {
          "b": 65,
          "l": 65,
        }
      }
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={70}
      secondaryStructures={Array []}
      selectedSecondaryStructures={
        Array [
          Array [],
        ]
      }
      selectedSecondaryStructuresColor="#feb83f"
      showConfigurations={true}
      width="100%"
    />
  </DimmerDimmable>
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when multiple points are hovered. 1`] = `
<div
  className="ContactMapComponent"
  style={Object {}}
>
  <DimmerDimmable
    dimmed={true}
  >
    <Dimmer
      active={false}
    >
      <Loader />
    </Dimmer>
    <ContactMapChart
      candidateResidues={Array []}
      configurations={
        Array [
          Object {
            "name": "Clear Selections",
            "onClick": [Function],
            "type": "BUTTON",
          },
          Object {
            "id": "node-size-slider-0",
            "name": "Node size for Known Structure Contact",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 4,
              "max": 20,
              "min": 1,
            },
          },
          Object {
            "id": "node-size-slider-1",
            "name": "Node size for Selected Residue Pairs",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 6,
              "max": 20,
              "min": 1,
            },
          },
        ]
      }
      contactData={
        Array [
          Object {
            "hoverinfo": "text",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "mode": "lines+markers",
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [
              Object {
                "dist": 1.3,
                "i": 41,
                "j": 52,
              },
              Object {
                "dist": 2.4,
                "i": 50,
                "j": 56,
              },
            ],
            "subtitle": "(from PDB structure)",
            "text": Array [
              "(41, 52)",
              "(50, 56)",
            ],
          },
          Object {
            "hoverinfo": "none",
            "marker": Object {
              "color": Array [
                "#ff8800",
                "#ff8800",
              ],
              "line": Object {
                "color": "#ff8800",
                "width": 3,
              },
              "symbol": "circle-open",
            },
            "mode": "lines+markers",
            "name": "Selected Residue Pairs",
            "nodeSize": 6,
            "points": Array [
              Object {
                "i": 41,
                "j": 52,
              },
            ],
            "subtitle": "",
          },
        ]
      }
      dataTransformFn={[Function]}
      height="100%"
      legendModifiers={
        Object {
          "y": -0.4,
        }
      }
      marginModifiers={
        Object {
          "b": 65,
          "l": 65,
        }
      }
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={77}
      secondaryStructures={Array []}
      selectedSecondaryStructures={
        Array [
          Array [],
        ]
      }
      selectedSecondaryStructuresColor="#feb83f"
      showConfigurations={true}
      width="100%"
    />
  </DimmerDimmable>
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when multiple points are selected. 1`] = `
<div
  className="ContactMapComponent"
  style={Object {}}
>
  <DimmerDimmable
    dimmed={true}
  >
    <Dimmer
      active={false}
    >
      <Loader />
    </Dimmer>
    <ContactMapChart
      candidateResidues={Array []}
      configurations={
        Array [
          Object {
            "name": "Clear Selections",
            "onClick": [Function],
            "type": "BUTTON",
          },
          Object {
            "id": "node-size-slider-0",
            "name": "Node size for Known Structure Contact",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 4,
              "max": 20,
              "min": 1,
            },
          },
          Object {
            "id": "node-size-slider-1",
            "name": "Node size for Selected Residue Pairs",
            "onChange": [Function],
            "type": "SLIDER",
            "values": Object {
              "current": 6,
              "max": 20,
              "min": 1,
            },
          },
        ]
      }
      contactData={
        Array [
          Object {
            "hoverinfo": "text",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "mode": "lines+markers",
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [
              Object {
                "dist": 1.3,
                "i": 41,
                "j": 52,
              },
              Object {
                "dist": 2.4,
                "i": 50,
                "j": 56,
              },
            ],
            "subtitle": "(from PDB structure)",
            "text": Array [
              "(41, 52)",
              "(50, 56)",
            ],
          },
          Object {
            "hoverinfo": "none",
            "marker": Object {
              "color": Array [
                "#ff8800",
                "#ff8800",
                "#ff8800",
                "#ff8800",
                "#ff8800",
                "#ff8800",
              ],
              "line": Object {
                "color": "#ff8800",
                "width": 3,
              },
              "symbol": "circle-open",
            },
            "mode": "lines+markers",
            "name": "Selected Residue Pairs",
            "nodeSize": 6,
            "points": Array [
              Object {
                "i": 41,
                "j": 52,
              },
              Object {
                "dist": 0,
                "i": 41,
                "j": 52,
              },
              Object {
                "dist": 0,
                "i": 50,
                "j": 56,
              },
            ],
            "subtitle": "",
          },
        ]
      }
      dataTransformFn={[Function]}
      height="100%"
      legendModifiers={
        Object {
          "y": -0.4,
        }
      }
      marginModifiers={
        Object {
          "b": 65,
          "l": 65,
        }
      }
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={77}
      secondaryStructures={Array []}
      selectedSecondaryStructures={
        Array [
          Array [],
        ]
      }
      selectedSecondaryStructuresColor="#feb83f"
      showConfigurations={true}
      width="100%"
    />
  </DimmerDimmable>
</div>
`;

exports[`ContactMap Snapshots Should match snapshot when locked residues are added. 1`] = `
<ContactMapClass
  configurations={Array []}
  data={
    Object {
      "couplingScores": CouplingContainer {
        "colCounter": 0,
        "contacts": Array [
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          Array [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            Object {
              "dist": 1.3,
              "i": 41,
              "j": 52,
            },
          ],
          Array [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            Object {
              "dist": 20.4,
              "i": 42,
              "j": 50,
            },
          ],
          undefined,
          Array [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            Object {
              "dist": 1.3,
              "i": 44,
              "j": 45,
            },
          ],
          Array [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            Object {
              "dist": 1.3,
              "i": 45,
              "j": 46,
            },
          ],
          undefined,
          undefined,
          undefined,
          undefined,
          Array [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            Object {
              "dist": 2.4,
              "i": 50,
              "j": 56,
            },
          ],
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          Array [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            Object {
              "dist": 1.3,
              "i": 56,
              "j": 57,
            },
          ],
        ],
        "getCouplingScore": [Function],
        "includes": [Function],
        "indexRange": Object {
          "max": 57,
          "min": 1,
        },
        "rowCounter": 0,
        "totalStoredContacts": 6,
      },
      "secondaryStructures": Array [
        Array [
          Object {
            "end": 31,
            "label": "C",
            "length": 2,
            "start": 30,
          },
        ],
      ],
    }
  }
  enableSliders={true}
  formattedPoints={Array []}
  height="100%"
  highlightColor="#ff8800"
  isDataLoading={false}
  lockedResiduePairs={
    Map {
      "8" => Array [
        8,
      ],
      "37,46" => Array [
        37,
        46,
      ],
    }
  }
  observedColor="#0000ff"
  residueContext={
    Object {
      "addCandidateResidues": [Function],
      "addHoveredResidues": [Function],
      "addLockedResiduePair": [Function],
      "candidateResidues": Array [],
      "clearAllResidues": [Function],
      "hoveredResidues": Array [],
      "lockedResiduePairs": Map {},
      "removeAllLockedResiduePairs": [Function],
      "removeCandidateResidues": [Function],
      "removeHoveredResidues": [Function],
      "removeLockedResiduePair": [Function],
      "removeNonLockedResidues": [Function],
      "toggleLockedResiduePair": [Function],
    }
  }
  secondaryStructureContext={
    Object {
      "addHoveredSecondaryStructure": [Function],
      "addSelectedSecondaryStructure": [Function],
      "clearAllSecondaryStructures": [Function],
      "hoveredSecondaryStructures": Array [],
      "removeHoveredSecondaryStructure": [Function],
      "removeSecondaryStructure": [Function],
      "selectedSecondaryStructures": Array [],
    }
  }
  showConfigurations={true}
  width="100%"
>
  <div
    className="ContactMapComponent"
    style={Object {}}
  >
    <DimmerDimmable
      dimmed={true}
    >
      <div
        className="dimmed dimmable"
      >
        <Dimmer
          active={false}
        >
          <DimmerInner
            active={false}
          >
            <div
              className="ui dimmer"
              onClick={[Function]}
            >
              <div
                className="content"
              >
                <Loader>
                  <div
                    className="ui loader"
                  />
                </Loader>
              </div>
            </div>
          </DimmerInner>
        </Dimmer>
        <ContactMapChart
          candidateResidues={Array []}
          configurations={
            Array [
              Object {
                "name": "Clear Selections",
                "onClick": [Function],
                "type": "BUTTON",
              },
              Object {
                "id": "node-size-slider-0",
                "name": "Node size for Known Structure Contact",
                "onChange": [Function],
                "type": "SLIDER",
                "values": Object {
                  "current": 4,
                  "max": 20,
                  "min": 1,
                },
              },
              Object {
                "id": "node-size-slider-1",
                "name": "Node size for Selected Residue Pairs",
                "onChange": [Function],
                "type": "SLIDER",
                "values": Object {
                  "current": 6,
                  "max": 20,
                  "min": 1,
                },
              },
            ]
          }
          contactData={
            Array [
              Object {
                "hoverinfo": "text",
                "marker": Object {
                  "colorscale": Array [
                    Array [
                      0,
                      "rgb(12,50,102)",
                    ],
                    Array [
                      0.1,
                      "rgb(17,83,150)",
                    ],
                    Array [
                      0.2,
                      "rgb(40,114,175)",
                    ],
                    Array [
                      0.3,
                      "rgb(71,147,193)",
                    ],
                    Array [
                      0.4,
                      "rgb(111,175,209)",
                    ],
                    Array [
                      0.5,
                      "rgb(160,202,222)",
                    ],
                    Array [
                      0.6,
                      "rgb(200,219,237)",
                    ],
                    Array [
                      0.7,
                      "rgb(224,235,246)",
                    ],
                    Array [
                      0.8,
                      "rgb(247,251,255)",
                    ],
                    Array [
                      0.9,
                      "rgb(249,253,255)",
                    ],
                    Array [
                      1,
                      "rgb(255,255,255)",
                    ],
                  ],
                },
                "mode": "lines+markers",
                "name": "Known Structure Contact",
                "nodeSize": 4,
                "points": Array [
                  Object {
                    "dist": 1.3,
                    "i": 41,
                    "j": 52,
                  },
                  Object {
                    "dist": 2.4,
                    "i": 50,
                    "j": 56,
                  },
                ],
                "subtitle": "(from PDB structure)",
                "text": Array [
                  "(41, 52)",
                  "(50, 56)",
                ],
              },
              Object {
                "hoverinfo": "none",
                "marker": Object {
                  "color": Array [],
                  "line": Object {
                    "color": "#ff8800",
                    "width": 3,
                  },
                  "symbol": "circle-open",
                },
                "mode": "lines+markers",
                "name": "Selected Residue Pairs",
                "nodeSize": 6,
                "points": Array [],
                "subtitle": "",
              },
            ]
          }
          dataTransformFn={[Function]}
          height="100%"
          legendModifiers={
            Object {
              "y": -0.4,
            }
          }
          marginModifiers={
            Object {
              "b": 65,
              "l": 65,
            }
          }
          onClickCallback={[Function]}
          onHoverCallback={[Function]}
          onSelectedCallback={[Function]}
          onUnHoverCallback={[Function]}
          range={77}
          secondaryStructures={Array []}
          selectedSecondaryStructures={
            Array [
              Array [],
            ]
          }
          selectedSecondaryStructuresColor="#feb83f"
          showConfigurations={true}
          width="100%"
        >
          <SettingsPanel
            configurations={
              Array [
                Object {
                  "name": "Clear Selections",
                  "onClick": [Function],
                  "type": "BUTTON",
                },
                Object {
                  "id": "node-size-slider-0",
                  "name": "Node size for Known Structure Contact",
                  "onChange": [Function],
                  "type": "SLIDER",
                  "values": Object {
                    "current": 4,
                    "max": 20,
                    "min": 1,
                  },
                },
                Object {
                  "id": "node-size-slider-1",
                  "name": "Node size for Selected Residue Pairs",
                  "onChange": [Function],
                  "type": "SLIDER",
                  "values": Object {
                    "current": 6,
                    "max": 20,
                    "min": 1,
                  },
                },
              ]
            }
            direction="left"
            inverted={true}
            showConfigurations={true}
            width="100%"
          >
            <div>
              <Grid
                columns={1}
              >
                <div
                  className="ui one column grid"
                >
                  <GridColumn>
                    <div
                      className="column"
                    >
                      <Button
                        as="button"
                        basic={true}
                        floated="right"
                        icon="settings"
                        onClick={[Function]}
                        role="button"
                      >
                        <button
                          className="ui basic icon right floated button"
                          onClick={[Function]}
                          role="button"
                        >
                          <Icon
                            as="i"
                            name="settings"
                          >
                            <i
                              aria-hidden="true"
                              className="settings icon"
                            />
                          </Icon>
                        </button>
                      </Button>
                    </div>
                  </GridColumn>
                  <SidebarPushable
                    style={
                      Object {
                        "width": "100%",
                      }
                    }
                  >
                    <div
                      className="pushable"
                      style={
                        Object {
                          "width": "100%",
                        }
                      }
                    >
                      <Sidebar
                        animation="overlay"
                        as={[Function]}
                        direction="left"
                        duration={500}
                        inverted={true}
                        style={
                          Object {
                            "opacity": 0.6,
                            "width": "100%",
                          }
                        }
                        vertical={true}
                        visible={false}
                      >
                        <Ref
                          innerRef={[Function]}
                        >
                          <Menu
                            className="ui overlay left sidebar"
                            inverted={true}
                            style={
                              Object {
                                "opacity": 0.6,
                                "width": "100%",
                              }
                            }
                            vertical={true}
                          >
                            <div
                              className="ui inverted vertical ui overlay left sidebar menu"
                              style={
                                Object {
                                  "opacity": 0.6,
                                  "width": "100%",
                                }
                              }
                            >
                              <Grid
                                centered={true}
                              >
                                <div
                                  className="ui centered grid"
                                >
                                  <GridRow
                                    key="clear-selections-0"
                                  >
                                    <div
                                      className="row"
                                    >
                                      <Button
                                        as="button"
                                        compact={true}
                                        id="clear-selections-0"
                                        onClick={[Function]}
                                        role="button"
                                        style={Object {}}
                                      >
                                        <button
                                          className="ui compact button"
                                          id="clear-selections-0"
                                          onClick={[Function]}
                                          role="button"
                                          style={Object {}}
                                        >
                                          Clear Selections
                                        </button>
                                      </Button>
                                    </div>
                                  </GridRow>
                                  <GridRow
                                    key="node-size-slider-0"
                                  >
                                    <div
                                      className="row"
                                    >
                                      <ChellSlider
                                        className="node-size-slider-0"
                                        label="Node size for Known Structure Contact"
                                        max={20}
                                        min={1}
                                        onChange={[Function]}
                                        style={
                                          Object {
                                            "color": "white",
                                            "padding": "0 25px",
                                            "width": "95%",
                                          }
                                        }
                                        value={4}
                                      >
                                        <Grid
                                          columns="equal"
                                          style={
                                            Object {
                                              "color": "white",
                                              "padding": "0 25px",
                                              "width": "95%",
                                            }
                                          }
                                          textAlign="left"
                                        >
                                          <div
                                            className="ui left aligned equal width grid"
                                            style={
                                              Object {
                                                "color": "white",
                                                "padding": "0 25px",
                                                "width": "95%",
                                              }
                                            }
                                          >
                                            <GridColumn
                                              className="node-size-slider-0"
                                            >
                                              <div
                                                className="column node-size-slider-0"
                                              >
                                                <p>
                                                  Node size for Known Structure Contact: 4
                                                </p>
                                                <ComponentEnhancer(undefined)
                                                  activeDotStyle={Object {}}
                                                  className=""
                                                  disabled={false}
                                                  dotStyle={Object {}}
                                                  dots={false}
                                                  handle={[Function]}
                                                  handleStyle={
                                                    Array [
                                                      Object {},
                                                    ]
                                                  }
                                                  included={true}
                                                  marks={Object {}}
                                                  max={20}
                                                  min={1}
                                                  onAfterChange={[Function]}
                                                  onBeforeChange={[Function]}
                                                  onChange={[Function]}
                                                  prefixCls="rc-slider"
                                                  railStyle={Object {}}
                                                  step={1}
                                                  trackStyle={
                                                    Array [
                                                      Object {},
                                                    ]
                                                  }
                                                  value={4}
                                                  vertical={false}
                                                >
                                                  <div
                                                    className="rc-slider"
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchStart={[Function]}
                                                  >
                                                    <div
                                                      className="rc-slider-rail"
                                                      style={Object {}}
                                                    />
                                                    <Track
                                                      className="rc-slider-track"
                                                      included={true}
                                                      length={15.789473684210526}
                                                      offset={0}
                                                      style={Object {}}
                                                      vertical={false}
                                                    >
                                                      <div
                                                        className="rc-slider-track"
                                                        style={
                                                          Object {
                                                            "left": "0%",
                                                            "width": "15.789473684210526%",
                                                          }
                                                        }
                                                      />
                                                    </Track>
                                                    <Steps
                                                      activeDotStyle={Object {}}
                                                      dotStyle={Object {}}
                                                      dots={false}
                                                      included={true}
                                                      lowerBound={1}
                                                      marks={Object {}}
                                                      max={20}
                                                      min={1}
                                                      prefixCls="rc-slider"
                                                      step={1}
                                                      upperBound={4}
                                                      vertical={false}
                                                    >
                                                      <div
                                                        className="rc-slider-step"
                                                      />
                                                    </Steps>
                                                    <Handle
                                                      className="rc-slider-handle"
                                                      disabled={false}
                                                      key="0"
                                                      max={20}
                                                      min={1}
                                                      offset={15.789473684210526}
                                                      prefixCls="rc-slider"
                                                      style={Object {}}
                                                      value={4}
                                                      vertical={false}
                                                    >
                                                      <div
                                                        aria-disabled={false}
                                                        aria-valuemax={20}
                                                        aria-valuemin={1}
                                                        aria-valuenow={4}
                                                        className="rc-slider-handle"
                                                        onBlur={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="slider"
                                                        style={
                                                          Object {
                                                            "left": "15.789473684210526%",
                                                          }
                                                        }
                                                        tabIndex={0}
                                                      />
                                                    </Handle>
                                                    <Marks
                                                      className="rc-slider-mark"
                                                      included={true}
                                                      lowerBound={1}
                                                      marks={Object {}}
                                                      max={20}
                                                      min={1}
                                                      onClickLabel={[Function]}
                                                      upperBound={4}
                                                      vertical={false}
                                                    >
                                                      <div
                                                        className="rc-slider-mark"
                                                      />
                                                    </Marks>
                                                  </div>
                                                </ComponentEnhancer(undefined)>
                                              </div>
                                            </GridColumn>
                                            <GridColumn
                                              verticalAlign="middle"
                                              width={2}
                                            >
                                              <div
                                                className="middle aligned two wide column"
                                              >
                                                <Button
                                                  as="button"
                                                  icon="undo"
                                                  onClick={[Function]}
                                                  role="button"
                                                  size="small"
                                                >
                                                  <button
                                                    className="ui small icon button"
                                                    onClick={[Function]}
                                                    role="button"
                                                  >
                                                    <Icon
                                                      as="i"
                                                      name="undo"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="undo icon"
                                                      />
                                                    </Icon>
                                                  </button>
                                                </Button>
                                              </div>
                                            </GridColumn>
                                          </div>
                                        </Grid>
                                      </ChellSlider>
                                    </div>
                                  </GridRow>
                                  <GridRow
                                    key="node-size-slider-1"
                                  >
                                    <div
                                      className="row"
                                    >
                                      <ChellSlider
                                        className="node-size-slider-1"
                                        label="Node size for Selected Residue Pairs"
                                        max={20}
                                        min={1}
                                        onChange={[Function]}
                                        style={
                                          Object {
                                            "color": "white",
                                            "padding": "0 25px",
                                            "width": "95%",
                                          }
                                        }
                                        value={6}
                                      >
                                        <Grid
                                          columns="equal"
                                          style={
                                            Object {
                                              "color": "white",
                                              "padding": "0 25px",
                                              "width": "95%",
                                            }
                                          }
                                          textAlign="left"
                                        >
                                          <div
                                            className="ui left aligned equal width grid"
                                            style={
                                              Object {
                                                "color": "white",
                                                "padding": "0 25px",
                                                "width": "95%",
                                              }
                                            }
                                          >
                                            <GridColumn
                                              className="node-size-slider-1"
                                            >
                                              <div
                                                className="column node-size-slider-1"
                                              >
                                                <p>
                                                  Node size for Selected Residue Pairs: 6
                                                </p>
                                                <ComponentEnhancer(undefined)
                                                  activeDotStyle={Object {}}
                                                  className=""
                                                  disabled={false}
                                                  dotStyle={Object {}}
                                                  dots={false}
                                                  handle={[Function]}
                                                  handleStyle={
                                                    Array [
                                                      Object {},
                                                    ]
                                                  }
                                                  included={true}
                                                  marks={Object {}}
                                                  max={20}
                                                  min={1}
                                                  onAfterChange={[Function]}
                                                  onBeforeChange={[Function]}
                                                  onChange={[Function]}
                                                  prefixCls="rc-slider"
                                                  railStyle={Object {}}
                                                  step={1}
                                                  trackStyle={
                                                    Array [
                                                      Object {},
                                                    ]
                                                  }
                                                  value={6}
                                                  vertical={false}
                                                >
                                                  <div
                                                    className="rc-slider"
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchStart={[Function]}
                                                  >
                                                    <div
                                                      className="rc-slider-rail"
                                                      style={Object {}}
                                                    />
                                                    <Track
                                                      className="rc-slider-track"
                                                      included={true}
                                                      length={26.31578947368421}
                                                      offset={0}
                                                      style={Object {}}
                                                      vertical={false}
                                                    >
                                                      <div
                                                        className="rc-slider-track"
                                                        style={
                                                          Object {
                                                            "left": "0%",
                                                            "width": "26.31578947368421%",
                                                          }
                                                        }
                                                      />
                                                    </Track>
                                                    <Steps
                                                      activeDotStyle={Object {}}
                                                      dotStyle={Object {}}
                                                      dots={false}
                                                      included={true}
                                                      lowerBound={1}
                                                      marks={Object {}}
                                                      max={20}
                                                      min={1}
                                                      prefixCls="rc-slider"
                                                      step={1}
                                                      upperBound={6}
                                                      vertical={false}
                                                    >
                                                      <div
                                                        className="rc-slider-step"
                                                      />
                                                    </Steps>
                                                    <Handle
                                                      className="rc-slider-handle"
                                                      disabled={false}
                                                      key="0"
                                                      max={20}
                                                      min={1}
                                                      offset={26.31578947368421}
                                                      prefixCls="rc-slider"
                                                      style={Object {}}
                                                      value={6}
                                                      vertical={false}
                                                    >
                                                      <div
                                                        aria-disabled={false}
                                                        aria-valuemax={20}
                                                        aria-valuemin={1}
                                                        aria-valuenow={6}
                                                        className="rc-slider-handle"
                                                        onBlur={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="slider"
                                                        style={
                                                          Object {
                                                            "left": "26.31578947368421%",
                                                          }
                                                        }
                                                        tabIndex={0}
                                                      />
                                                    </Handle>
                                                    <Marks
                                                      className="rc-slider-mark"
                                                      included={true}
                                                      lowerBound={1}
                                                      marks={Object {}}
                                                      max={20}
                                                      min={1}
                                                      onClickLabel={[Function]}
                                                      upperBound={6}
                                                      vertical={false}
                                                    >
                                                      <div
                                                        className="rc-slider-mark"
                                                      />
                                                    </Marks>
                                                  </div>
                                                </ComponentEnhancer(undefined)>
                                              </div>
                                            </GridColumn>
                                            <GridColumn
                                              verticalAlign="middle"
                                              width={2}
                                            >
                                              <div
                                                className="middle aligned two wide column"
                                              >
                                                <Button
                                                  as="button"
                                                  icon="undo"
                                                  onClick={[Function]}
                                                  role="button"
                                                  size="small"
                                                >
                                                  <button
                                                    className="ui small icon button"
                                                    onClick={[Function]}
                                                    role="button"
                                                  >
                                                    <Icon
                                                      as="i"
                                                      name="undo"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="undo icon"
                                                      />
                                                    </Icon>
                                                  </button>
                                                </Button>
                                              </div>
                                            </GridColumn>
                                          </div>
                                        </Grid>
                                      </ChellSlider>
                                    </div>
                                  </GridRow>
                                </div>
                              </Grid>
                            </div>
                          </Menu>
                        </Ref>
                      </Sidebar>
                      <SidebarPusher>
                        <div
                          className="pusher"
                        >
                          <Button
                            as="button"
                            basic={true}
                            floated="left"
                            icon={
                              <Icon
                                as="i"
                                name="question circle outline"
                                size="large"
                              />
                            }
                            onClick={[Function]}
                            role="button"
                            style={
                              Object {
                                "float": "left",
                                "margin": "0 0 0 15px",
                                "position": "relative",
                                "top": "500px",
                                "zIndex": 999,
                              }
                            }
                          >
                            <button
                              className="ui basic icon left floated button"
                              onClick={[Function]}
                              role="button"
                              style={
                                Object {
                                  "float": "left",
                                  "margin": "0 0 0 15px",
                                  "position": "relative",
                                  "top": "500px",
                                  "zIndex": 999,
                                }
                              }
                            >
                              <Icon
                                as="i"
                                name="question circle outline"
                                size="large"
                              >
                                <i
                                  aria-hidden="true"
                                  className="question circle outline large icon"
                                />
                              </Icon>
                            </button>
                          </Button>
                          <PlotlyChart
                            candidateResidues={Array []}
                            config={Object {}}
                            data={
                              Array [
                                Object {
                                  "hoverinfo": "text",
                                  "marker": Object {
                                    "color": Array [
                                      "1.3",
                                      "2.4",
                                      "1.3",
                                      "2.4",
                                    ],
                                    "colorscale": Array [
                                      Array [
                                        0,
                                        "rgb(12,50,102)",
                                      ],
                                      Array [
                                        0.1,
                                        "rgb(17,83,150)",
                                      ],
                                      Array [
                                        0.2,
                                        "rgb(40,114,175)",
                                      ],
                                      Array [
                                        0.3,
                                        "rgb(71,147,193)",
                                      ],
                                      Array [
                                        0.4,
                                        "rgb(111,175,209)",
                                      ],
                                      Array [
                                        0.5,
                                        "rgb(160,202,222)",
                                      ],
                                      Array [
                                        0.6,
                                        "rgb(200,219,237)",
                                      ],
                                      Array [
                                        0.7,
                                        "rgb(224,235,246)",
                                      ],
                                      Array [
                                        0.8,
                                        "rgb(247,251,255)",
                                      ],
                                      Array [
                                        0.9,
                                        "rgb(249,253,255)",
                                      ],
                                      Array [
                                        1,
                                        "rgb(255,255,255)",
                                      ],
                                    ],
                                    "size": 4,
                                  },
                                  "mode": "markers",
                                  "name": "Known Structure Contact (from PDB structure)",
                                  "text": Array [
                                    "(41, 52)",
                                    "(50, 56)",
                                    "(52, 41)",
                                    "(56, 50)",
                                  ],
                                  "type": "scattergl",
                                  "x": Array [
                                    41,
                                    50,
                                    52,
                                    56,
                                  ],
                                  "y": Array [
                                    52,
                                    56,
                                    41,
                                    50,
                                  ],
                                  "z": Array [
                                    1.3,
                                    2.4,
                                    1.3,
                                    2.4,
                                  ],
                                },
                                Object {
                                  "hoverinfo": "none",
                                  "marker": Object {
                                    "color": Array [],
                                    "line": Object {
                                      "color": "#ff8800",
                                      "width": 3,
                                    },
                                    "size": 6,
                                    "symbol": "circle-open",
                                  },
                                  "mode": "markers",
                                  "name": "Selected Residue Pairs ",
                                  "text": Array [],
                                  "type": "scattergl",
                                  "x": Array [],
                                  "y": Array [],
                                  "z": Array [],
                                },
                              ]
                            }
                            dataTransformFn={[Function]}
                            height="100%"
                            layout={
                              Object {
                                "legend": Object {
                                  "orientation": "h",
                                  "y": -0.4,
                                  "yanchor": "bottom",
                                },
                                "margin": Object {
                                  "b": 65,
                                  "l": 65,
                                },
                                "showlegend": false,
                                "xaxis": Object {
                                  "autorange": true,
                                  "nticks": 10,
                                  "showline": true,
                                  "tickmode": "auto",
                                  "title": "Residue #",
                                },
                                "yaxis": Object {
                                  "autorange": "reversed",
                                  "nticks": 10,
                                  "showline": true,
                                  "tickmode": "auto",
                                  "title": "Residue #",
                                },
                              }
                            }
                            onClickCallback={[Function]}
                            onHoverCallback={[Function]}
                            onSelectedCallback={[Function]}
                            onUnHoverCallback={[Function]}
                            secondaryStructures={Array []}
                            selectedSecondaryStructures={
                              Array [
                                Array [],
                              ]
                            }
                            selectedSecondaryStructuresColor="#feb83f"
                            showLoader={true}
                            width="100%"
                          >
                            <div>
                              <Dimmer
                                active={false}
                              >
                                <DimmerInner
                                  active={false}
                                >
                                  <div
                                    className="ui dimmer"
                                    onClick={[Function]}
                                  >
                                    <div
                                      className="content"
                                    >
                                      <Loader>
                                        <div
                                          className="ui loader"
                                        />
                                      </Loader>
                                    </div>
                                  </div>
                                </DimmerInner>
                              </Dimmer>
                              <div
                                className="plotly-chart"
                                style={
                                  Object {
                                    "height": "100%",
                                    "marginBottom": 5,
                                    "width": "100%",
                                  }
                                }
                              />
                            </div>
                          </PlotlyChart>
                        </div>
                      </SidebarPusher>
                    </div>
                  </SidebarPushable>
                </div>
              </Grid>
            </div>
          </SettingsPanel>
        </ContactMapChart>
      </div>
    </DimmerDimmable>
  </div>
</ContactMapClass>
`;
